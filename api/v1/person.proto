/* 
  make sure you have the protoc compiler
  and install the go plugins with
  go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
  go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
  then generate with:

  protoc -I./api/v1 --go_out=api/v1/. --go_opt=paths=source_relative --go-grpc_out=api/v1/. --go-grpc_opt=paths=source_relative api/v1/person.proto

  for the grpc-gateway install the following:

  go get github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
  go get github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
  go get google.golang.org/protobuf/cmd/protoc-gen-go
  go get google.golang.org/grpc/cmd/protoc-gen-go-grpc

  and then run:

  protoc -I./api/v1 --grpc-gateway_out api/v1 --grpc-gateway_opt logtostderr=true --grpc-gateway_opt paths=source_relative --grpc-gateway_opt generate_unbound_methods=true api/v1/person.proto
  
  which generates person.pb.gw.go in api/v1
  */
syntax="proto3";

package api.v1;

option go_package = "github.com/ugent-library/people/api/v1";

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

/*
  TODO: omitempty for boolean fields is hardcoded
  into the code generation due to historical mistake.
*/

message IdRef {
  string id = 1;
  string type = 2;
}

// IMPORTANT: tag "json_name" only works for protojson
message Person {
  string id = 1;
  bool active = 2;
  google.protobuf.Timestamp date_created = 3;
  google.protobuf.Timestamp date_updated = 4;
  string full_name = 5;
  string first_name = 6;
  string last_name = 7;
  string email = 8;
  string orcid = 9;
  string orcid_token = 10;
  string preferred_first_name = 11;
  string preferred_last_name = 12;
  string birth_date = 13;
  string job_title = 14;
  repeated IdRef other_id = 15;
  repeated string organization_id = 16;
}

message GetPersonRequest {
  string id = 1;
}

message GetPersonResponse {
  oneof response {
    Person person = 1;   
    google.rpc.Status error = 2;
  }
}

message GetAllPersonRequest {}

message GetAllPersonResponse{
  Person person = 1;
}

service People {
  rpc GetPerson(GetPersonRequest) returns (GetPersonResponse);
  rpc GetAllPerson(GetAllPersonRequest) returns (stream GetAllPersonResponse);
}