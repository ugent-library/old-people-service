//
//make sure you have the protoc compiler
//and install the go plugins with
//go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
//go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
//then generate with
//protoc -I./api/v1 --go_out=api/v1/. --go_opt=paths=source_relative --go-grpc_out=api/v1/. --go-grpc_opt=paths=source_relative api/v1/person.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: person.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	People_GetPerson_FullMethodName    = "/api.v1.People/GetPerson"
	People_GetAllPerson_FullMethodName = "/api.v1.People/GetAllPerson"
)

// PeopleClient is the client API for People service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeopleClient interface {
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error)
	GetAllPerson(ctx context.Context, in *GetAllPersonRequest, opts ...grpc.CallOption) (People_GetAllPersonClient, error)
}

type peopleClient struct {
	cc grpc.ClientConnInterface
}

func NewPeopleClient(cc grpc.ClientConnInterface) PeopleClient {
	return &peopleClient{cc}
}

func (c *peopleClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error) {
	out := new(GetPersonResponse)
	err := c.cc.Invoke(ctx, People_GetPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleClient) GetAllPerson(ctx context.Context, in *GetAllPersonRequest, opts ...grpc.CallOption) (People_GetAllPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &People_ServiceDesc.Streams[0], People_GetAllPerson_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &peopleGetAllPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type People_GetAllPersonClient interface {
	Recv() (*GetAllPersonResponse, error)
	grpc.ClientStream
}

type peopleGetAllPersonClient struct {
	grpc.ClientStream
}

func (x *peopleGetAllPersonClient) Recv() (*GetAllPersonResponse, error) {
	m := new(GetAllPersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeopleServer is the server API for People service.
// All implementations must embed UnimplementedPeopleServer
// for forward compatibility
type PeopleServer interface {
	GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error)
	GetAllPerson(*GetAllPersonRequest, People_GetAllPersonServer) error
	mustEmbedUnimplementedPeopleServer()
}

// UnimplementedPeopleServer must be embedded to have forward compatible implementations.
type UnimplementedPeopleServer struct {
}

func (UnimplementedPeopleServer) GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPeopleServer) GetAllPerson(*GetAllPersonRequest, People_GetAllPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPerson not implemented")
}
func (UnimplementedPeopleServer) mustEmbedUnimplementedPeopleServer() {}

// UnsafePeopleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeopleServer will
// result in compilation errors.
type UnsafePeopleServer interface {
	mustEmbedUnimplementedPeopleServer()
}

func RegisterPeopleServer(s grpc.ServiceRegistrar, srv PeopleServer) {
	s.RegisterService(&People_ServiceDesc, srv)
}

func _People_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: People_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _People_GetAllPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPersonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeopleServer).GetAllPerson(m, &peopleGetAllPersonServer{stream})
}

type People_GetAllPersonServer interface {
	Send(*GetAllPersonResponse) error
	grpc.ServerStream
}

type peopleGetAllPersonServer struct {
	grpc.ServerStream
}

func (x *peopleGetAllPersonServer) Send(m *GetAllPersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

// People_ServiceDesc is the grpc.ServiceDesc for People service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var People_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.People",
	HandlerType: (*PeopleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _People_GetPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllPerson",
			Handler:       _People_GetAllPerson_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "person.proto",
}
