// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error)
	GetAllPerson(ctx context.Context, in *GetAllPersonRequest, opts ...grpc.CallOption) (PersonService_GetAllPersonClient, error)
	SuggestPerson(ctx context.Context, in *SuggestPersonRequest, opts ...grpc.CallOption) (PersonService_SuggestPersonClient, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	GetAllOrganization(ctx context.Context, in *GetAllOrganizationRequest, opts ...grpc.CallOption) (PersonService_GetAllOrganizationClient, error)
	SuggestOrganization(ctx context.Context, in *SuggestOrganizationRequest, opts ...grpc.CallOption) (PersonService_SuggestOrganizationClient, error)
	SetPersonOrcidToken(ctx context.Context, in *SetPersonOrcidTokenRequest, opts ...grpc.CallOption) (*SetPersonOrcidTokenResponse, error)
	SetPersonOrcid(ctx context.Context, in *SetPersonOrcidRequest, opts ...grpc.CallOption) (*SetPersonOrcidResponse, error)
	SetPersonRole(ctx context.Context, in *SetPersonRoleRequest, opts ...grpc.CallOption) (*SetPersonRoleResponse, error)
	SetPersonSettings(ctx context.Context, in *SetPersonSettingsRequest, opts ...grpc.CallOption) (*SetPersonSettingsResponse, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error) {
	out := new(GetPersonResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PersonService/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetAllPerson(ctx context.Context, in *GetAllPersonRequest, opts ...grpc.CallOption) (PersonService_GetAllPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[0], "/api.v1.PersonService/GetAllPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceGetAllPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_GetAllPersonClient interface {
	Recv() (*GetAllPersonResponse, error)
	grpc.ClientStream
}

type personServiceGetAllPersonClient struct {
	grpc.ClientStream
}

func (x *personServiceGetAllPersonClient) Recv() (*GetAllPersonResponse, error) {
	m := new(GetAllPersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) SuggestPerson(ctx context.Context, in *SuggestPersonRequest, opts ...grpc.CallOption) (PersonService_SuggestPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[1], "/api.v1.PersonService/SuggestPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceSuggestPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_SuggestPersonClient interface {
	Recv() (*SuggestPersonResponse, error)
	grpc.ClientStream
}

type personServiceSuggestPersonClient struct {
	grpc.ClientStream
}

func (x *personServiceSuggestPersonClient) Recv() (*SuggestPersonResponse, error) {
	m := new(SuggestPersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PersonService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetAllOrganization(ctx context.Context, in *GetAllOrganizationRequest, opts ...grpc.CallOption) (PersonService_GetAllOrganizationClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[2], "/api.v1.PersonService/GetAllOrganization", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceGetAllOrganizationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_GetAllOrganizationClient interface {
	Recv() (*GetAllOrganizationResponse, error)
	grpc.ClientStream
}

type personServiceGetAllOrganizationClient struct {
	grpc.ClientStream
}

func (x *personServiceGetAllOrganizationClient) Recv() (*GetAllOrganizationResponse, error) {
	m := new(GetAllOrganizationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) SuggestOrganization(ctx context.Context, in *SuggestOrganizationRequest, opts ...grpc.CallOption) (PersonService_SuggestOrganizationClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[3], "/api.v1.PersonService/SuggestOrganization", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceSuggestOrganizationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_SuggestOrganizationClient interface {
	Recv() (*SuggestOrganizationResponse, error)
	grpc.ClientStream
}

type personServiceSuggestOrganizationClient struct {
	grpc.ClientStream
}

func (x *personServiceSuggestOrganizationClient) Recv() (*SuggestOrganizationResponse, error) {
	m := new(SuggestOrganizationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) SetPersonOrcidToken(ctx context.Context, in *SetPersonOrcidTokenRequest, opts ...grpc.CallOption) (*SetPersonOrcidTokenResponse, error) {
	out := new(SetPersonOrcidTokenResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PersonService/SetPersonOrcidToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) SetPersonOrcid(ctx context.Context, in *SetPersonOrcidRequest, opts ...grpc.CallOption) (*SetPersonOrcidResponse, error) {
	out := new(SetPersonOrcidResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PersonService/SetPersonOrcid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) SetPersonRole(ctx context.Context, in *SetPersonRoleRequest, opts ...grpc.CallOption) (*SetPersonRoleResponse, error) {
	out := new(SetPersonRoleResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PersonService/SetPersonRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) SetPersonSettings(ctx context.Context, in *SetPersonSettingsRequest, opts ...grpc.CallOption) (*SetPersonSettingsResponse, error) {
	out := new(SetPersonSettingsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.PersonService/SetPersonSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility
type PersonServiceServer interface {
	GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error)
	GetAllPerson(*GetAllPersonRequest, PersonService_GetAllPersonServer) error
	SuggestPerson(*SuggestPersonRequest, PersonService_SuggestPersonServer) error
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	GetAllOrganization(*GetAllOrganizationRequest, PersonService_GetAllOrganizationServer) error
	SuggestOrganization(*SuggestOrganizationRequest, PersonService_SuggestOrganizationServer) error
	SetPersonOrcidToken(context.Context, *SetPersonOrcidTokenRequest) (*SetPersonOrcidTokenResponse, error)
	SetPersonOrcid(context.Context, *SetPersonOrcidRequest) (*SetPersonOrcidResponse, error)
	SetPersonRole(context.Context, *SetPersonRoleRequest) (*SetPersonRoleResponse, error)
	SetPersonSettings(context.Context, *SetPersonSettingsRequest) (*SetPersonSettingsResponse, error)
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (UnimplementedPersonServiceServer) GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonServiceServer) GetAllPerson(*GetAllPersonRequest, PersonService_GetAllPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPerson not implemented")
}
func (UnimplementedPersonServiceServer) SuggestPerson(*SuggestPersonRequest, PersonService_SuggestPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method SuggestPerson not implemented")
}
func (UnimplementedPersonServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedPersonServiceServer) GetAllOrganization(*GetAllOrganizationRequest, PersonService_GetAllOrganizationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllOrganization not implemented")
}
func (UnimplementedPersonServiceServer) SuggestOrganization(*SuggestOrganizationRequest, PersonService_SuggestOrganizationServer) error {
	return status.Errorf(codes.Unimplemented, "method SuggestOrganization not implemented")
}
func (UnimplementedPersonServiceServer) SetPersonOrcidToken(context.Context, *SetPersonOrcidTokenRequest) (*SetPersonOrcidTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersonOrcidToken not implemented")
}
func (UnimplementedPersonServiceServer) SetPersonOrcid(context.Context, *SetPersonOrcidRequest) (*SetPersonOrcidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersonOrcid not implemented")
}
func (UnimplementedPersonServiceServer) SetPersonRole(context.Context, *SetPersonRoleRequest) (*SetPersonRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersonRole not implemented")
}
func (UnimplementedPersonServiceServer) SetPersonSettings(context.Context, *SetPersonSettingsRequest) (*SetPersonSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersonSettings not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PersonService/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetAllPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPersonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).GetAllPerson(m, &personServiceGetAllPersonServer{stream})
}

type PersonService_GetAllPersonServer interface {
	Send(*GetAllPersonResponse) error
	grpc.ServerStream
}

type personServiceGetAllPersonServer struct {
	grpc.ServerStream
}

func (x *personServiceGetAllPersonServer) Send(m *GetAllPersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_SuggestPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SuggestPersonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).SuggestPerson(m, &personServiceSuggestPersonServer{stream})
}

type PersonService_SuggestPersonServer interface {
	Send(*SuggestPersonResponse) error
	grpc.ServerStream
}

type personServiceSuggestPersonServer struct {
	grpc.ServerStream
}

func (x *personServiceSuggestPersonServer) Send(m *SuggestPersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PersonService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetAllOrganization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllOrganizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).GetAllOrganization(m, &personServiceGetAllOrganizationServer{stream})
}

type PersonService_GetAllOrganizationServer interface {
	Send(*GetAllOrganizationResponse) error
	grpc.ServerStream
}

type personServiceGetAllOrganizationServer struct {
	grpc.ServerStream
}

func (x *personServiceGetAllOrganizationServer) Send(m *GetAllOrganizationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_SuggestOrganization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SuggestOrganizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).SuggestOrganization(m, &personServiceSuggestOrganizationServer{stream})
}

type PersonService_SuggestOrganizationServer interface {
	Send(*SuggestOrganizationResponse) error
	grpc.ServerStream
}

type personServiceSuggestOrganizationServer struct {
	grpc.ServerStream
}

func (x *personServiceSuggestOrganizationServer) Send(m *SuggestOrganizationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_SetPersonOrcidToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersonOrcidTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).SetPersonOrcidToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PersonService/SetPersonOrcidToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).SetPersonOrcidToken(ctx, req.(*SetPersonOrcidTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_SetPersonOrcid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersonOrcidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).SetPersonOrcid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PersonService/SetPersonOrcid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).SetPersonOrcid(ctx, req.(*SetPersonOrcidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_SetPersonRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersonRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).SetPersonRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PersonService/SetPersonRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).SetPersonRole(ctx, req.(*SetPersonRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_SetPersonSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersonSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).SetPersonSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PersonService/SetPersonSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).SetPersonSettings(ctx, req.(*SetPersonSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _PersonService_GetPerson_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _PersonService_GetOrganization_Handler,
		},
		{
			MethodName: "SetPersonOrcidToken",
			Handler:    _PersonService_SetPersonOrcidToken_Handler,
		},
		{
			MethodName: "SetPersonOrcid",
			Handler:    _PersonService_SetPersonOrcid_Handler,
		},
		{
			MethodName: "SetPersonRole",
			Handler:    _PersonService_SetPersonRole_Handler,
		},
		{
			MethodName: "SetPersonSettings",
			Handler:    _PersonService_SetPersonSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllPerson",
			Handler:       _PersonService_GetAllPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SuggestPerson",
			Handler:       _PersonService_SuggestPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllOrganization",
			Handler:       _PersonService_GetAllOrganization_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SuggestOrganization",
			Handler:       _PersonService_SuggestOrganization_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "person.proto",
}
