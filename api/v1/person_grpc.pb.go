// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeopleClient is the client API for People service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeopleClient interface {
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error)
	GetAllPerson(ctx context.Context, in *GetAllPersonRequest, opts ...grpc.CallOption) (People_GetAllPersonClient, error)
	SuggestPerson(ctx context.Context, in *SuggestPersonRequest, opts ...grpc.CallOption) (People_SuggestPersonClient, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	GetAllOrganization(ctx context.Context, in *GetAllOrganizationRequest, opts ...grpc.CallOption) (People_GetAllOrganizationClient, error)
	SuggestOrganization(ctx context.Context, in *SuggestOrganizationRequest, opts ...grpc.CallOption) (People_SuggestOrganizationClient, error)
	SetPersonOrcidToken(ctx context.Context, in *SetPersonOrcidTokenRequest, opts ...grpc.CallOption) (*SetPersonOrcidTokenResponse, error)
}

type peopleClient struct {
	cc grpc.ClientConnInterface
}

func NewPeopleClient(cc grpc.ClientConnInterface) PeopleClient {
	return &peopleClient{cc}
}

func (c *peopleClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error) {
	out := new(GetPersonResponse)
	err := c.cc.Invoke(ctx, "/api.v1.People/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleClient) GetAllPerson(ctx context.Context, in *GetAllPersonRequest, opts ...grpc.CallOption) (People_GetAllPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &People_ServiceDesc.Streams[0], "/api.v1.People/GetAllPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &peopleGetAllPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type People_GetAllPersonClient interface {
	Recv() (*GetAllPersonResponse, error)
	grpc.ClientStream
}

type peopleGetAllPersonClient struct {
	grpc.ClientStream
}

func (x *peopleGetAllPersonClient) Recv() (*GetAllPersonResponse, error) {
	m := new(GetAllPersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peopleClient) SuggestPerson(ctx context.Context, in *SuggestPersonRequest, opts ...grpc.CallOption) (People_SuggestPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &People_ServiceDesc.Streams[1], "/api.v1.People/SuggestPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &peopleSuggestPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type People_SuggestPersonClient interface {
	Recv() (*SuggestPersonResponse, error)
	grpc.ClientStream
}

type peopleSuggestPersonClient struct {
	grpc.ClientStream
}

func (x *peopleSuggestPersonClient) Recv() (*SuggestPersonResponse, error) {
	m := new(SuggestPersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peopleClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, "/api.v1.People/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleClient) GetAllOrganization(ctx context.Context, in *GetAllOrganizationRequest, opts ...grpc.CallOption) (People_GetAllOrganizationClient, error) {
	stream, err := c.cc.NewStream(ctx, &People_ServiceDesc.Streams[2], "/api.v1.People/GetAllOrganization", opts...)
	if err != nil {
		return nil, err
	}
	x := &peopleGetAllOrganizationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type People_GetAllOrganizationClient interface {
	Recv() (*GetAllOrganizationResponse, error)
	grpc.ClientStream
}

type peopleGetAllOrganizationClient struct {
	grpc.ClientStream
}

func (x *peopleGetAllOrganizationClient) Recv() (*GetAllOrganizationResponse, error) {
	m := new(GetAllOrganizationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peopleClient) SuggestOrganization(ctx context.Context, in *SuggestOrganizationRequest, opts ...grpc.CallOption) (People_SuggestOrganizationClient, error) {
	stream, err := c.cc.NewStream(ctx, &People_ServiceDesc.Streams[3], "/api.v1.People/SuggestOrganization", opts...)
	if err != nil {
		return nil, err
	}
	x := &peopleSuggestOrganizationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type People_SuggestOrganizationClient interface {
	Recv() (*SuggestOrganizationResponse, error)
	grpc.ClientStream
}

type peopleSuggestOrganizationClient struct {
	grpc.ClientStream
}

func (x *peopleSuggestOrganizationClient) Recv() (*SuggestOrganizationResponse, error) {
	m := new(SuggestOrganizationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peopleClient) SetPersonOrcidToken(ctx context.Context, in *SetPersonOrcidTokenRequest, opts ...grpc.CallOption) (*SetPersonOrcidTokenResponse, error) {
	out := new(SetPersonOrcidTokenResponse)
	err := c.cc.Invoke(ctx, "/api.v1.People/SetPersonOrcidToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeopleServer is the server API for People service.
// All implementations must embed UnimplementedPeopleServer
// for forward compatibility
type PeopleServer interface {
	GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error)
	GetAllPerson(*GetAllPersonRequest, People_GetAllPersonServer) error
	SuggestPerson(*SuggestPersonRequest, People_SuggestPersonServer) error
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	GetAllOrganization(*GetAllOrganizationRequest, People_GetAllOrganizationServer) error
	SuggestOrganization(*SuggestOrganizationRequest, People_SuggestOrganizationServer) error
	SetPersonOrcidToken(context.Context, *SetPersonOrcidTokenRequest) (*SetPersonOrcidTokenResponse, error)
	mustEmbedUnimplementedPeopleServer()
}

// UnimplementedPeopleServer must be embedded to have forward compatible implementations.
type UnimplementedPeopleServer struct {
}

func (UnimplementedPeopleServer) GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPeopleServer) GetAllPerson(*GetAllPersonRequest, People_GetAllPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPerson not implemented")
}
func (UnimplementedPeopleServer) SuggestPerson(*SuggestPersonRequest, People_SuggestPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method SuggestPerson not implemented")
}
func (UnimplementedPeopleServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedPeopleServer) GetAllOrganization(*GetAllOrganizationRequest, People_GetAllOrganizationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllOrganization not implemented")
}
func (UnimplementedPeopleServer) SuggestOrganization(*SuggestOrganizationRequest, People_SuggestOrganizationServer) error {
	return status.Errorf(codes.Unimplemented, "method SuggestOrganization not implemented")
}
func (UnimplementedPeopleServer) SetPersonOrcidToken(context.Context, *SetPersonOrcidTokenRequest) (*SetPersonOrcidTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersonOrcidToken not implemented")
}
func (UnimplementedPeopleServer) mustEmbedUnimplementedPeopleServer() {}

// UnsafePeopleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeopleServer will
// result in compilation errors.
type UnsafePeopleServer interface {
	mustEmbedUnimplementedPeopleServer()
}

func RegisterPeopleServer(s grpc.ServiceRegistrar, srv PeopleServer) {
	s.RegisterService(&People_ServiceDesc, srv)
}

func _People_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.People/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _People_GetAllPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPersonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeopleServer).GetAllPerson(m, &peopleGetAllPersonServer{stream})
}

type People_GetAllPersonServer interface {
	Send(*GetAllPersonResponse) error
	grpc.ServerStream
}

type peopleGetAllPersonServer struct {
	grpc.ServerStream
}

func (x *peopleGetAllPersonServer) Send(m *GetAllPersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _People_SuggestPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SuggestPersonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeopleServer).SuggestPerson(m, &peopleSuggestPersonServer{stream})
}

type People_SuggestPersonServer interface {
	Send(*SuggestPersonResponse) error
	grpc.ServerStream
}

type peopleSuggestPersonServer struct {
	grpc.ServerStream
}

func (x *peopleSuggestPersonServer) Send(m *SuggestPersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _People_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.People/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _People_GetAllOrganization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllOrganizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeopleServer).GetAllOrganization(m, &peopleGetAllOrganizationServer{stream})
}

type People_GetAllOrganizationServer interface {
	Send(*GetAllOrganizationResponse) error
	grpc.ServerStream
}

type peopleGetAllOrganizationServer struct {
	grpc.ServerStream
}

func (x *peopleGetAllOrganizationServer) Send(m *GetAllOrganizationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _People_SuggestOrganization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SuggestOrganizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeopleServer).SuggestOrganization(m, &peopleSuggestOrganizationServer{stream})
}

type People_SuggestOrganizationServer interface {
	Send(*SuggestOrganizationResponse) error
	grpc.ServerStream
}

type peopleSuggestOrganizationServer struct {
	grpc.ServerStream
}

func (x *peopleSuggestOrganizationServer) Send(m *SuggestOrganizationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _People_SetPersonOrcidToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersonOrcidTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).SetPersonOrcidToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.People/SetPersonOrcidToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).SetPersonOrcidToken(ctx, req.(*SetPersonOrcidTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// People_ServiceDesc is the grpc.ServiceDesc for People service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var People_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.People",
	HandlerType: (*PeopleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _People_GetPerson_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _People_GetOrganization_Handler,
		},
		{
			MethodName: "SetPersonOrcidToken",
			Handler:    _People_SetPersonOrcidToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllPerson",
			Handler:       _People_GetAllPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SuggestPerson",
			Handler:       _People_SuggestPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllOrganization",
			Handler:       _People_GetAllOrganization_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SuggestOrganization",
			Handler:       _People_SuggestOrganization_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "person.proto",
}
