//
//make sure you have the protoc compiler
//and install the go plugins with
//go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
//go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
//then generate with:
//
//protoc -I./api/v1 --go_out=api/v1/. --go_opt=paths=source_relative --go-grpc_out=api/v1/. --go-grpc_opt=paths=source_relative api/v1/person.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/person.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ugent-library/person-service/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PersonServiceName is the fully-qualified name of the PersonService service.
	PersonServiceName = "api.v1.PersonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PersonServiceGetPersonProcedure is the fully-qualified name of the PersonService's GetPerson RPC.
	PersonServiceGetPersonProcedure = "/api.v1.PersonService/GetPerson"
	// PersonServiceGetAllPersonProcedure is the fully-qualified name of the PersonService's
	// GetAllPerson RPC.
	PersonServiceGetAllPersonProcedure = "/api.v1.PersonService/GetAllPerson"
	// PersonServiceSuggestPersonProcedure is the fully-qualified name of the PersonService's
	// SuggestPerson RPC.
	PersonServiceSuggestPersonProcedure = "/api.v1.PersonService/SuggestPerson"
	// PersonServiceGetOrganizationProcedure is the fully-qualified name of the PersonService's
	// GetOrganization RPC.
	PersonServiceGetOrganizationProcedure = "/api.v1.PersonService/GetOrganization"
	// PersonServiceGetAllOrganizationProcedure is the fully-qualified name of the PersonService's
	// GetAllOrganization RPC.
	PersonServiceGetAllOrganizationProcedure = "/api.v1.PersonService/GetAllOrganization"
	// PersonServiceSuggestOrganizationProcedure is the fully-qualified name of the PersonService's
	// SuggestOrganization RPC.
	PersonServiceSuggestOrganizationProcedure = "/api.v1.PersonService/SuggestOrganization"
	// PersonServiceSetPersonOrcidTokenProcedure is the fully-qualified name of the PersonService's
	// SetPersonOrcidToken RPC.
	PersonServiceSetPersonOrcidTokenProcedure = "/api.v1.PersonService/SetPersonOrcidToken"
	// PersonServiceSetPersonOrcidProcedure is the fully-qualified name of the PersonService's
	// SetPersonOrcid RPC.
	PersonServiceSetPersonOrcidProcedure = "/api.v1.PersonService/SetPersonOrcid"
	// PersonServiceSetPersonRoleProcedure is the fully-qualified name of the PersonService's
	// SetPersonRole RPC.
	PersonServiceSetPersonRoleProcedure = "/api.v1.PersonService/SetPersonRole"
	// PersonServiceSetPersonSettingsProcedure is the fully-qualified name of the PersonService's
	// SetPersonSettings RPC.
	PersonServiceSetPersonSettingsProcedure = "/api.v1.PersonService/SetPersonSettings"
)

// PersonServiceClient is a client for the api.v1.PersonService service.
type PersonServiceClient interface {
	GetPerson(context.Context, *connect_go.Request[v1.GetPersonRequest]) (*connect_go.Response[v1.GetPersonResponse], error)
	GetAllPerson(context.Context, *connect_go.Request[v1.GetAllPersonRequest]) (*connect_go.ServerStreamForClient[v1.GetAllPersonResponse], error)
	SuggestPerson(context.Context, *connect_go.Request[v1.SuggestPersonRequest]) (*connect_go.ServerStreamForClient[v1.SuggestPersonResponse], error)
	GetOrganization(context.Context, *connect_go.Request[v1.GetOrganizationRequest]) (*connect_go.Response[v1.GetOrganizationResponse], error)
	GetAllOrganization(context.Context, *connect_go.Request[v1.GetAllOrganizationRequest]) (*connect_go.ServerStreamForClient[v1.GetAllOrganizationResponse], error)
	SuggestOrganization(context.Context, *connect_go.Request[v1.SuggestOrganizationRequest]) (*connect_go.ServerStreamForClient[v1.SuggestOrganizationResponse], error)
	SetPersonOrcidToken(context.Context, *connect_go.Request[v1.SetPersonOrcidTokenRequest]) (*connect_go.Response[v1.SetPersonOrcidTokenResponse], error)
	SetPersonOrcid(context.Context, *connect_go.Request[v1.SetPersonOrcidRequest]) (*connect_go.Response[v1.SetPersonOrcidResponse], error)
	SetPersonRole(context.Context, *connect_go.Request[v1.SetPersonRoleRequest]) (*connect_go.Response[v1.SetPersonRoleResponse], error)
	SetPersonSettings(context.Context, *connect_go.Request[v1.SetPersonSettingsRequest]) (*connect_go.Response[v1.SetPersonSettingsResponse], error)
}

// NewPersonServiceClient constructs a client for the api.v1.PersonService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPersonServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PersonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &personServiceClient{
		getPerson: connect_go.NewClient[v1.GetPersonRequest, v1.GetPersonResponse](
			httpClient,
			baseURL+PersonServiceGetPersonProcedure,
			opts...,
		),
		getAllPerson: connect_go.NewClient[v1.GetAllPersonRequest, v1.GetAllPersonResponse](
			httpClient,
			baseURL+PersonServiceGetAllPersonProcedure,
			opts...,
		),
		suggestPerson: connect_go.NewClient[v1.SuggestPersonRequest, v1.SuggestPersonResponse](
			httpClient,
			baseURL+PersonServiceSuggestPersonProcedure,
			opts...,
		),
		getOrganization: connect_go.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+PersonServiceGetOrganizationProcedure,
			opts...,
		),
		getAllOrganization: connect_go.NewClient[v1.GetAllOrganizationRequest, v1.GetAllOrganizationResponse](
			httpClient,
			baseURL+PersonServiceGetAllOrganizationProcedure,
			opts...,
		),
		suggestOrganization: connect_go.NewClient[v1.SuggestOrganizationRequest, v1.SuggestOrganizationResponse](
			httpClient,
			baseURL+PersonServiceSuggestOrganizationProcedure,
			opts...,
		),
		setPersonOrcidToken: connect_go.NewClient[v1.SetPersonOrcidTokenRequest, v1.SetPersonOrcidTokenResponse](
			httpClient,
			baseURL+PersonServiceSetPersonOrcidTokenProcedure,
			opts...,
		),
		setPersonOrcid: connect_go.NewClient[v1.SetPersonOrcidRequest, v1.SetPersonOrcidResponse](
			httpClient,
			baseURL+PersonServiceSetPersonOrcidProcedure,
			opts...,
		),
		setPersonRole: connect_go.NewClient[v1.SetPersonRoleRequest, v1.SetPersonRoleResponse](
			httpClient,
			baseURL+PersonServiceSetPersonRoleProcedure,
			opts...,
		),
		setPersonSettings: connect_go.NewClient[v1.SetPersonSettingsRequest, v1.SetPersonSettingsResponse](
			httpClient,
			baseURL+PersonServiceSetPersonSettingsProcedure,
			opts...,
		),
	}
}

// personServiceClient implements PersonServiceClient.
type personServiceClient struct {
	getPerson           *connect_go.Client[v1.GetPersonRequest, v1.GetPersonResponse]
	getAllPerson        *connect_go.Client[v1.GetAllPersonRequest, v1.GetAllPersonResponse]
	suggestPerson       *connect_go.Client[v1.SuggestPersonRequest, v1.SuggestPersonResponse]
	getOrganization     *connect_go.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	getAllOrganization  *connect_go.Client[v1.GetAllOrganizationRequest, v1.GetAllOrganizationResponse]
	suggestOrganization *connect_go.Client[v1.SuggestOrganizationRequest, v1.SuggestOrganizationResponse]
	setPersonOrcidToken *connect_go.Client[v1.SetPersonOrcidTokenRequest, v1.SetPersonOrcidTokenResponse]
	setPersonOrcid      *connect_go.Client[v1.SetPersonOrcidRequest, v1.SetPersonOrcidResponse]
	setPersonRole       *connect_go.Client[v1.SetPersonRoleRequest, v1.SetPersonRoleResponse]
	setPersonSettings   *connect_go.Client[v1.SetPersonSettingsRequest, v1.SetPersonSettingsResponse]
}

// GetPerson calls api.v1.PersonService.GetPerson.
func (c *personServiceClient) GetPerson(ctx context.Context, req *connect_go.Request[v1.GetPersonRequest]) (*connect_go.Response[v1.GetPersonResponse], error) {
	return c.getPerson.CallUnary(ctx, req)
}

// GetAllPerson calls api.v1.PersonService.GetAllPerson.
func (c *personServiceClient) GetAllPerson(ctx context.Context, req *connect_go.Request[v1.GetAllPersonRequest]) (*connect_go.ServerStreamForClient[v1.GetAllPersonResponse], error) {
	return c.getAllPerson.CallServerStream(ctx, req)
}

// SuggestPerson calls api.v1.PersonService.SuggestPerson.
func (c *personServiceClient) SuggestPerson(ctx context.Context, req *connect_go.Request[v1.SuggestPersonRequest]) (*connect_go.ServerStreamForClient[v1.SuggestPersonResponse], error) {
	return c.suggestPerson.CallServerStream(ctx, req)
}

// GetOrganization calls api.v1.PersonService.GetOrganization.
func (c *personServiceClient) GetOrganization(ctx context.Context, req *connect_go.Request[v1.GetOrganizationRequest]) (*connect_go.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// GetAllOrganization calls api.v1.PersonService.GetAllOrganization.
func (c *personServiceClient) GetAllOrganization(ctx context.Context, req *connect_go.Request[v1.GetAllOrganizationRequest]) (*connect_go.ServerStreamForClient[v1.GetAllOrganizationResponse], error) {
	return c.getAllOrganization.CallServerStream(ctx, req)
}

// SuggestOrganization calls api.v1.PersonService.SuggestOrganization.
func (c *personServiceClient) SuggestOrganization(ctx context.Context, req *connect_go.Request[v1.SuggestOrganizationRequest]) (*connect_go.ServerStreamForClient[v1.SuggestOrganizationResponse], error) {
	return c.suggestOrganization.CallServerStream(ctx, req)
}

// SetPersonOrcidToken calls api.v1.PersonService.SetPersonOrcidToken.
func (c *personServiceClient) SetPersonOrcidToken(ctx context.Context, req *connect_go.Request[v1.SetPersonOrcidTokenRequest]) (*connect_go.Response[v1.SetPersonOrcidTokenResponse], error) {
	return c.setPersonOrcidToken.CallUnary(ctx, req)
}

// SetPersonOrcid calls api.v1.PersonService.SetPersonOrcid.
func (c *personServiceClient) SetPersonOrcid(ctx context.Context, req *connect_go.Request[v1.SetPersonOrcidRequest]) (*connect_go.Response[v1.SetPersonOrcidResponse], error) {
	return c.setPersonOrcid.CallUnary(ctx, req)
}

// SetPersonRole calls api.v1.PersonService.SetPersonRole.
func (c *personServiceClient) SetPersonRole(ctx context.Context, req *connect_go.Request[v1.SetPersonRoleRequest]) (*connect_go.Response[v1.SetPersonRoleResponse], error) {
	return c.setPersonRole.CallUnary(ctx, req)
}

// SetPersonSettings calls api.v1.PersonService.SetPersonSettings.
func (c *personServiceClient) SetPersonSettings(ctx context.Context, req *connect_go.Request[v1.SetPersonSettingsRequest]) (*connect_go.Response[v1.SetPersonSettingsResponse], error) {
	return c.setPersonSettings.CallUnary(ctx, req)
}

// PersonServiceHandler is an implementation of the api.v1.PersonService service.
type PersonServiceHandler interface {
	GetPerson(context.Context, *connect_go.Request[v1.GetPersonRequest]) (*connect_go.Response[v1.GetPersonResponse], error)
	GetAllPerson(context.Context, *connect_go.Request[v1.GetAllPersonRequest], *connect_go.ServerStream[v1.GetAllPersonResponse]) error
	SuggestPerson(context.Context, *connect_go.Request[v1.SuggestPersonRequest], *connect_go.ServerStream[v1.SuggestPersonResponse]) error
	GetOrganization(context.Context, *connect_go.Request[v1.GetOrganizationRequest]) (*connect_go.Response[v1.GetOrganizationResponse], error)
	GetAllOrganization(context.Context, *connect_go.Request[v1.GetAllOrganizationRequest], *connect_go.ServerStream[v1.GetAllOrganizationResponse]) error
	SuggestOrganization(context.Context, *connect_go.Request[v1.SuggestOrganizationRequest], *connect_go.ServerStream[v1.SuggestOrganizationResponse]) error
	SetPersonOrcidToken(context.Context, *connect_go.Request[v1.SetPersonOrcidTokenRequest]) (*connect_go.Response[v1.SetPersonOrcidTokenResponse], error)
	SetPersonOrcid(context.Context, *connect_go.Request[v1.SetPersonOrcidRequest]) (*connect_go.Response[v1.SetPersonOrcidResponse], error)
	SetPersonRole(context.Context, *connect_go.Request[v1.SetPersonRoleRequest]) (*connect_go.Response[v1.SetPersonRoleResponse], error)
	SetPersonSettings(context.Context, *connect_go.Request[v1.SetPersonSettingsRequest]) (*connect_go.Response[v1.SetPersonSettingsResponse], error)
}

// NewPersonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPersonServiceHandler(svc PersonServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PersonServiceGetPersonProcedure, connect_go.NewUnaryHandler(
		PersonServiceGetPersonProcedure,
		svc.GetPerson,
		opts...,
	))
	mux.Handle(PersonServiceGetAllPersonProcedure, connect_go.NewServerStreamHandler(
		PersonServiceGetAllPersonProcedure,
		svc.GetAllPerson,
		opts...,
	))
	mux.Handle(PersonServiceSuggestPersonProcedure, connect_go.NewServerStreamHandler(
		PersonServiceSuggestPersonProcedure,
		svc.SuggestPerson,
		opts...,
	))
	mux.Handle(PersonServiceGetOrganizationProcedure, connect_go.NewUnaryHandler(
		PersonServiceGetOrganizationProcedure,
		svc.GetOrganization,
		opts...,
	))
	mux.Handle(PersonServiceGetAllOrganizationProcedure, connect_go.NewServerStreamHandler(
		PersonServiceGetAllOrganizationProcedure,
		svc.GetAllOrganization,
		opts...,
	))
	mux.Handle(PersonServiceSuggestOrganizationProcedure, connect_go.NewServerStreamHandler(
		PersonServiceSuggestOrganizationProcedure,
		svc.SuggestOrganization,
		opts...,
	))
	mux.Handle(PersonServiceSetPersonOrcidTokenProcedure, connect_go.NewUnaryHandler(
		PersonServiceSetPersonOrcidTokenProcedure,
		svc.SetPersonOrcidToken,
		opts...,
	))
	mux.Handle(PersonServiceSetPersonOrcidProcedure, connect_go.NewUnaryHandler(
		PersonServiceSetPersonOrcidProcedure,
		svc.SetPersonOrcid,
		opts...,
	))
	mux.Handle(PersonServiceSetPersonRoleProcedure, connect_go.NewUnaryHandler(
		PersonServiceSetPersonRoleProcedure,
		svc.SetPersonRole,
		opts...,
	))
	mux.Handle(PersonServiceSetPersonSettingsProcedure, connect_go.NewUnaryHandler(
		PersonServiceSetPersonSettingsProcedure,
		svc.SetPersonSettings,
		opts...,
	))
	return "/api.v1.PersonService/", mux
}

// UnimplementedPersonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPersonServiceHandler struct{}

func (UnimplementedPersonServiceHandler) GetPerson(context.Context, *connect_go.Request[v1.GetPersonRequest]) (*connect_go.Response[v1.GetPersonResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.GetPerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetAllPerson(context.Context, *connect_go.Request[v1.GetAllPersonRequest], *connect_go.ServerStream[v1.GetAllPersonResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.GetAllPerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) SuggestPerson(context.Context, *connect_go.Request[v1.SuggestPersonRequest], *connect_go.ServerStream[v1.SuggestPersonResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.SuggestPerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetOrganization(context.Context, *connect_go.Request[v1.GetOrganizationRequest]) (*connect_go.Response[v1.GetOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.GetOrganization is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetAllOrganization(context.Context, *connect_go.Request[v1.GetAllOrganizationRequest], *connect_go.ServerStream[v1.GetAllOrganizationResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.GetAllOrganization is not implemented"))
}

func (UnimplementedPersonServiceHandler) SuggestOrganization(context.Context, *connect_go.Request[v1.SuggestOrganizationRequest], *connect_go.ServerStream[v1.SuggestOrganizationResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.SuggestOrganization is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetPersonOrcidToken(context.Context, *connect_go.Request[v1.SetPersonOrcidTokenRequest]) (*connect_go.Response[v1.SetPersonOrcidTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.SetPersonOrcidToken is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetPersonOrcid(context.Context, *connect_go.Request[v1.SetPersonOrcidRequest]) (*connect_go.Response[v1.SetPersonOrcidResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.SetPersonOrcid is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetPersonRole(context.Context, *connect_go.Request[v1.SetPersonRoleRequest]) (*connect_go.Response[v1.SetPersonRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.SetPersonRole is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetPersonSettings(context.Context, *connect_go.Request[v1.SetPersonSettingsRequest]) (*connect_go.Response[v1.SetPersonSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PersonService.SetPersonSettings is not implemented"))
}
