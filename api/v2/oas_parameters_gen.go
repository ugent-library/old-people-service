// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetOrganizationParams is parameters of getOrganization operation.
type GetOrganizationParams struct {
	// Organization identifier.
	OrganizationId string
}

func unpackGetOrganizationParams(packed middleware.Parameters) (params GetOrganizationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationId",
			In:   "path",
		}
		params.OrganizationId = packed[key].(string)
	}
	return params
}

func decodeGetOrganizationParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOrganizationParams, _ error) {
	// Decode path: organizationId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOrganizationsParams is parameters of getOrganizations operation.
type GetOrganizationsParams struct {
	// Offset for paging.
	Cursor OptString
}

func unpackGetOrganizationsParams(packed middleware.Parameters) (params GetOrganizationsParams) {
	{
		key := middleware.ParameterKey{
			Name: "cursor",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Cursor = v.(OptString)
		}
	}
	return params
}

func decodeGetOrganizationsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetOrganizationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: cursor.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cursor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCursorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCursorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Cursor.SetTo(paramsDotCursorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cursor",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPeopleParams is parameters of getPeople operation.
type GetPeopleParams struct {
	// Paging cursor.
	Cursor OptString
}

func unpackGetPeopleParams(packed middleware.Parameters) (params GetPeopleParams) {
	{
		key := middleware.ParameterKey{
			Name: "cursor",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Cursor = v.(OptString)
		}
	}
	return params
}

func decodeGetPeopleParams(args [0]string, argsEscaped bool, r *http.Request) (params GetPeopleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: cursor.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cursor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCursorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCursorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Cursor.SetTo(paramsDotCursorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cursor",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPersonParams is parameters of getPerson operation.
type GetPersonParams struct {
	// Person identifier.
	PersonId string
}

func unpackGetPersonParams(packed middleware.Parameters) (params GetPersonParams) {
	{
		key := middleware.ParameterKey{
			Name: "personId",
			In:   "path",
		}
		params.PersonId = packed[key].(string)
	}
	return params
}

func decodeGetPersonParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPersonParams, _ error) {
	// Decode path: personId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "personId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PersonId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "personId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetPersonOrcidParams is parameters of setPersonOrcid operation.
type SetPersonOrcidParams struct {
	// Person identifier.
	PersonId string
}

func unpackSetPersonOrcidParams(packed middleware.Parameters) (params SetPersonOrcidParams) {
	{
		key := middleware.ParameterKey{
			Name: "personId",
			In:   "path",
		}
		params.PersonId = packed[key].(string)
	}
	return params
}

func decodeSetPersonOrcidParams(args [1]string, argsEscaped bool, r *http.Request) (params SetPersonOrcidParams, _ error) {
	// Decode path: personId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "personId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PersonId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "personId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetPersonOrcidTokenParams is parameters of setPersonOrcidToken operation.
type SetPersonOrcidTokenParams struct {
	// Person identifier.
	PersonId string
}

func unpackSetPersonOrcidTokenParams(packed middleware.Parameters) (params SetPersonOrcidTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "personId",
			In:   "path",
		}
		params.PersonId = packed[key].(string)
	}
	return params
}

func decodeSetPersonOrcidTokenParams(args [1]string, argsEscaped bool, r *http.Request) (params SetPersonOrcidTokenParams, _ error) {
	// Decode path: personId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "personId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PersonId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "personId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetPersonRoleParams is parameters of setPersonRole operation.
type SetPersonRoleParams struct {
	// Person identifier.
	PersonId string
}

func unpackSetPersonRoleParams(packed middleware.Parameters) (params SetPersonRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "personId",
			In:   "path",
		}
		params.PersonId = packed[key].(string)
	}
	return params
}

func decodeSetPersonRoleParams(args [1]string, argsEscaped bool, r *http.Request) (params SetPersonRoleParams, _ error) {
	// Decode path: personId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "personId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PersonId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "personId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetPersonSettingsParams is parameters of setPersonSettings operation.
type SetPersonSettingsParams struct {
	// Person identifier.
	PersonId string
}

func unpackSetPersonSettingsParams(packed middleware.Parameters) (params SetPersonSettingsParams) {
	{
		key := middleware.ParameterKey{
			Name: "personId",
			In:   "path",
		}
		params.PersonId = packed[key].(string)
	}
	return params
}

func decodeSetPersonSettingsParams(args [1]string, argsEscaped bool, r *http.Request) (params SetPersonSettingsParams, _ error) {
	// Decode path: personId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "personId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PersonId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "personId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SuggestOrganizationsParams is parameters of suggestOrganizations operation.
type SuggestOrganizationsParams struct {
	// Prefix to match organization records on.
	Query string
}

func unpackSuggestOrganizationsParams(packed middleware.Parameters) (params SuggestOrganizationsParams) {
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		params.Query = packed[key].(string)
	}
	return params
}

func decodeSuggestOrganizationsParams(args [0]string, argsEscaped bool, r *http.Request) (params SuggestOrganizationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Query = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Query)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SuggestPeopleParams is parameters of suggestPeople operation.
type SuggestPeopleParams struct {
	// Prefix to match person records on.
	Query string
}

func unpackSuggestPeopleParams(packed middleware.Parameters) (params SuggestPeopleParams) {
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		params.Query = packed[key].(string)
	}
	return params
}

func decodeSuggestPeopleParams(args [0]string, argsEscaped bool, r *http.Request) (params SuggestPeopleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Query = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Query)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
