// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/person-service/ent/organization"
	"github.com/ugent-library/person-service/ent/organizationperson"
	"github.com/ugent-library/person-service/ent/person"
	"github.com/ugent-library/person-service/ent/predicate"
	"github.com/ugent-library/person-service/ent/schema"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrganization       = "Organization"
	TypeOrganizationPerson = "OrganizationPerson"
	TypePerson             = "Person"
)

// OrganizationMutation represents an operation that mutates the Organization nodes in the graph.
type OrganizationMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	date_created               *time.Time
	date_updated               *time.Time
	public_id                  *string
	_type                      *string
	name_dut                   *string
	name_eng                   *string
	other_id                   *[]schema.IdRef
	appendother_id             []schema.IdRef
	other_parent_id            *string
	clearedFields              map[string]struct{}
	people                     map[int]struct{}
	removedpeople              map[int]struct{}
	clearedpeople              bool
	parent                     *int
	clearedparent              bool
	children                   map[int]struct{}
	removedchildren            map[int]struct{}
	clearedchildren            bool
	organization_person        map[int]struct{}
	removedorganization_person map[int]struct{}
	clearedorganization_person bool
	done                       bool
	oldValue                   func(context.Context) (*Organization, error)
	predicates                 []predicate.Organization
}

var _ ent.Mutation = (*OrganizationMutation)(nil)

// organizationOption allows management of the mutation configuration using functional options.
type organizationOption func(*OrganizationMutation)

// newOrganizationMutation creates new mutation for the Organization entity.
func newOrganizationMutation(c config, op Op, opts ...organizationOption) *OrganizationMutation {
	m := &OrganizationMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganization,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationID sets the ID field of the mutation.
func withOrganizationID(id int) organizationOption {
	return func(m *OrganizationMutation) {
		var (
			err   error
			once  sync.Once
			value *Organization
		)
		m.oldValue = func(ctx context.Context) (*Organization, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Organization.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganization sets the old Organization of the mutation.
func withOrganization(node *Organization) organizationOption {
	return func(m *OrganizationMutation) {
		m.oldValue = func(context.Context) (*Organization, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Organization.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDateCreated sets the "date_created" field.
func (m *OrganizationMutation) SetDateCreated(t time.Time) {
	m.date_created = &t
}

// DateCreated returns the value of the "date_created" field in the mutation.
func (m *OrganizationMutation) DateCreated() (r time.Time, exists bool) {
	v := m.date_created
	if v == nil {
		return
	}
	return *v, true
}

// OldDateCreated returns the old "date_created" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDateCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateCreated: %w", err)
	}
	return oldValue.DateCreated, nil
}

// ResetDateCreated resets all changes to the "date_created" field.
func (m *OrganizationMutation) ResetDateCreated() {
	m.date_created = nil
}

// SetDateUpdated sets the "date_updated" field.
func (m *OrganizationMutation) SetDateUpdated(t time.Time) {
	m.date_updated = &t
}

// DateUpdated returns the value of the "date_updated" field in the mutation.
func (m *OrganizationMutation) DateUpdated() (r time.Time, exists bool) {
	v := m.date_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldDateUpdated returns the old "date_updated" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDateUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateUpdated: %w", err)
	}
	return oldValue.DateUpdated, nil
}

// ResetDateUpdated resets all changes to the "date_updated" field.
func (m *OrganizationMutation) ResetDateUpdated() {
	m.date_updated = nil
}

// SetPublicID sets the "public_id" field.
func (m *OrganizationMutation) SetPublicID(s string) {
	m.public_id = &s
}

// PublicID returns the value of the "public_id" field in the mutation.
func (m *OrganizationMutation) PublicID() (r string, exists bool) {
	v := m.public_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicID returns the old "public_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldPublicID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicID: %w", err)
	}
	return oldValue.PublicID, nil
}

// ResetPublicID resets all changes to the "public_id" field.
func (m *OrganizationMutation) ResetPublicID() {
	m.public_id = nil
}

// SetType sets the "type" field.
func (m *OrganizationMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *OrganizationMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *OrganizationMutation) ResetType() {
	m._type = nil
}

// SetNameDut sets the "name_dut" field.
func (m *OrganizationMutation) SetNameDut(s string) {
	m.name_dut = &s
}

// NameDut returns the value of the "name_dut" field in the mutation.
func (m *OrganizationMutation) NameDut() (r string, exists bool) {
	v := m.name_dut
	if v == nil {
		return
	}
	return *v, true
}

// OldNameDut returns the old "name_dut" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldNameDut(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameDut is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameDut requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameDut: %w", err)
	}
	return oldValue.NameDut, nil
}

// ClearNameDut clears the value of the "name_dut" field.
func (m *OrganizationMutation) ClearNameDut() {
	m.name_dut = nil
	m.clearedFields[organization.FieldNameDut] = struct{}{}
}

// NameDutCleared returns if the "name_dut" field was cleared in this mutation.
func (m *OrganizationMutation) NameDutCleared() bool {
	_, ok := m.clearedFields[organization.FieldNameDut]
	return ok
}

// ResetNameDut resets all changes to the "name_dut" field.
func (m *OrganizationMutation) ResetNameDut() {
	m.name_dut = nil
	delete(m.clearedFields, organization.FieldNameDut)
}

// SetNameEng sets the "name_eng" field.
func (m *OrganizationMutation) SetNameEng(s string) {
	m.name_eng = &s
}

// NameEng returns the value of the "name_eng" field in the mutation.
func (m *OrganizationMutation) NameEng() (r string, exists bool) {
	v := m.name_eng
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEng returns the old "name_eng" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldNameEng(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEng: %w", err)
	}
	return oldValue.NameEng, nil
}

// ClearNameEng clears the value of the "name_eng" field.
func (m *OrganizationMutation) ClearNameEng() {
	m.name_eng = nil
	m.clearedFields[organization.FieldNameEng] = struct{}{}
}

// NameEngCleared returns if the "name_eng" field was cleared in this mutation.
func (m *OrganizationMutation) NameEngCleared() bool {
	_, ok := m.clearedFields[organization.FieldNameEng]
	return ok
}

// ResetNameEng resets all changes to the "name_eng" field.
func (m *OrganizationMutation) ResetNameEng() {
	m.name_eng = nil
	delete(m.clearedFields, organization.FieldNameEng)
}

// SetOtherID sets the "other_id" field.
func (m *OrganizationMutation) SetOtherID(sr []schema.IdRef) {
	m.other_id = &sr
	m.appendother_id = nil
}

// OtherID returns the value of the "other_id" field in the mutation.
func (m *OrganizationMutation) OtherID() (r []schema.IdRef, exists bool) {
	v := m.other_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherID returns the old "other_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldOtherID(ctx context.Context) (v []schema.IdRef, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherID: %w", err)
	}
	return oldValue.OtherID, nil
}

// AppendOtherID adds sr to the "other_id" field.
func (m *OrganizationMutation) AppendOtherID(sr []schema.IdRef) {
	m.appendother_id = append(m.appendother_id, sr...)
}

// AppendedOtherID returns the list of values that were appended to the "other_id" field in this mutation.
func (m *OrganizationMutation) AppendedOtherID() ([]schema.IdRef, bool) {
	if len(m.appendother_id) == 0 {
		return nil, false
	}
	return m.appendother_id, true
}

// ClearOtherID clears the value of the "other_id" field.
func (m *OrganizationMutation) ClearOtherID() {
	m.other_id = nil
	m.appendother_id = nil
	m.clearedFields[organization.FieldOtherID] = struct{}{}
}

// OtherIDCleared returns if the "other_id" field was cleared in this mutation.
func (m *OrganizationMutation) OtherIDCleared() bool {
	_, ok := m.clearedFields[organization.FieldOtherID]
	return ok
}

// ResetOtherID resets all changes to the "other_id" field.
func (m *OrganizationMutation) ResetOtherID() {
	m.other_id = nil
	m.appendother_id = nil
	delete(m.clearedFields, organization.FieldOtherID)
}

// SetOtherParentID sets the "other_parent_id" field.
func (m *OrganizationMutation) SetOtherParentID(s string) {
	m.other_parent_id = &s
}

// OtherParentID returns the value of the "other_parent_id" field in the mutation.
func (m *OrganizationMutation) OtherParentID() (r string, exists bool) {
	v := m.other_parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherParentID returns the old "other_parent_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldOtherParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherParentID: %w", err)
	}
	return oldValue.OtherParentID, nil
}

// ClearOtherParentID clears the value of the "other_parent_id" field.
func (m *OrganizationMutation) ClearOtherParentID() {
	m.other_parent_id = nil
	m.clearedFields[organization.FieldOtherParentID] = struct{}{}
}

// OtherParentIDCleared returns if the "other_parent_id" field was cleared in this mutation.
func (m *OrganizationMutation) OtherParentIDCleared() bool {
	_, ok := m.clearedFields[organization.FieldOtherParentID]
	return ok
}

// ResetOtherParentID resets all changes to the "other_parent_id" field.
func (m *OrganizationMutation) ResetOtherParentID() {
	m.other_parent_id = nil
	delete(m.clearedFields, organization.FieldOtherParentID)
}

// SetParentID sets the "parent_id" field.
func (m *OrganizationMutation) SetParentID(i int) {
	m.parent = &i
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *OrganizationMutation) ParentID() (r int, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldParentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *OrganizationMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[organization.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *OrganizationMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[organization.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *OrganizationMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, organization.FieldParentID)
}

// AddPersonIDs adds the "people" edge to the Person entity by ids.
func (m *OrganizationMutation) AddPersonIDs(ids ...int) {
	if m.people == nil {
		m.people = make(map[int]struct{})
	}
	for i := range ids {
		m.people[ids[i]] = struct{}{}
	}
}

// ClearPeople clears the "people" edge to the Person entity.
func (m *OrganizationMutation) ClearPeople() {
	m.clearedpeople = true
}

// PeopleCleared reports if the "people" edge to the Person entity was cleared.
func (m *OrganizationMutation) PeopleCleared() bool {
	return m.clearedpeople
}

// RemovePersonIDs removes the "people" edge to the Person entity by IDs.
func (m *OrganizationMutation) RemovePersonIDs(ids ...int) {
	if m.removedpeople == nil {
		m.removedpeople = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.people, ids[i])
		m.removedpeople[ids[i]] = struct{}{}
	}
}

// RemovedPeople returns the removed IDs of the "people" edge to the Person entity.
func (m *OrganizationMutation) RemovedPeopleIDs() (ids []int) {
	for id := range m.removedpeople {
		ids = append(ids, id)
	}
	return
}

// PeopleIDs returns the "people" edge IDs in the mutation.
func (m *OrganizationMutation) PeopleIDs() (ids []int) {
	for id := range m.people {
		ids = append(ids, id)
	}
	return
}

// ResetPeople resets all changes to the "people" edge.
func (m *OrganizationMutation) ResetPeople() {
	m.people = nil
	m.clearedpeople = false
	m.removedpeople = nil
}

// ClearParent clears the "parent" edge to the Organization entity.
func (m *OrganizationMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Organization entity was cleared.
func (m *OrganizationMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *OrganizationMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *OrganizationMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Organization entity by ids.
func (m *OrganizationMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Organization entity.
func (m *OrganizationMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Organization entity was cleared.
func (m *OrganizationMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Organization entity by IDs.
func (m *OrganizationMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Organization entity.
func (m *OrganizationMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OrganizationMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OrganizationMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// AddOrganizationPersonIDs adds the "organization_person" edge to the OrganizationPerson entity by ids.
func (m *OrganizationMutation) AddOrganizationPersonIDs(ids ...int) {
	if m.organization_person == nil {
		m.organization_person = make(map[int]struct{})
	}
	for i := range ids {
		m.organization_person[ids[i]] = struct{}{}
	}
}

// ClearOrganizationPerson clears the "organization_person" edge to the OrganizationPerson entity.
func (m *OrganizationMutation) ClearOrganizationPerson() {
	m.clearedorganization_person = true
}

// OrganizationPersonCleared reports if the "organization_person" edge to the OrganizationPerson entity was cleared.
func (m *OrganizationMutation) OrganizationPersonCleared() bool {
	return m.clearedorganization_person
}

// RemoveOrganizationPersonIDs removes the "organization_person" edge to the OrganizationPerson entity by IDs.
func (m *OrganizationMutation) RemoveOrganizationPersonIDs(ids ...int) {
	if m.removedorganization_person == nil {
		m.removedorganization_person = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.organization_person, ids[i])
		m.removedorganization_person[ids[i]] = struct{}{}
	}
}

// RemovedOrganizationPerson returns the removed IDs of the "organization_person" edge to the OrganizationPerson entity.
func (m *OrganizationMutation) RemovedOrganizationPersonIDs() (ids []int) {
	for id := range m.removedorganization_person {
		ids = append(ids, id)
	}
	return
}

// OrganizationPersonIDs returns the "organization_person" edge IDs in the mutation.
func (m *OrganizationMutation) OrganizationPersonIDs() (ids []int) {
	for id := range m.organization_person {
		ids = append(ids, id)
	}
	return
}

// ResetOrganizationPerson resets all changes to the "organization_person" edge.
func (m *OrganizationMutation) ResetOrganizationPerson() {
	m.organization_person = nil
	m.clearedorganization_person = false
	m.removedorganization_person = nil
}

// Where appends a list predicates to the OrganizationMutation builder.
func (m *OrganizationMutation) Where(ps ...predicate.Organization) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Organization, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Organization).
func (m *OrganizationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.date_created != nil {
		fields = append(fields, organization.FieldDateCreated)
	}
	if m.date_updated != nil {
		fields = append(fields, organization.FieldDateUpdated)
	}
	if m.public_id != nil {
		fields = append(fields, organization.FieldPublicID)
	}
	if m._type != nil {
		fields = append(fields, organization.FieldType)
	}
	if m.name_dut != nil {
		fields = append(fields, organization.FieldNameDut)
	}
	if m.name_eng != nil {
		fields = append(fields, organization.FieldNameEng)
	}
	if m.other_id != nil {
		fields = append(fields, organization.FieldOtherID)
	}
	if m.other_parent_id != nil {
		fields = append(fields, organization.FieldOtherParentID)
	}
	if m.parent != nil {
		fields = append(fields, organization.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organization.FieldDateCreated:
		return m.DateCreated()
	case organization.FieldDateUpdated:
		return m.DateUpdated()
	case organization.FieldPublicID:
		return m.PublicID()
	case organization.FieldType:
		return m.GetType()
	case organization.FieldNameDut:
		return m.NameDut()
	case organization.FieldNameEng:
		return m.NameEng()
	case organization.FieldOtherID:
		return m.OtherID()
	case organization.FieldOtherParentID:
		return m.OtherParentID()
	case organization.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organization.FieldDateCreated:
		return m.OldDateCreated(ctx)
	case organization.FieldDateUpdated:
		return m.OldDateUpdated(ctx)
	case organization.FieldPublicID:
		return m.OldPublicID(ctx)
	case organization.FieldType:
		return m.OldType(ctx)
	case organization.FieldNameDut:
		return m.OldNameDut(ctx)
	case organization.FieldNameEng:
		return m.OldNameEng(ctx)
	case organization.FieldOtherID:
		return m.OldOtherID(ctx)
	case organization.FieldOtherParentID:
		return m.OldOtherParentID(ctx)
	case organization.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown Organization field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organization.FieldDateCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateCreated(v)
		return nil
	case organization.FieldDateUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateUpdated(v)
		return nil
	case organization.FieldPublicID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicID(v)
		return nil
	case organization.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case organization.FieldNameDut:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameDut(v)
		return nil
	case organization.FieldNameEng:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEng(v)
		return nil
	case organization.FieldOtherID:
		v, ok := value.([]schema.IdRef)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherID(v)
		return nil
	case organization.FieldOtherParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherParentID(v)
		return nil
	case organization.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Organization numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(organization.FieldNameDut) {
		fields = append(fields, organization.FieldNameDut)
	}
	if m.FieldCleared(organization.FieldNameEng) {
		fields = append(fields, organization.FieldNameEng)
	}
	if m.FieldCleared(organization.FieldOtherID) {
		fields = append(fields, organization.FieldOtherID)
	}
	if m.FieldCleared(organization.FieldOtherParentID) {
		fields = append(fields, organization.FieldOtherParentID)
	}
	if m.FieldCleared(organization.FieldParentID) {
		fields = append(fields, organization.FieldParentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationMutation) ClearField(name string) error {
	switch name {
	case organization.FieldNameDut:
		m.ClearNameDut()
		return nil
	case organization.FieldNameEng:
		m.ClearNameEng()
		return nil
	case organization.FieldOtherID:
		m.ClearOtherID()
		return nil
	case organization.FieldOtherParentID:
		m.ClearOtherParentID()
		return nil
	case organization.FieldParentID:
		m.ClearParentID()
		return nil
	}
	return fmt.Errorf("unknown Organization nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationMutation) ResetField(name string) error {
	switch name {
	case organization.FieldDateCreated:
		m.ResetDateCreated()
		return nil
	case organization.FieldDateUpdated:
		m.ResetDateUpdated()
		return nil
	case organization.FieldPublicID:
		m.ResetPublicID()
		return nil
	case organization.FieldType:
		m.ResetType()
		return nil
	case organization.FieldNameDut:
		m.ResetNameDut()
		return nil
	case organization.FieldNameEng:
		m.ResetNameEng()
		return nil
	case organization.FieldOtherID:
		m.ResetOtherID()
		return nil
	case organization.FieldOtherParentID:
		m.ResetOtherParentID()
		return nil
	case organization.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.people != nil {
		edges = append(edges, organization.EdgePeople)
	}
	if m.parent != nil {
		edges = append(edges, organization.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.organization_person != nil {
		edges = append(edges, organization.EdgeOrganizationPerson)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgePeople:
		ids := make([]ent.Value, 0, len(m.people))
		for id := range m.people {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case organization.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeOrganizationPerson:
		ids := make([]ent.Value, 0, len(m.organization_person))
		for id := range m.organization_person {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedpeople != nil {
		edges = append(edges, organization.EdgePeople)
	}
	if m.removedchildren != nil {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.removedorganization_person != nil {
		edges = append(edges, organization.EdgeOrganizationPerson)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgePeople:
		ids := make([]ent.Value, 0, len(m.removedpeople))
		for id := range m.removedpeople {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeOrganizationPerson:
		ids := make([]ent.Value, 0, len(m.removedorganization_person))
		for id := range m.removedorganization_person {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedpeople {
		edges = append(edges, organization.EdgePeople)
	}
	if m.clearedparent {
		edges = append(edges, organization.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.clearedorganization_person {
		edges = append(edges, organization.EdgeOrganizationPerson)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationMutation) EdgeCleared(name string) bool {
	switch name {
	case organization.EdgePeople:
		return m.clearedpeople
	case organization.EdgeParent:
		return m.clearedparent
	case organization.EdgeChildren:
		return m.clearedchildren
	case organization.EdgeOrganizationPerson:
		return m.clearedorganization_person
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationMutation) ClearEdge(name string) error {
	switch name {
	case organization.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Organization unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationMutation) ResetEdge(name string) error {
	switch name {
	case organization.EdgePeople:
		m.ResetPeople()
		return nil
	case organization.EdgeParent:
		m.ResetParent()
		return nil
	case organization.EdgeChildren:
		m.ResetChildren()
		return nil
	case organization.EdgeOrganizationPerson:
		m.ResetOrganizationPerson()
		return nil
	}
	return fmt.Errorf("unknown Organization edge %s", name)
}

// OrganizationPersonMutation represents an operation that mutates the OrganizationPerson nodes in the graph.
type OrganizationPersonMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	date_created         *time.Time
	date_updated         *time.Time
	clearedFields        map[string]struct{}
	people               *int
	clearedpeople        bool
	organizations        *int
	clearedorganizations bool
	done                 bool
	oldValue             func(context.Context) (*OrganizationPerson, error)
	predicates           []predicate.OrganizationPerson
}

var _ ent.Mutation = (*OrganizationPersonMutation)(nil)

// organizationpersonOption allows management of the mutation configuration using functional options.
type organizationpersonOption func(*OrganizationPersonMutation)

// newOrganizationPersonMutation creates new mutation for the OrganizationPerson entity.
func newOrganizationPersonMutation(c config, op Op, opts ...organizationpersonOption) *OrganizationPersonMutation {
	m := &OrganizationPersonMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganizationPerson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationPersonID sets the ID field of the mutation.
func withOrganizationPersonID(id int) organizationpersonOption {
	return func(m *OrganizationPersonMutation) {
		var (
			err   error
			once  sync.Once
			value *OrganizationPerson
		)
		m.oldValue = func(ctx context.Context) (*OrganizationPerson, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrganizationPerson.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganizationPerson sets the old OrganizationPerson of the mutation.
func withOrganizationPerson(node *OrganizationPerson) organizationpersonOption {
	return func(m *OrganizationPersonMutation) {
		m.oldValue = func(context.Context) (*OrganizationPerson, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationPersonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationPersonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationPersonMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationPersonMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrganizationPerson.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDateCreated sets the "date_created" field.
func (m *OrganizationPersonMutation) SetDateCreated(t time.Time) {
	m.date_created = &t
}

// DateCreated returns the value of the "date_created" field in the mutation.
func (m *OrganizationPersonMutation) DateCreated() (r time.Time, exists bool) {
	v := m.date_created
	if v == nil {
		return
	}
	return *v, true
}

// OldDateCreated returns the old "date_created" field's value of the OrganizationPerson entity.
// If the OrganizationPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPersonMutation) OldDateCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateCreated: %w", err)
	}
	return oldValue.DateCreated, nil
}

// ResetDateCreated resets all changes to the "date_created" field.
func (m *OrganizationPersonMutation) ResetDateCreated() {
	m.date_created = nil
}

// SetDateUpdated sets the "date_updated" field.
func (m *OrganizationPersonMutation) SetDateUpdated(t time.Time) {
	m.date_updated = &t
}

// DateUpdated returns the value of the "date_updated" field in the mutation.
func (m *OrganizationPersonMutation) DateUpdated() (r time.Time, exists bool) {
	v := m.date_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldDateUpdated returns the old "date_updated" field's value of the OrganizationPerson entity.
// If the OrganizationPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPersonMutation) OldDateUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateUpdated: %w", err)
	}
	return oldValue.DateUpdated, nil
}

// ResetDateUpdated resets all changes to the "date_updated" field.
func (m *OrganizationPersonMutation) ResetDateUpdated() {
	m.date_updated = nil
}

// SetOrganizationID sets the "organization_id" field.
func (m *OrganizationPersonMutation) SetOrganizationID(i int) {
	m.organizations = &i
}

// OrganizationID returns the value of the "organization_id" field in the mutation.
func (m *OrganizationPersonMutation) OrganizationID() (r int, exists bool) {
	v := m.organizations
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganizationID returns the old "organization_id" field's value of the OrganizationPerson entity.
// If the OrganizationPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPersonMutation) OldOrganizationID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrganizationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrganizationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganizationID: %w", err)
	}
	return oldValue.OrganizationID, nil
}

// ResetOrganizationID resets all changes to the "organization_id" field.
func (m *OrganizationPersonMutation) ResetOrganizationID() {
	m.organizations = nil
}

// SetPersonID sets the "person_id" field.
func (m *OrganizationPersonMutation) SetPersonID(i int) {
	m.people = &i
}

// PersonID returns the value of the "person_id" field in the mutation.
func (m *OrganizationPersonMutation) PersonID() (r int, exists bool) {
	v := m.people
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonID returns the old "person_id" field's value of the OrganizationPerson entity.
// If the OrganizationPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationPersonMutation) OldPersonID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPersonID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPersonID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonID: %w", err)
	}
	return oldValue.PersonID, nil
}

// ResetPersonID resets all changes to the "person_id" field.
func (m *OrganizationPersonMutation) ResetPersonID() {
	m.people = nil
}

// SetPeopleID sets the "people" edge to the Person entity by id.
func (m *OrganizationPersonMutation) SetPeopleID(id int) {
	m.people = &id
}

// ClearPeople clears the "people" edge to the Person entity.
func (m *OrganizationPersonMutation) ClearPeople() {
	m.clearedpeople = true
}

// PeopleCleared reports if the "people" edge to the Person entity was cleared.
func (m *OrganizationPersonMutation) PeopleCleared() bool {
	return m.clearedpeople
}

// PeopleID returns the "people" edge ID in the mutation.
func (m *OrganizationPersonMutation) PeopleID() (id int, exists bool) {
	if m.people != nil {
		return *m.people, true
	}
	return
}

// PeopleIDs returns the "people" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PeopleID instead. It exists only for internal usage by the builders.
func (m *OrganizationPersonMutation) PeopleIDs() (ids []int) {
	if id := m.people; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPeople resets all changes to the "people" edge.
func (m *OrganizationPersonMutation) ResetPeople() {
	m.people = nil
	m.clearedpeople = false
}

// SetOrganizationsID sets the "organizations" edge to the Organization entity by id.
func (m *OrganizationPersonMutation) SetOrganizationsID(id int) {
	m.organizations = &id
}

// ClearOrganizations clears the "organizations" edge to the Organization entity.
func (m *OrganizationPersonMutation) ClearOrganizations() {
	m.clearedorganizations = true
}

// OrganizationsCleared reports if the "organizations" edge to the Organization entity was cleared.
func (m *OrganizationPersonMutation) OrganizationsCleared() bool {
	return m.clearedorganizations
}

// OrganizationsID returns the "organizations" edge ID in the mutation.
func (m *OrganizationPersonMutation) OrganizationsID() (id int, exists bool) {
	if m.organizations != nil {
		return *m.organizations, true
	}
	return
}

// OrganizationsIDs returns the "organizations" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationsID instead. It exists only for internal usage by the builders.
func (m *OrganizationPersonMutation) OrganizationsIDs() (ids []int) {
	if id := m.organizations; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganizations resets all changes to the "organizations" edge.
func (m *OrganizationPersonMutation) ResetOrganizations() {
	m.organizations = nil
	m.clearedorganizations = false
}

// Where appends a list predicates to the OrganizationPersonMutation builder.
func (m *OrganizationPersonMutation) Where(ps ...predicate.OrganizationPerson) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationPersonMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationPersonMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrganizationPerson, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationPersonMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationPersonMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrganizationPerson).
func (m *OrganizationPersonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationPersonMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.date_created != nil {
		fields = append(fields, organizationperson.FieldDateCreated)
	}
	if m.date_updated != nil {
		fields = append(fields, organizationperson.FieldDateUpdated)
	}
	if m.organizations != nil {
		fields = append(fields, organizationperson.FieldOrganizationID)
	}
	if m.people != nil {
		fields = append(fields, organizationperson.FieldPersonID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationPersonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organizationperson.FieldDateCreated:
		return m.DateCreated()
	case organizationperson.FieldDateUpdated:
		return m.DateUpdated()
	case organizationperson.FieldOrganizationID:
		return m.OrganizationID()
	case organizationperson.FieldPersonID:
		return m.PersonID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationPersonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organizationperson.FieldDateCreated:
		return m.OldDateCreated(ctx)
	case organizationperson.FieldDateUpdated:
		return m.OldDateUpdated(ctx)
	case organizationperson.FieldOrganizationID:
		return m.OldOrganizationID(ctx)
	case organizationperson.FieldPersonID:
		return m.OldPersonID(ctx)
	}
	return nil, fmt.Errorf("unknown OrganizationPerson field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationPersonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organizationperson.FieldDateCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateCreated(v)
		return nil
	case organizationperson.FieldDateUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateUpdated(v)
		return nil
	case organizationperson.FieldOrganizationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganizationID(v)
		return nil
	case organizationperson.FieldPersonID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonID(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationPerson field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationPersonMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationPersonMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationPersonMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OrganizationPerson numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationPersonMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationPersonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationPersonMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OrganizationPerson nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationPersonMutation) ResetField(name string) error {
	switch name {
	case organizationperson.FieldDateCreated:
		m.ResetDateCreated()
		return nil
	case organizationperson.FieldDateUpdated:
		m.ResetDateUpdated()
		return nil
	case organizationperson.FieldOrganizationID:
		m.ResetOrganizationID()
		return nil
	case organizationperson.FieldPersonID:
		m.ResetPersonID()
		return nil
	}
	return fmt.Errorf("unknown OrganizationPerson field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationPersonMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.people != nil {
		edges = append(edges, organizationperson.EdgePeople)
	}
	if m.organizations != nil {
		edges = append(edges, organizationperson.EdgeOrganizations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationPersonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organizationperson.EdgePeople:
		if id := m.people; id != nil {
			return []ent.Value{*id}
		}
	case organizationperson.EdgeOrganizations:
		if id := m.organizations; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationPersonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationPersonMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationPersonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpeople {
		edges = append(edges, organizationperson.EdgePeople)
	}
	if m.clearedorganizations {
		edges = append(edges, organizationperson.EdgeOrganizations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationPersonMutation) EdgeCleared(name string) bool {
	switch name {
	case organizationperson.EdgePeople:
		return m.clearedpeople
	case organizationperson.EdgeOrganizations:
		return m.clearedorganizations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationPersonMutation) ClearEdge(name string) error {
	switch name {
	case organizationperson.EdgePeople:
		m.ClearPeople()
		return nil
	case organizationperson.EdgeOrganizations:
		m.ClearOrganizations()
		return nil
	}
	return fmt.Errorf("unknown OrganizationPerson unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationPersonMutation) ResetEdge(name string) error {
	switch name {
	case organizationperson.EdgePeople:
		m.ResetPeople()
		return nil
	case organizationperson.EdgeOrganizations:
		m.ResetOrganizations()
		return nil
	}
	return fmt.Errorf("unknown OrganizationPerson edge %s", name)
}

// PersonMutation represents an operation that mutates the Person nodes in the graph.
type PersonMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	date_created                *time.Time
	date_updated                *time.Time
	public_id                   *string
	active                      *bool
	birth_date                  *string
	email                       *string
	other_id                    *[]schema.IdRef
	appendother_id              []schema.IdRef
	other_organization_id       *[]string
	appendother_organization_id []string
	first_name                  *string
	full_name                   *string
	last_name                   *string
	job_category                *[]string
	appendjob_category          []string
	orcid                       *string
	orcid_token                 *string
	preferred_first_name        *string
	preferred_last_name         *string
	title                       *string
	role                        *[]string
	appendrole                  []string
	settings                    *map[string]string
	clearedFields               map[string]struct{}
	organizations               map[int]struct{}
	removedorganizations        map[int]struct{}
	clearedorganizations        bool
	organization_person         map[int]struct{}
	removedorganization_person  map[int]struct{}
	clearedorganization_person  bool
	done                        bool
	oldValue                    func(context.Context) (*Person, error)
	predicates                  []predicate.Person
}

var _ ent.Mutation = (*PersonMutation)(nil)

// personOption allows management of the mutation configuration using functional options.
type personOption func(*PersonMutation)

// newPersonMutation creates new mutation for the Person entity.
func newPersonMutation(c config, op Op, opts ...personOption) *PersonMutation {
	m := &PersonMutation{
		config:        c,
		op:            op,
		typ:           TypePerson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonID sets the ID field of the mutation.
func withPersonID(id int) personOption {
	return func(m *PersonMutation) {
		var (
			err   error
			once  sync.Once
			value *Person
		)
		m.oldValue = func(ctx context.Context) (*Person, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Person.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerson sets the old Person of the mutation.
func withPerson(node *Person) personOption {
	return func(m *PersonMutation) {
		m.oldValue = func(context.Context) (*Person, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PersonMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PersonMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Person.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDateCreated sets the "date_created" field.
func (m *PersonMutation) SetDateCreated(t time.Time) {
	m.date_created = &t
}

// DateCreated returns the value of the "date_created" field in the mutation.
func (m *PersonMutation) DateCreated() (r time.Time, exists bool) {
	v := m.date_created
	if v == nil {
		return
	}
	return *v, true
}

// OldDateCreated returns the old "date_created" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldDateCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateCreated: %w", err)
	}
	return oldValue.DateCreated, nil
}

// ResetDateCreated resets all changes to the "date_created" field.
func (m *PersonMutation) ResetDateCreated() {
	m.date_created = nil
}

// SetDateUpdated sets the "date_updated" field.
func (m *PersonMutation) SetDateUpdated(t time.Time) {
	m.date_updated = &t
}

// DateUpdated returns the value of the "date_updated" field in the mutation.
func (m *PersonMutation) DateUpdated() (r time.Time, exists bool) {
	v := m.date_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldDateUpdated returns the old "date_updated" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldDateUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateUpdated: %w", err)
	}
	return oldValue.DateUpdated, nil
}

// ResetDateUpdated resets all changes to the "date_updated" field.
func (m *PersonMutation) ResetDateUpdated() {
	m.date_updated = nil
}

// SetPublicID sets the "public_id" field.
func (m *PersonMutation) SetPublicID(s string) {
	m.public_id = &s
}

// PublicID returns the value of the "public_id" field in the mutation.
func (m *PersonMutation) PublicID() (r string, exists bool) {
	v := m.public_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicID returns the old "public_id" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldPublicID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicID: %w", err)
	}
	return oldValue.PublicID, nil
}

// ResetPublicID resets all changes to the "public_id" field.
func (m *PersonMutation) ResetPublicID() {
	m.public_id = nil
}

// SetActive sets the "active" field.
func (m *PersonMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *PersonMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *PersonMutation) ResetActive() {
	m.active = nil
}

// SetBirthDate sets the "birth_date" field.
func (m *PersonMutation) SetBirthDate(s string) {
	m.birth_date = &s
}

// BirthDate returns the value of the "birth_date" field in the mutation.
func (m *PersonMutation) BirthDate() (r string, exists bool) {
	v := m.birth_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthDate returns the old "birth_date" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldBirthDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthDate: %w", err)
	}
	return oldValue.BirthDate, nil
}

// ClearBirthDate clears the value of the "birth_date" field.
func (m *PersonMutation) ClearBirthDate() {
	m.birth_date = nil
	m.clearedFields[person.FieldBirthDate] = struct{}{}
}

// BirthDateCleared returns if the "birth_date" field was cleared in this mutation.
func (m *PersonMutation) BirthDateCleared() bool {
	_, ok := m.clearedFields[person.FieldBirthDate]
	return ok
}

// ResetBirthDate resets all changes to the "birth_date" field.
func (m *PersonMutation) ResetBirthDate() {
	m.birth_date = nil
	delete(m.clearedFields, person.FieldBirthDate)
}

// SetEmail sets the "email" field.
func (m *PersonMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *PersonMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *PersonMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[person.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *PersonMutation) EmailCleared() bool {
	_, ok := m.clearedFields[person.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *PersonMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, person.FieldEmail)
}

// SetOtherID sets the "other_id" field.
func (m *PersonMutation) SetOtherID(sr []schema.IdRef) {
	m.other_id = &sr
	m.appendother_id = nil
}

// OtherID returns the value of the "other_id" field in the mutation.
func (m *PersonMutation) OtherID() (r []schema.IdRef, exists bool) {
	v := m.other_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherID returns the old "other_id" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldOtherID(ctx context.Context) (v []schema.IdRef, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherID: %w", err)
	}
	return oldValue.OtherID, nil
}

// AppendOtherID adds sr to the "other_id" field.
func (m *PersonMutation) AppendOtherID(sr []schema.IdRef) {
	m.appendother_id = append(m.appendother_id, sr...)
}

// AppendedOtherID returns the list of values that were appended to the "other_id" field in this mutation.
func (m *PersonMutation) AppendedOtherID() ([]schema.IdRef, bool) {
	if len(m.appendother_id) == 0 {
		return nil, false
	}
	return m.appendother_id, true
}

// ClearOtherID clears the value of the "other_id" field.
func (m *PersonMutation) ClearOtherID() {
	m.other_id = nil
	m.appendother_id = nil
	m.clearedFields[person.FieldOtherID] = struct{}{}
}

// OtherIDCleared returns if the "other_id" field was cleared in this mutation.
func (m *PersonMutation) OtherIDCleared() bool {
	_, ok := m.clearedFields[person.FieldOtherID]
	return ok
}

// ResetOtherID resets all changes to the "other_id" field.
func (m *PersonMutation) ResetOtherID() {
	m.other_id = nil
	m.appendother_id = nil
	delete(m.clearedFields, person.FieldOtherID)
}

// SetOtherOrganizationID sets the "other_organization_id" field.
func (m *PersonMutation) SetOtherOrganizationID(s []string) {
	m.other_organization_id = &s
	m.appendother_organization_id = nil
}

// OtherOrganizationID returns the value of the "other_organization_id" field in the mutation.
func (m *PersonMutation) OtherOrganizationID() (r []string, exists bool) {
	v := m.other_organization_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherOrganizationID returns the old "other_organization_id" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldOtherOrganizationID(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherOrganizationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherOrganizationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherOrganizationID: %w", err)
	}
	return oldValue.OtherOrganizationID, nil
}

// AppendOtherOrganizationID adds s to the "other_organization_id" field.
func (m *PersonMutation) AppendOtherOrganizationID(s []string) {
	m.appendother_organization_id = append(m.appendother_organization_id, s...)
}

// AppendedOtherOrganizationID returns the list of values that were appended to the "other_organization_id" field in this mutation.
func (m *PersonMutation) AppendedOtherOrganizationID() ([]string, bool) {
	if len(m.appendother_organization_id) == 0 {
		return nil, false
	}
	return m.appendother_organization_id, true
}

// ClearOtherOrganizationID clears the value of the "other_organization_id" field.
func (m *PersonMutation) ClearOtherOrganizationID() {
	m.other_organization_id = nil
	m.appendother_organization_id = nil
	m.clearedFields[person.FieldOtherOrganizationID] = struct{}{}
}

// OtherOrganizationIDCleared returns if the "other_organization_id" field was cleared in this mutation.
func (m *PersonMutation) OtherOrganizationIDCleared() bool {
	_, ok := m.clearedFields[person.FieldOtherOrganizationID]
	return ok
}

// ResetOtherOrganizationID resets all changes to the "other_organization_id" field.
func (m *PersonMutation) ResetOtherOrganizationID() {
	m.other_organization_id = nil
	m.appendother_organization_id = nil
	delete(m.clearedFields, person.FieldOtherOrganizationID)
}

// SetFirstName sets the "first_name" field.
func (m *PersonMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *PersonMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *PersonMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[person.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *PersonMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[person.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *PersonMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, person.FieldFirstName)
}

// SetFullName sets the "full_name" field.
func (m *PersonMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *PersonMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ClearFullName clears the value of the "full_name" field.
func (m *PersonMutation) ClearFullName() {
	m.full_name = nil
	m.clearedFields[person.FieldFullName] = struct{}{}
}

// FullNameCleared returns if the "full_name" field was cleared in this mutation.
func (m *PersonMutation) FullNameCleared() bool {
	_, ok := m.clearedFields[person.FieldFullName]
	return ok
}

// ResetFullName resets all changes to the "full_name" field.
func (m *PersonMutation) ResetFullName() {
	m.full_name = nil
	delete(m.clearedFields, person.FieldFullName)
}

// SetLastName sets the "last_name" field.
func (m *PersonMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *PersonMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *PersonMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[person.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *PersonMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[person.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *PersonMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, person.FieldLastName)
}

// SetJobCategory sets the "job_category" field.
func (m *PersonMutation) SetJobCategory(s []string) {
	m.job_category = &s
	m.appendjob_category = nil
}

// JobCategory returns the value of the "job_category" field in the mutation.
func (m *PersonMutation) JobCategory() (r []string, exists bool) {
	v := m.job_category
	if v == nil {
		return
	}
	return *v, true
}

// OldJobCategory returns the old "job_category" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldJobCategory(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobCategory: %w", err)
	}
	return oldValue.JobCategory, nil
}

// AppendJobCategory adds s to the "job_category" field.
func (m *PersonMutation) AppendJobCategory(s []string) {
	m.appendjob_category = append(m.appendjob_category, s...)
}

// AppendedJobCategory returns the list of values that were appended to the "job_category" field in this mutation.
func (m *PersonMutation) AppendedJobCategory() ([]string, bool) {
	if len(m.appendjob_category) == 0 {
		return nil, false
	}
	return m.appendjob_category, true
}

// ClearJobCategory clears the value of the "job_category" field.
func (m *PersonMutation) ClearJobCategory() {
	m.job_category = nil
	m.appendjob_category = nil
	m.clearedFields[person.FieldJobCategory] = struct{}{}
}

// JobCategoryCleared returns if the "job_category" field was cleared in this mutation.
func (m *PersonMutation) JobCategoryCleared() bool {
	_, ok := m.clearedFields[person.FieldJobCategory]
	return ok
}

// ResetJobCategory resets all changes to the "job_category" field.
func (m *PersonMutation) ResetJobCategory() {
	m.job_category = nil
	m.appendjob_category = nil
	delete(m.clearedFields, person.FieldJobCategory)
}

// SetOrcid sets the "orcid" field.
func (m *PersonMutation) SetOrcid(s string) {
	m.orcid = &s
}

// Orcid returns the value of the "orcid" field in the mutation.
func (m *PersonMutation) Orcid() (r string, exists bool) {
	v := m.orcid
	if v == nil {
		return
	}
	return *v, true
}

// OldOrcid returns the old "orcid" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldOrcid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrcid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrcid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrcid: %w", err)
	}
	return oldValue.Orcid, nil
}

// ClearOrcid clears the value of the "orcid" field.
func (m *PersonMutation) ClearOrcid() {
	m.orcid = nil
	m.clearedFields[person.FieldOrcid] = struct{}{}
}

// OrcidCleared returns if the "orcid" field was cleared in this mutation.
func (m *PersonMutation) OrcidCleared() bool {
	_, ok := m.clearedFields[person.FieldOrcid]
	return ok
}

// ResetOrcid resets all changes to the "orcid" field.
func (m *PersonMutation) ResetOrcid() {
	m.orcid = nil
	delete(m.clearedFields, person.FieldOrcid)
}

// SetOrcidToken sets the "orcid_token" field.
func (m *PersonMutation) SetOrcidToken(s string) {
	m.orcid_token = &s
}

// OrcidToken returns the value of the "orcid_token" field in the mutation.
func (m *PersonMutation) OrcidToken() (r string, exists bool) {
	v := m.orcid_token
	if v == nil {
		return
	}
	return *v, true
}

// OldOrcidToken returns the old "orcid_token" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldOrcidToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrcidToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrcidToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrcidToken: %w", err)
	}
	return oldValue.OrcidToken, nil
}

// ClearOrcidToken clears the value of the "orcid_token" field.
func (m *PersonMutation) ClearOrcidToken() {
	m.orcid_token = nil
	m.clearedFields[person.FieldOrcidToken] = struct{}{}
}

// OrcidTokenCleared returns if the "orcid_token" field was cleared in this mutation.
func (m *PersonMutation) OrcidTokenCleared() bool {
	_, ok := m.clearedFields[person.FieldOrcidToken]
	return ok
}

// ResetOrcidToken resets all changes to the "orcid_token" field.
func (m *PersonMutation) ResetOrcidToken() {
	m.orcid_token = nil
	delete(m.clearedFields, person.FieldOrcidToken)
}

// SetPreferredFirstName sets the "preferred_first_name" field.
func (m *PersonMutation) SetPreferredFirstName(s string) {
	m.preferred_first_name = &s
}

// PreferredFirstName returns the value of the "preferred_first_name" field in the mutation.
func (m *PersonMutation) PreferredFirstName() (r string, exists bool) {
	v := m.preferred_first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPreferredFirstName returns the old "preferred_first_name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldPreferredFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreferredFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreferredFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreferredFirstName: %w", err)
	}
	return oldValue.PreferredFirstName, nil
}

// ClearPreferredFirstName clears the value of the "preferred_first_name" field.
func (m *PersonMutation) ClearPreferredFirstName() {
	m.preferred_first_name = nil
	m.clearedFields[person.FieldPreferredFirstName] = struct{}{}
}

// PreferredFirstNameCleared returns if the "preferred_first_name" field was cleared in this mutation.
func (m *PersonMutation) PreferredFirstNameCleared() bool {
	_, ok := m.clearedFields[person.FieldPreferredFirstName]
	return ok
}

// ResetPreferredFirstName resets all changes to the "preferred_first_name" field.
func (m *PersonMutation) ResetPreferredFirstName() {
	m.preferred_first_name = nil
	delete(m.clearedFields, person.FieldPreferredFirstName)
}

// SetPreferredLastName sets the "preferred_last_name" field.
func (m *PersonMutation) SetPreferredLastName(s string) {
	m.preferred_last_name = &s
}

// PreferredLastName returns the value of the "preferred_last_name" field in the mutation.
func (m *PersonMutation) PreferredLastName() (r string, exists bool) {
	v := m.preferred_last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPreferredLastName returns the old "preferred_last_name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldPreferredLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreferredLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreferredLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreferredLastName: %w", err)
	}
	return oldValue.PreferredLastName, nil
}

// ClearPreferredLastName clears the value of the "preferred_last_name" field.
func (m *PersonMutation) ClearPreferredLastName() {
	m.preferred_last_name = nil
	m.clearedFields[person.FieldPreferredLastName] = struct{}{}
}

// PreferredLastNameCleared returns if the "preferred_last_name" field was cleared in this mutation.
func (m *PersonMutation) PreferredLastNameCleared() bool {
	_, ok := m.clearedFields[person.FieldPreferredLastName]
	return ok
}

// ResetPreferredLastName resets all changes to the "preferred_last_name" field.
func (m *PersonMutation) ResetPreferredLastName() {
	m.preferred_last_name = nil
	delete(m.clearedFields, person.FieldPreferredLastName)
}

// SetTitle sets the "title" field.
func (m *PersonMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PersonMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *PersonMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[person.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *PersonMutation) TitleCleared() bool {
	_, ok := m.clearedFields[person.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *PersonMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, person.FieldTitle)
}

// SetRole sets the "role" field.
func (m *PersonMutation) SetRole(s []string) {
	m.role = &s
	m.appendrole = nil
}

// Role returns the value of the "role" field in the mutation.
func (m *PersonMutation) Role() (r []string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldRole(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// AppendRole adds s to the "role" field.
func (m *PersonMutation) AppendRole(s []string) {
	m.appendrole = append(m.appendrole, s...)
}

// AppendedRole returns the list of values that were appended to the "role" field in this mutation.
func (m *PersonMutation) AppendedRole() ([]string, bool) {
	if len(m.appendrole) == 0 {
		return nil, false
	}
	return m.appendrole, true
}

// ClearRole clears the value of the "role" field.
func (m *PersonMutation) ClearRole() {
	m.role = nil
	m.appendrole = nil
	m.clearedFields[person.FieldRole] = struct{}{}
}

// RoleCleared returns if the "role" field was cleared in this mutation.
func (m *PersonMutation) RoleCleared() bool {
	_, ok := m.clearedFields[person.FieldRole]
	return ok
}

// ResetRole resets all changes to the "role" field.
func (m *PersonMutation) ResetRole() {
	m.role = nil
	m.appendrole = nil
	delete(m.clearedFields, person.FieldRole)
}

// SetSettings sets the "settings" field.
func (m *PersonMutation) SetSettings(value map[string]string) {
	m.settings = &value
}

// Settings returns the value of the "settings" field in the mutation.
func (m *PersonMutation) Settings() (r map[string]string, exists bool) {
	v := m.settings
	if v == nil {
		return
	}
	return *v, true
}

// OldSettings returns the old "settings" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldSettings(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettings: %w", err)
	}
	return oldValue.Settings, nil
}

// ClearSettings clears the value of the "settings" field.
func (m *PersonMutation) ClearSettings() {
	m.settings = nil
	m.clearedFields[person.FieldSettings] = struct{}{}
}

// SettingsCleared returns if the "settings" field was cleared in this mutation.
func (m *PersonMutation) SettingsCleared() bool {
	_, ok := m.clearedFields[person.FieldSettings]
	return ok
}

// ResetSettings resets all changes to the "settings" field.
func (m *PersonMutation) ResetSettings() {
	m.settings = nil
	delete(m.clearedFields, person.FieldSettings)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by ids.
func (m *PersonMutation) AddOrganizationIDs(ids ...int) {
	if m.organizations == nil {
		m.organizations = make(map[int]struct{})
	}
	for i := range ids {
		m.organizations[ids[i]] = struct{}{}
	}
}

// ClearOrganizations clears the "organizations" edge to the Organization entity.
func (m *PersonMutation) ClearOrganizations() {
	m.clearedorganizations = true
}

// OrganizationsCleared reports if the "organizations" edge to the Organization entity was cleared.
func (m *PersonMutation) OrganizationsCleared() bool {
	return m.clearedorganizations
}

// RemoveOrganizationIDs removes the "organizations" edge to the Organization entity by IDs.
func (m *PersonMutation) RemoveOrganizationIDs(ids ...int) {
	if m.removedorganizations == nil {
		m.removedorganizations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.organizations, ids[i])
		m.removedorganizations[ids[i]] = struct{}{}
	}
}

// RemovedOrganizations returns the removed IDs of the "organizations" edge to the Organization entity.
func (m *PersonMutation) RemovedOrganizationsIDs() (ids []int) {
	for id := range m.removedorganizations {
		ids = append(ids, id)
	}
	return
}

// OrganizationsIDs returns the "organizations" edge IDs in the mutation.
func (m *PersonMutation) OrganizationsIDs() (ids []int) {
	for id := range m.organizations {
		ids = append(ids, id)
	}
	return
}

// ResetOrganizations resets all changes to the "organizations" edge.
func (m *PersonMutation) ResetOrganizations() {
	m.organizations = nil
	m.clearedorganizations = false
	m.removedorganizations = nil
}

// AddOrganizationPersonIDs adds the "organization_person" edge to the OrganizationPerson entity by ids.
func (m *PersonMutation) AddOrganizationPersonIDs(ids ...int) {
	if m.organization_person == nil {
		m.organization_person = make(map[int]struct{})
	}
	for i := range ids {
		m.organization_person[ids[i]] = struct{}{}
	}
}

// ClearOrganizationPerson clears the "organization_person" edge to the OrganizationPerson entity.
func (m *PersonMutation) ClearOrganizationPerson() {
	m.clearedorganization_person = true
}

// OrganizationPersonCleared reports if the "organization_person" edge to the OrganizationPerson entity was cleared.
func (m *PersonMutation) OrganizationPersonCleared() bool {
	return m.clearedorganization_person
}

// RemoveOrganizationPersonIDs removes the "organization_person" edge to the OrganizationPerson entity by IDs.
func (m *PersonMutation) RemoveOrganizationPersonIDs(ids ...int) {
	if m.removedorganization_person == nil {
		m.removedorganization_person = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.organization_person, ids[i])
		m.removedorganization_person[ids[i]] = struct{}{}
	}
}

// RemovedOrganizationPerson returns the removed IDs of the "organization_person" edge to the OrganizationPerson entity.
func (m *PersonMutation) RemovedOrganizationPersonIDs() (ids []int) {
	for id := range m.removedorganization_person {
		ids = append(ids, id)
	}
	return
}

// OrganizationPersonIDs returns the "organization_person" edge IDs in the mutation.
func (m *PersonMutation) OrganizationPersonIDs() (ids []int) {
	for id := range m.organization_person {
		ids = append(ids, id)
	}
	return
}

// ResetOrganizationPerson resets all changes to the "organization_person" edge.
func (m *PersonMutation) ResetOrganizationPerson() {
	m.organization_person = nil
	m.clearedorganization_person = false
	m.removedorganization_person = nil
}

// Where appends a list predicates to the PersonMutation builder.
func (m *PersonMutation) Where(ps ...predicate.Person) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PersonMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PersonMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Person, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PersonMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PersonMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Person).
func (m *PersonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.date_created != nil {
		fields = append(fields, person.FieldDateCreated)
	}
	if m.date_updated != nil {
		fields = append(fields, person.FieldDateUpdated)
	}
	if m.public_id != nil {
		fields = append(fields, person.FieldPublicID)
	}
	if m.active != nil {
		fields = append(fields, person.FieldActive)
	}
	if m.birth_date != nil {
		fields = append(fields, person.FieldBirthDate)
	}
	if m.email != nil {
		fields = append(fields, person.FieldEmail)
	}
	if m.other_id != nil {
		fields = append(fields, person.FieldOtherID)
	}
	if m.other_organization_id != nil {
		fields = append(fields, person.FieldOtherOrganizationID)
	}
	if m.first_name != nil {
		fields = append(fields, person.FieldFirstName)
	}
	if m.full_name != nil {
		fields = append(fields, person.FieldFullName)
	}
	if m.last_name != nil {
		fields = append(fields, person.FieldLastName)
	}
	if m.job_category != nil {
		fields = append(fields, person.FieldJobCategory)
	}
	if m.orcid != nil {
		fields = append(fields, person.FieldOrcid)
	}
	if m.orcid_token != nil {
		fields = append(fields, person.FieldOrcidToken)
	}
	if m.preferred_first_name != nil {
		fields = append(fields, person.FieldPreferredFirstName)
	}
	if m.preferred_last_name != nil {
		fields = append(fields, person.FieldPreferredLastName)
	}
	if m.title != nil {
		fields = append(fields, person.FieldTitle)
	}
	if m.role != nil {
		fields = append(fields, person.FieldRole)
	}
	if m.settings != nil {
		fields = append(fields, person.FieldSettings)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case person.FieldDateCreated:
		return m.DateCreated()
	case person.FieldDateUpdated:
		return m.DateUpdated()
	case person.FieldPublicID:
		return m.PublicID()
	case person.FieldActive:
		return m.Active()
	case person.FieldBirthDate:
		return m.BirthDate()
	case person.FieldEmail:
		return m.Email()
	case person.FieldOtherID:
		return m.OtherID()
	case person.FieldOtherOrganizationID:
		return m.OtherOrganizationID()
	case person.FieldFirstName:
		return m.FirstName()
	case person.FieldFullName:
		return m.FullName()
	case person.FieldLastName:
		return m.LastName()
	case person.FieldJobCategory:
		return m.JobCategory()
	case person.FieldOrcid:
		return m.Orcid()
	case person.FieldOrcidToken:
		return m.OrcidToken()
	case person.FieldPreferredFirstName:
		return m.PreferredFirstName()
	case person.FieldPreferredLastName:
		return m.PreferredLastName()
	case person.FieldTitle:
		return m.Title()
	case person.FieldRole:
		return m.Role()
	case person.FieldSettings:
		return m.Settings()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case person.FieldDateCreated:
		return m.OldDateCreated(ctx)
	case person.FieldDateUpdated:
		return m.OldDateUpdated(ctx)
	case person.FieldPublicID:
		return m.OldPublicID(ctx)
	case person.FieldActive:
		return m.OldActive(ctx)
	case person.FieldBirthDate:
		return m.OldBirthDate(ctx)
	case person.FieldEmail:
		return m.OldEmail(ctx)
	case person.FieldOtherID:
		return m.OldOtherID(ctx)
	case person.FieldOtherOrganizationID:
		return m.OldOtherOrganizationID(ctx)
	case person.FieldFirstName:
		return m.OldFirstName(ctx)
	case person.FieldFullName:
		return m.OldFullName(ctx)
	case person.FieldLastName:
		return m.OldLastName(ctx)
	case person.FieldJobCategory:
		return m.OldJobCategory(ctx)
	case person.FieldOrcid:
		return m.OldOrcid(ctx)
	case person.FieldOrcidToken:
		return m.OldOrcidToken(ctx)
	case person.FieldPreferredFirstName:
		return m.OldPreferredFirstName(ctx)
	case person.FieldPreferredLastName:
		return m.OldPreferredLastName(ctx)
	case person.FieldTitle:
		return m.OldTitle(ctx)
	case person.FieldRole:
		return m.OldRole(ctx)
	case person.FieldSettings:
		return m.OldSettings(ctx)
	}
	return nil, fmt.Errorf("unknown Person field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case person.FieldDateCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateCreated(v)
		return nil
	case person.FieldDateUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateUpdated(v)
		return nil
	case person.FieldPublicID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicID(v)
		return nil
	case person.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case person.FieldBirthDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthDate(v)
		return nil
	case person.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case person.FieldOtherID:
		v, ok := value.([]schema.IdRef)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherID(v)
		return nil
	case person.FieldOtherOrganizationID:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherOrganizationID(v)
		return nil
	case person.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case person.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case person.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case person.FieldJobCategory:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobCategory(v)
		return nil
	case person.FieldOrcid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrcid(v)
		return nil
	case person.FieldOrcidToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrcidToken(v)
		return nil
	case person.FieldPreferredFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreferredFirstName(v)
		return nil
	case person.FieldPreferredLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreferredLastName(v)
		return nil
	case person.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case person.FieldRole:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case person.FieldSettings:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettings(v)
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Person numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(person.FieldBirthDate) {
		fields = append(fields, person.FieldBirthDate)
	}
	if m.FieldCleared(person.FieldEmail) {
		fields = append(fields, person.FieldEmail)
	}
	if m.FieldCleared(person.FieldOtherID) {
		fields = append(fields, person.FieldOtherID)
	}
	if m.FieldCleared(person.FieldOtherOrganizationID) {
		fields = append(fields, person.FieldOtherOrganizationID)
	}
	if m.FieldCleared(person.FieldFirstName) {
		fields = append(fields, person.FieldFirstName)
	}
	if m.FieldCleared(person.FieldFullName) {
		fields = append(fields, person.FieldFullName)
	}
	if m.FieldCleared(person.FieldLastName) {
		fields = append(fields, person.FieldLastName)
	}
	if m.FieldCleared(person.FieldJobCategory) {
		fields = append(fields, person.FieldJobCategory)
	}
	if m.FieldCleared(person.FieldOrcid) {
		fields = append(fields, person.FieldOrcid)
	}
	if m.FieldCleared(person.FieldOrcidToken) {
		fields = append(fields, person.FieldOrcidToken)
	}
	if m.FieldCleared(person.FieldPreferredFirstName) {
		fields = append(fields, person.FieldPreferredFirstName)
	}
	if m.FieldCleared(person.FieldPreferredLastName) {
		fields = append(fields, person.FieldPreferredLastName)
	}
	if m.FieldCleared(person.FieldTitle) {
		fields = append(fields, person.FieldTitle)
	}
	if m.FieldCleared(person.FieldRole) {
		fields = append(fields, person.FieldRole)
	}
	if m.FieldCleared(person.FieldSettings) {
		fields = append(fields, person.FieldSettings)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonMutation) ClearField(name string) error {
	switch name {
	case person.FieldBirthDate:
		m.ClearBirthDate()
		return nil
	case person.FieldEmail:
		m.ClearEmail()
		return nil
	case person.FieldOtherID:
		m.ClearOtherID()
		return nil
	case person.FieldOtherOrganizationID:
		m.ClearOtherOrganizationID()
		return nil
	case person.FieldFirstName:
		m.ClearFirstName()
		return nil
	case person.FieldFullName:
		m.ClearFullName()
		return nil
	case person.FieldLastName:
		m.ClearLastName()
		return nil
	case person.FieldJobCategory:
		m.ClearJobCategory()
		return nil
	case person.FieldOrcid:
		m.ClearOrcid()
		return nil
	case person.FieldOrcidToken:
		m.ClearOrcidToken()
		return nil
	case person.FieldPreferredFirstName:
		m.ClearPreferredFirstName()
		return nil
	case person.FieldPreferredLastName:
		m.ClearPreferredLastName()
		return nil
	case person.FieldTitle:
		m.ClearTitle()
		return nil
	case person.FieldRole:
		m.ClearRole()
		return nil
	case person.FieldSettings:
		m.ClearSettings()
		return nil
	}
	return fmt.Errorf("unknown Person nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonMutation) ResetField(name string) error {
	switch name {
	case person.FieldDateCreated:
		m.ResetDateCreated()
		return nil
	case person.FieldDateUpdated:
		m.ResetDateUpdated()
		return nil
	case person.FieldPublicID:
		m.ResetPublicID()
		return nil
	case person.FieldActive:
		m.ResetActive()
		return nil
	case person.FieldBirthDate:
		m.ResetBirthDate()
		return nil
	case person.FieldEmail:
		m.ResetEmail()
		return nil
	case person.FieldOtherID:
		m.ResetOtherID()
		return nil
	case person.FieldOtherOrganizationID:
		m.ResetOtherOrganizationID()
		return nil
	case person.FieldFirstName:
		m.ResetFirstName()
		return nil
	case person.FieldFullName:
		m.ResetFullName()
		return nil
	case person.FieldLastName:
		m.ResetLastName()
		return nil
	case person.FieldJobCategory:
		m.ResetJobCategory()
		return nil
	case person.FieldOrcid:
		m.ResetOrcid()
		return nil
	case person.FieldOrcidToken:
		m.ResetOrcidToken()
		return nil
	case person.FieldPreferredFirstName:
		m.ResetPreferredFirstName()
		return nil
	case person.FieldPreferredLastName:
		m.ResetPreferredLastName()
		return nil
	case person.FieldTitle:
		m.ResetTitle()
		return nil
	case person.FieldRole:
		m.ResetRole()
		return nil
	case person.FieldSettings:
		m.ResetSettings()
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.organizations != nil {
		edges = append(edges, person.EdgeOrganizations)
	}
	if m.organization_person != nil {
		edges = append(edges, person.EdgeOrganizationPerson)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeOrganizations:
		ids := make([]ent.Value, 0, len(m.organizations))
		for id := range m.organizations {
			ids = append(ids, id)
		}
		return ids
	case person.EdgeOrganizationPerson:
		ids := make([]ent.Value, 0, len(m.organization_person))
		for id := range m.organization_person {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedorganizations != nil {
		edges = append(edges, person.EdgeOrganizations)
	}
	if m.removedorganization_person != nil {
		edges = append(edges, person.EdgeOrganizationPerson)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeOrganizations:
		ids := make([]ent.Value, 0, len(m.removedorganizations))
		for id := range m.removedorganizations {
			ids = append(ids, id)
		}
		return ids
	case person.EdgeOrganizationPerson:
		ids := make([]ent.Value, 0, len(m.removedorganization_person))
		for id := range m.removedorganization_person {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorganizations {
		edges = append(edges, person.EdgeOrganizations)
	}
	if m.clearedorganization_person {
		edges = append(edges, person.EdgeOrganizationPerson)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonMutation) EdgeCleared(name string) bool {
	switch name {
	case person.EdgeOrganizations:
		return m.clearedorganizations
	case person.EdgeOrganizationPerson:
		return m.clearedorganization_person
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Person unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonMutation) ResetEdge(name string) error {
	switch name {
	case person.EdgeOrganizations:
		m.ResetOrganizations()
		return nil
	case person.EdgeOrganizationPerson:
		m.ResetOrganizationPerson()
		return nil
	}
	return fmt.Errorf("unknown Person edge %s", name)
}
