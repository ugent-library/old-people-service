// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/old-people-service/ent/organization"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DateCreated holds the value of the "date_created" field.
	DateCreated time.Time `json:"date_created,omitempty"`
	// DateUpdated holds the value of the "date_updated" field.
	DateUpdated time.Time `json:"date_updated,omitempty"`
	// PublicID holds the value of the "public_id" field.
	PublicID string `json:"public_id,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier []string `json:"identifier,omitempty"`
	// IdentifierValues holds the value of the "identifier_values" field.
	IdentifierValues []string `json:"identifier_values,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Acronym holds the value of the "acronym" field.
	Acronym string `json:"acronym,omitempty"`
	// NameDut holds the value of the "name_dut" field.
	NameDut string `json:"name_dut,omitempty"`
	// NameEng holds the value of the "name_eng" field.
	NameEng      string `json:"name_eng,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldIdentifier, organization.FieldIdentifierValues:
			values[i] = new([]byte)
		case organization.FieldID:
			values[i] = new(sql.NullInt64)
		case organization.FieldPublicID, organization.FieldType, organization.FieldAcronym, organization.FieldNameDut, organization.FieldNameEng:
			values[i] = new(sql.NullString)
		case organization.FieldDateCreated, organization.FieldDateUpdated:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case organization.FieldDateCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_created", values[i])
			} else if value.Valid {
				o.DateCreated = value.Time
			}
		case organization.FieldDateUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_updated", values[i])
			} else if value.Valid {
				o.DateUpdated = value.Time
			}
		case organization.FieldPublicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_id", values[i])
			} else if value.Valid {
				o.PublicID = value.String
			}
		case organization.FieldIdentifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Identifier); err != nil {
					return fmt.Errorf("unmarshal field identifier: %w", err)
				}
			}
		case organization.FieldIdentifierValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field identifier_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.IdentifierValues); err != nil {
					return fmt.Errorf("unmarshal field identifier_values: %w", err)
				}
			}
		case organization.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				o.Type = value.String
			}
		case organization.FieldAcronym:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acronym", values[i])
			} else if value.Valid {
				o.Acronym = value.String
			}
		case organization.FieldNameDut:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_dut", values[i])
			} else if value.Valid {
				o.NameDut = value.String
			}
		case organization.FieldNameEng:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_eng", values[i])
			} else if value.Valid {
				o.NameEng = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Organization.
// This includes values selected through modifiers, order, etc.
func (o *Organization) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return NewOrganizationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("date_created=")
	builder.WriteString(o.DateCreated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("date_updated=")
	builder.WriteString(o.DateUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("public_id=")
	builder.WriteString(o.PublicID)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(fmt.Sprintf("%v", o.Identifier))
	builder.WriteString(", ")
	builder.WriteString("identifier_values=")
	builder.WriteString(fmt.Sprintf("%v", o.IdentifierValues))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(o.Type)
	builder.WriteString(", ")
	builder.WriteString("acronym=")
	builder.WriteString(o.Acronym)
	builder.WriteString(", ")
	builder.WriteString("name_dut=")
	builder.WriteString(o.NameDut)
	builder.WriteString(", ")
	builder.WriteString("name_eng=")
	builder.WriteString(o.NameEng)
	builder.WriteByte(')')
	return builder.String()
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization
