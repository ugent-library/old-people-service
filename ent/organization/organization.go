// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDateCreated holds the string denoting the date_created field in the database.
	FieldDateCreated = "date_created"
	// FieldDateUpdated holds the string denoting the date_updated field in the database.
	FieldDateUpdated = "date_updated"
	// FieldPublicID holds the string denoting the public_id field in the database.
	FieldPublicID = "public_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldNameDut holds the string denoting the name_dut field in the database.
	FieldNameDut = "name_dut"
	// FieldNameEng holds the string denoting the name_eng field in the database.
	FieldNameEng = "name_eng"
	// FieldOtherID holds the string denoting the other_id field in the database.
	FieldOtherID = "other_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// EdgePeople holds the string denoting the people edge name in mutations.
	EdgePeople = "people"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeOrganizationPerson holds the string denoting the organization_person edge name in mutations.
	EdgeOrganizationPerson = "organization_person"
	// Table holds the table name of the organization in the database.
	Table = "organization"
	// PeopleTable is the table that holds the people relation/edge. The primary key declared below.
	PeopleTable = "organization_person"
	// PeopleInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PeopleInverseTable = "person"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "organization"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "organization"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
	// OrganizationPersonTable is the table that holds the organization_person relation/edge.
	OrganizationPersonTable = "organization_person"
	// OrganizationPersonInverseTable is the table name for the OrganizationPerson entity.
	// It exists in this package in order to avoid circular dependency with the "organizationperson" package.
	OrganizationPersonInverseTable = "organization_person"
	// OrganizationPersonColumn is the table column denoting the organization_person relation/edge.
	OrganizationPersonColumn = "organization_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldDateCreated,
	FieldDateUpdated,
	FieldPublicID,
	FieldType,
	FieldNameDut,
	FieldNameEng,
	FieldOtherID,
	FieldParentID,
}

var (
	// PeoplePrimaryKey and PeopleColumn2 are the table columns denoting the
	// primary key for the people relation (M2M).
	PeoplePrimaryKey = []string{"person_id", "organization_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDateCreated holds the default value on creation for the "date_created" field.
	DefaultDateCreated func() time.Time
	// DefaultDateUpdated holds the default value on creation for the "date_updated" field.
	DefaultDateUpdated func() time.Time
	// UpdateDefaultDateUpdated holds the default value on update for the "date_updated" field.
	UpdateDefaultDateUpdated func() time.Time
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
)
