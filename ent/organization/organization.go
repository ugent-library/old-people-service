// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugent-library/person-service/ent/schema"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDateCreated holds the string denoting the date_created field in the database.
	FieldDateCreated = "date_created"
	// FieldDateUpdated holds the string denoting the date_updated field in the database.
	FieldDateUpdated = "date_updated"
	// FieldPublicID holds the string denoting the public_id field in the database.
	FieldPublicID = "public_id"
	// FieldGismoID holds the string denoting the gismo_id field in the database.
	FieldGismoID = "gismo_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldNameDut holds the string denoting the name_dut field in the database.
	FieldNameDut = "name_dut"
	// FieldNameEng holds the string denoting the name_eng field in the database.
	FieldNameEng = "name_eng"
	// FieldOtherID holds the string denoting the other_id field in the database.
	FieldOtherID = "other_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// EdgePeople holds the string denoting the people edge name in mutations.
	EdgePeople = "people"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeOrganizationPerson holds the string denoting the organization_person edge name in mutations.
	EdgeOrganizationPerson = "organization_person"
	// Table holds the table name of the organization in the database.
	Table = "organization"
	// PeopleTable is the table that holds the people relation/edge. The primary key declared below.
	PeopleTable = "organization_person"
	// PeopleInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PeopleInverseTable = "person"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "organization"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "organization"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
	// OrganizationPersonTable is the table that holds the organization_person relation/edge.
	OrganizationPersonTable = "organization_person"
	// OrganizationPersonInverseTable is the table name for the OrganizationPerson entity.
	// It exists in this package in order to avoid circular dependency with the "organizationperson" package.
	OrganizationPersonInverseTable = "organization_person"
	// OrganizationPersonColumn is the table column denoting the organization_person relation/edge.
	OrganizationPersonColumn = "organization_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldDateCreated,
	FieldDateUpdated,
	FieldPublicID,
	FieldGismoID,
	FieldType,
	FieldNameDut,
	FieldNameEng,
	FieldOtherID,
	FieldParentID,
}

var (
	// PeoplePrimaryKey and PeopleColumn2 are the table columns denoting the
	// primary key for the people relation (M2M).
	PeoplePrimaryKey = []string{"person_id", "organization_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDateCreated holds the default value on creation for the "date_created" field.
	DefaultDateCreated func() time.Time
	// DefaultDateUpdated holds the default value on creation for the "date_updated" field.
	DefaultDateUpdated func() time.Time
	// UpdateDefaultDateUpdated holds the default value on update for the "date_updated" field.
	UpdateDefaultDateUpdated func() time.Time
	// DefaultPublicID holds the default value on creation for the "public_id" field.
	DefaultPublicID func() string
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultOtherID holds the default value on creation for the "other_id" field.
	DefaultOtherID []schema.IdRef
)

// OrderOption defines the ordering options for the Organization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDateCreated orders the results by the date_created field.
func ByDateCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateCreated, opts...).ToFunc()
}

// ByDateUpdated orders the results by the date_updated field.
func ByDateUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateUpdated, opts...).ToFunc()
}

// ByPublicID orders the results by the public_id field.
func ByPublicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicID, opts...).ToFunc()
}

// ByGismoID orders the results by the gismo_id field.
func ByGismoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGismoID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByNameDut orders the results by the name_dut field.
func ByNameDut(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameDut, opts...).ToFunc()
}

// ByNameEng orders the results by the name_eng field.
func ByNameEng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameEng, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByPeopleCount orders the results by people count.
func ByPeopleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPeopleStep(), opts...)
	}
}

// ByPeople orders the results by people terms.
func ByPeople(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPeopleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrganizationPersonCount orders the results by organization_person count.
func ByOrganizationPersonCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationPersonStep(), opts...)
	}
}

// ByOrganizationPerson orders the results by organization_person terms.
func ByOrganizationPerson(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationPersonStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPeopleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PeopleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PeopleTable, PeoplePrimaryKey...),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
func newOrganizationPersonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationPersonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrganizationPersonTable, OrganizationPersonColumn),
	)
}
