// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/old-people-service/ent/organization"
)

// OrganizationCreate is the builder for creating a Organization entity.
type OrganizationCreate struct {
	config
	mutation *OrganizationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDateCreated sets the "date_created" field.
func (oc *OrganizationCreate) SetDateCreated(t time.Time) *OrganizationCreate {
	oc.mutation.SetDateCreated(t)
	return oc
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDateCreated(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetDateCreated(*t)
	}
	return oc
}

// SetDateUpdated sets the "date_updated" field.
func (oc *OrganizationCreate) SetDateUpdated(t time.Time) *OrganizationCreate {
	oc.mutation.SetDateUpdated(t)
	return oc
}

// SetNillableDateUpdated sets the "date_updated" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDateUpdated(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetDateUpdated(*t)
	}
	return oc
}

// SetPublicID sets the "public_id" field.
func (oc *OrganizationCreate) SetPublicID(s string) *OrganizationCreate {
	oc.mutation.SetPublicID(s)
	return oc
}

// SetNillablePublicID sets the "public_id" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillablePublicID(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetPublicID(*s)
	}
	return oc
}

// SetIdentifier sets the "identifier" field.
func (oc *OrganizationCreate) SetIdentifier(s []string) *OrganizationCreate {
	oc.mutation.SetIdentifier(s)
	return oc
}

// SetIdentifierValues sets the "identifier_values" field.
func (oc *OrganizationCreate) SetIdentifierValues(s []string) *OrganizationCreate {
	oc.mutation.SetIdentifierValues(s)
	return oc
}

// SetType sets the "type" field.
func (oc *OrganizationCreate) SetType(s string) *OrganizationCreate {
	oc.mutation.SetType(s)
	return oc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableType(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetType(*s)
	}
	return oc
}

// SetAcronym sets the "acronym" field.
func (oc *OrganizationCreate) SetAcronym(s string) *OrganizationCreate {
	oc.mutation.SetAcronym(s)
	return oc
}

// SetNillableAcronym sets the "acronym" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableAcronym(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetAcronym(*s)
	}
	return oc
}

// SetNameDut sets the "name_dut" field.
func (oc *OrganizationCreate) SetNameDut(s string) *OrganizationCreate {
	oc.mutation.SetNameDut(s)
	return oc
}

// SetNillableNameDut sets the "name_dut" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableNameDut(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetNameDut(*s)
	}
	return oc
}

// SetNameEng sets the "name_eng" field.
func (oc *OrganizationCreate) SetNameEng(s string) *OrganizationCreate {
	oc.mutation.SetNameEng(s)
	return oc
}

// SetNillableNameEng sets the "name_eng" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableNameEng(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetNameEng(*s)
	}
	return oc
}

// Mutation returns the OrganizationMutation object of the builder.
func (oc *OrganizationCreate) Mutation() *OrganizationMutation {
	return oc.mutation
}

// Save creates the Organization in the database.
func (oc *OrganizationCreate) Save(ctx context.Context) (*Organization, error) {
	oc.defaults()
	return withHooks[*Organization, OrganizationMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrganizationCreate) SaveX(ctx context.Context) *Organization {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrganizationCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrganizationCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrganizationCreate) defaults() {
	if _, ok := oc.mutation.DateCreated(); !ok {
		v := organization.DefaultDateCreated()
		oc.mutation.SetDateCreated(v)
	}
	if _, ok := oc.mutation.DateUpdated(); !ok {
		v := organization.DefaultDateUpdated()
		oc.mutation.SetDateUpdated(v)
	}
	if _, ok := oc.mutation.PublicID(); !ok {
		v := organization.DefaultPublicID()
		oc.mutation.SetPublicID(v)
	}
	if _, ok := oc.mutation.Identifier(); !ok {
		v := organization.DefaultIdentifier
		oc.mutation.SetIdentifier(v)
	}
	if _, ok := oc.mutation.IdentifierValues(); !ok {
		v := organization.DefaultIdentifierValues
		oc.mutation.SetIdentifierValues(v)
	}
	if _, ok := oc.mutation.GetType(); !ok {
		v := organization.DefaultType
		oc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrganizationCreate) check() error {
	if _, ok := oc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "Organization.date_created"`)}
	}
	if _, ok := oc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "date_updated", err: errors.New(`ent: missing required field "Organization.date_updated"`)}
	}
	if _, ok := oc.mutation.PublicID(); !ok {
		return &ValidationError{Name: "public_id", err: errors.New(`ent: missing required field "Organization.public_id"`)}
	}
	if _, ok := oc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Organization.type"`)}
	}
	return nil
}

func (oc *OrganizationCreate) sqlSave(ctx context.Context) (*Organization, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrganizationCreate) createSpec() (*Organization, *sqlgraph.CreateSpec) {
	var (
		_node = &Organization{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(organization.Table, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	)
	_spec.OnConflict = oc.conflict
	if value, ok := oc.mutation.DateCreated(); ok {
		_spec.SetField(organization.FieldDateCreated, field.TypeTime, value)
		_node.DateCreated = value
	}
	if value, ok := oc.mutation.DateUpdated(); ok {
		_spec.SetField(organization.FieldDateUpdated, field.TypeTime, value)
		_node.DateUpdated = value
	}
	if value, ok := oc.mutation.PublicID(); ok {
		_spec.SetField(organization.FieldPublicID, field.TypeString, value)
		_node.PublicID = value
	}
	if value, ok := oc.mutation.Identifier(); ok {
		_spec.SetField(organization.FieldIdentifier, field.TypeJSON, value)
		_node.Identifier = value
	}
	if value, ok := oc.mutation.IdentifierValues(); ok {
		_spec.SetField(organization.FieldIdentifierValues, field.TypeJSON, value)
		_node.IdentifierValues = value
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.SetField(organization.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := oc.mutation.Acronym(); ok {
		_spec.SetField(organization.FieldAcronym, field.TypeString, value)
		_node.Acronym = value
	}
	if value, ok := oc.mutation.NameDut(); ok {
		_spec.SetField(organization.FieldNameDut, field.TypeString, value)
		_node.NameDut = value
	}
	if value, ok := oc.mutation.NameEng(); ok {
		_spec.SetField(organization.FieldNameEng, field.TypeString, value)
		_node.NameEng = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Organization.Create().
//		SetDateCreated(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationUpsert) {
//			SetDateCreated(v+v).
//		}).
//		Exec(ctx)
func (oc *OrganizationCreate) OnConflict(opts ...sql.ConflictOption) *OrganizationUpsertOne {
	oc.conflict = opts
	return &OrganizationUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrganizationCreate) OnConflictColumns(columns ...string) *OrganizationUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrganizationUpsertOne{
		create: oc,
	}
}

type (
	// OrganizationUpsertOne is the builder for "upsert"-ing
	//  one Organization node.
	OrganizationUpsertOne struct {
		create *OrganizationCreate
	}

	// OrganizationUpsert is the "OnConflict" setter.
	OrganizationUpsert struct {
		*sql.UpdateSet
	}
)

// SetDateUpdated sets the "date_updated" field.
func (u *OrganizationUpsert) SetDateUpdated(v time.Time) *OrganizationUpsert {
	u.Set(organization.FieldDateUpdated, v)
	return u
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateDateUpdated() *OrganizationUpsert {
	u.SetExcluded(organization.FieldDateUpdated)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *OrganizationUpsert) SetIdentifier(v []string) *OrganizationUpsert {
	u.Set(organization.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateIdentifier() *OrganizationUpsert {
	u.SetExcluded(organization.FieldIdentifier)
	return u
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *OrganizationUpsert) ClearIdentifier() *OrganizationUpsert {
	u.SetNull(organization.FieldIdentifier)
	return u
}

// SetIdentifierValues sets the "identifier_values" field.
func (u *OrganizationUpsert) SetIdentifierValues(v []string) *OrganizationUpsert {
	u.Set(organization.FieldIdentifierValues, v)
	return u
}

// UpdateIdentifierValues sets the "identifier_values" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateIdentifierValues() *OrganizationUpsert {
	u.SetExcluded(organization.FieldIdentifierValues)
	return u
}

// ClearIdentifierValues clears the value of the "identifier_values" field.
func (u *OrganizationUpsert) ClearIdentifierValues() *OrganizationUpsert {
	u.SetNull(organization.FieldIdentifierValues)
	return u
}

// SetType sets the "type" field.
func (u *OrganizationUpsert) SetType(v string) *OrganizationUpsert {
	u.Set(organization.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateType() *OrganizationUpsert {
	u.SetExcluded(organization.FieldType)
	return u
}

// SetAcronym sets the "acronym" field.
func (u *OrganizationUpsert) SetAcronym(v string) *OrganizationUpsert {
	u.Set(organization.FieldAcronym, v)
	return u
}

// UpdateAcronym sets the "acronym" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateAcronym() *OrganizationUpsert {
	u.SetExcluded(organization.FieldAcronym)
	return u
}

// ClearAcronym clears the value of the "acronym" field.
func (u *OrganizationUpsert) ClearAcronym() *OrganizationUpsert {
	u.SetNull(organization.FieldAcronym)
	return u
}

// SetNameDut sets the "name_dut" field.
func (u *OrganizationUpsert) SetNameDut(v string) *OrganizationUpsert {
	u.Set(organization.FieldNameDut, v)
	return u
}

// UpdateNameDut sets the "name_dut" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateNameDut() *OrganizationUpsert {
	u.SetExcluded(organization.FieldNameDut)
	return u
}

// ClearNameDut clears the value of the "name_dut" field.
func (u *OrganizationUpsert) ClearNameDut() *OrganizationUpsert {
	u.SetNull(organization.FieldNameDut)
	return u
}

// SetNameEng sets the "name_eng" field.
func (u *OrganizationUpsert) SetNameEng(v string) *OrganizationUpsert {
	u.Set(organization.FieldNameEng, v)
	return u
}

// UpdateNameEng sets the "name_eng" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateNameEng() *OrganizationUpsert {
	u.SetExcluded(organization.FieldNameEng)
	return u
}

// ClearNameEng clears the value of the "name_eng" field.
func (u *OrganizationUpsert) ClearNameEng() *OrganizationUpsert {
	u.SetNull(organization.FieldNameEng)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrganizationUpsertOne) UpdateNewValues() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.DateCreated(); exists {
			s.SetIgnore(organization.FieldDateCreated)
		}
		if _, exists := u.create.mutation.PublicID(); exists {
			s.SetIgnore(organization.FieldPublicID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrganizationUpsertOne) Ignore() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationUpsertOne) DoNothing() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationCreate.OnConflict
// documentation for more info.
func (u *OrganizationUpsertOne) Update(set func(*OrganizationUpsert)) *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetDateUpdated sets the "date_updated" field.
func (u *OrganizationUpsertOne) SetDateUpdated(v time.Time) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDateUpdated(v)
	})
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateDateUpdated() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDateUpdated()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *OrganizationUpsertOne) SetIdentifier(v []string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateIdentifier() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIdentifier()
	})
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *OrganizationUpsertOne) ClearIdentifier() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearIdentifier()
	})
}

// SetIdentifierValues sets the "identifier_values" field.
func (u *OrganizationUpsertOne) SetIdentifierValues(v []string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIdentifierValues(v)
	})
}

// UpdateIdentifierValues sets the "identifier_values" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateIdentifierValues() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIdentifierValues()
	})
}

// ClearIdentifierValues clears the value of the "identifier_values" field.
func (u *OrganizationUpsertOne) ClearIdentifierValues() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearIdentifierValues()
	})
}

// SetType sets the "type" field.
func (u *OrganizationUpsertOne) SetType(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateType() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateType()
	})
}

// SetAcronym sets the "acronym" field.
func (u *OrganizationUpsertOne) SetAcronym(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAcronym(v)
	})
}

// UpdateAcronym sets the "acronym" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateAcronym() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAcronym()
	})
}

// ClearAcronym clears the value of the "acronym" field.
func (u *OrganizationUpsertOne) ClearAcronym() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAcronym()
	})
}

// SetNameDut sets the "name_dut" field.
func (u *OrganizationUpsertOne) SetNameDut(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetNameDut(v)
	})
}

// UpdateNameDut sets the "name_dut" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateNameDut() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateNameDut()
	})
}

// ClearNameDut clears the value of the "name_dut" field.
func (u *OrganizationUpsertOne) ClearNameDut() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearNameDut()
	})
}

// SetNameEng sets the "name_eng" field.
func (u *OrganizationUpsertOne) SetNameEng(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetNameEng(v)
	})
}

// UpdateNameEng sets the "name_eng" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateNameEng() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateNameEng()
	})
}

// ClearNameEng clears the value of the "name_eng" field.
func (u *OrganizationUpsertOne) ClearNameEng() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearNameEng()
	})
}

// Exec executes the query.
func (u *OrganizationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrganizationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrganizationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrganizationCreateBulk is the builder for creating many Organization entities in bulk.
type OrganizationCreateBulk struct {
	config
	builders []*OrganizationCreate
	conflict []sql.ConflictOption
}

// Save creates the Organization entities in the database.
func (ocb *OrganizationCreateBulk) Save(ctx context.Context) ([]*Organization, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Organization, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrganizationCreateBulk) SaveX(ctx context.Context) []*Organization {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrganizationCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrganizationCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Organization.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationUpsert) {
//			SetDateCreated(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrganizationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrganizationUpsertBulk {
	ocb.conflict = opts
	return &OrganizationUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrganizationCreateBulk) OnConflictColumns(columns ...string) *OrganizationUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrganizationUpsertBulk{
		create: ocb,
	}
}

// OrganizationUpsertBulk is the builder for "upsert"-ing
// a bulk of Organization nodes.
type OrganizationUpsertBulk struct {
	create *OrganizationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrganizationUpsertBulk) UpdateNewValues() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.DateCreated(); exists {
				s.SetIgnore(organization.FieldDateCreated)
			}
			if _, exists := b.mutation.PublicID(); exists {
				s.SetIgnore(organization.FieldPublicID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrganizationUpsertBulk) Ignore() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationUpsertBulk) DoNothing() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationCreateBulk.OnConflict
// documentation for more info.
func (u *OrganizationUpsertBulk) Update(set func(*OrganizationUpsert)) *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetDateUpdated sets the "date_updated" field.
func (u *OrganizationUpsertBulk) SetDateUpdated(v time.Time) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDateUpdated(v)
	})
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateDateUpdated() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDateUpdated()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *OrganizationUpsertBulk) SetIdentifier(v []string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateIdentifier() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIdentifier()
	})
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *OrganizationUpsertBulk) ClearIdentifier() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearIdentifier()
	})
}

// SetIdentifierValues sets the "identifier_values" field.
func (u *OrganizationUpsertBulk) SetIdentifierValues(v []string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIdentifierValues(v)
	})
}

// UpdateIdentifierValues sets the "identifier_values" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateIdentifierValues() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIdentifierValues()
	})
}

// ClearIdentifierValues clears the value of the "identifier_values" field.
func (u *OrganizationUpsertBulk) ClearIdentifierValues() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearIdentifierValues()
	})
}

// SetType sets the "type" field.
func (u *OrganizationUpsertBulk) SetType(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateType() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateType()
	})
}

// SetAcronym sets the "acronym" field.
func (u *OrganizationUpsertBulk) SetAcronym(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAcronym(v)
	})
}

// UpdateAcronym sets the "acronym" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateAcronym() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAcronym()
	})
}

// ClearAcronym clears the value of the "acronym" field.
func (u *OrganizationUpsertBulk) ClearAcronym() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAcronym()
	})
}

// SetNameDut sets the "name_dut" field.
func (u *OrganizationUpsertBulk) SetNameDut(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetNameDut(v)
	})
}

// UpdateNameDut sets the "name_dut" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateNameDut() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateNameDut()
	})
}

// ClearNameDut clears the value of the "name_dut" field.
func (u *OrganizationUpsertBulk) ClearNameDut() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearNameDut()
	})
}

// SetNameEng sets the "name_eng" field.
func (u *OrganizationUpsertBulk) SetNameEng(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetNameEng(v)
	})
}

// UpdateNameEng sets the "name_eng" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateNameEng() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateNameEng()
	})
}

// ClearNameEng clears the value of the "name_eng" field.
func (u *OrganizationUpsertBulk) ClearNameEng() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearNameEng()
	})
}

// Exec executes the query.
func (u *OrganizationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrganizationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
