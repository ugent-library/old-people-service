// Code generated by ent, DO NOT EDIT.

package organizationparent

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the organizationparent type in the database.
	Label = "organization_parent"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDateCreated holds the string denoting the date_created field in the database.
	FieldDateCreated = "date_created"
	// FieldDateUpdated holds the string denoting the date_updated field in the database.
	FieldDateUpdated = "date_updated"
	// FieldParentOrganizationID holds the string denoting the parent_organization_id field in the database.
	FieldParentOrganizationID = "parent_organization_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldUntil holds the string denoting the until field in the database.
	FieldUntil = "until"
	// Table holds the table name of the organizationparent in the database.
	Table = "organization_parent"
)

// Columns holds all SQL columns for organizationparent fields.
var Columns = []string{
	FieldID,
	FieldDateCreated,
	FieldDateUpdated,
	FieldParentOrganizationID,
	FieldOrganizationID,
	FieldFrom,
	FieldUntil,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDateCreated holds the default value on creation for the "date_created" field.
	DefaultDateCreated func() time.Time
	// DefaultDateUpdated holds the default value on creation for the "date_updated" field.
	DefaultDateUpdated func() time.Time
	// UpdateDefaultDateUpdated holds the default value on update for the "date_updated" field.
	UpdateDefaultDateUpdated func() time.Time
	// DefaultFrom holds the default value on creation for the "from" field.
	DefaultFrom func() time.Time
	// DefaultUntil holds the default value on creation for the "until" field.
	DefaultUntil func() time.Time
	// UpdateDefaultUntil holds the default value on update for the "until" field.
	UpdateDefaultUntil func() time.Time
)

// OrderOption defines the ordering options for the OrganizationParent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDateCreated orders the results by the date_created field.
func ByDateCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateCreated, opts...).ToFunc()
}

// ByDateUpdated orders the results by the date_updated field.
func ByDateUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateUpdated, opts...).ToFunc()
}

// ByParentOrganizationID orders the results by the parent_organization_id field.
func ByParentOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentOrganizationID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByFrom orders the results by the from field.
func ByFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrom, opts...).ToFunc()
}

// ByUntil orders the results by the until field.
func ByUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUntil, opts...).ToFunc()
}
