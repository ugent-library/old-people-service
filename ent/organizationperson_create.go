// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/people-service/ent/organizationperson"
)

// OrganizationPersonCreate is the builder for creating a OrganizationPerson entity.
type OrganizationPersonCreate struct {
	config
	mutation *OrganizationPersonMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDateCreated sets the "date_created" field.
func (opc *OrganizationPersonCreate) SetDateCreated(t time.Time) *OrganizationPersonCreate {
	opc.mutation.SetDateCreated(t)
	return opc
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (opc *OrganizationPersonCreate) SetNillableDateCreated(t *time.Time) *OrganizationPersonCreate {
	if t != nil {
		opc.SetDateCreated(*t)
	}
	return opc
}

// SetDateUpdated sets the "date_updated" field.
func (opc *OrganizationPersonCreate) SetDateUpdated(t time.Time) *OrganizationPersonCreate {
	opc.mutation.SetDateUpdated(t)
	return opc
}

// SetNillableDateUpdated sets the "date_updated" field if the given value is not nil.
func (opc *OrganizationPersonCreate) SetNillableDateUpdated(t *time.Time) *OrganizationPersonCreate {
	if t != nil {
		opc.SetDateUpdated(*t)
	}
	return opc
}

// SetOrganizationID sets the "organization_id" field.
func (opc *OrganizationPersonCreate) SetOrganizationID(i int) *OrganizationPersonCreate {
	opc.mutation.SetOrganizationID(i)
	return opc
}

// SetPersonID sets the "person_id" field.
func (opc *OrganizationPersonCreate) SetPersonID(i int) *OrganizationPersonCreate {
	opc.mutation.SetPersonID(i)
	return opc
}

// SetFrom sets the "from" field.
func (opc *OrganizationPersonCreate) SetFrom(t time.Time) *OrganizationPersonCreate {
	opc.mutation.SetFrom(t)
	return opc
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (opc *OrganizationPersonCreate) SetNillableFrom(t *time.Time) *OrganizationPersonCreate {
	if t != nil {
		opc.SetFrom(*t)
	}
	return opc
}

// SetUntil sets the "until" field.
func (opc *OrganizationPersonCreate) SetUntil(t time.Time) *OrganizationPersonCreate {
	opc.mutation.SetUntil(t)
	return opc
}

// SetNillableUntil sets the "until" field if the given value is not nil.
func (opc *OrganizationPersonCreate) SetNillableUntil(t *time.Time) *OrganizationPersonCreate {
	if t != nil {
		opc.SetUntil(*t)
	}
	return opc
}

// Mutation returns the OrganizationPersonMutation object of the builder.
func (opc *OrganizationPersonCreate) Mutation() *OrganizationPersonMutation {
	return opc.mutation
}

// Save creates the OrganizationPerson in the database.
func (opc *OrganizationPersonCreate) Save(ctx context.Context) (*OrganizationPerson, error) {
	opc.defaults()
	return withHooks[*OrganizationPerson, OrganizationPersonMutation](ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrganizationPersonCreate) SaveX(ctx context.Context) *OrganizationPerson {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrganizationPersonCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrganizationPersonCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OrganizationPersonCreate) defaults() {
	if _, ok := opc.mutation.DateCreated(); !ok {
		v := organizationperson.DefaultDateCreated()
		opc.mutation.SetDateCreated(v)
	}
	if _, ok := opc.mutation.DateUpdated(); !ok {
		v := organizationperson.DefaultDateUpdated()
		opc.mutation.SetDateUpdated(v)
	}
	if _, ok := opc.mutation.From(); !ok {
		v := organizationperson.DefaultFrom()
		opc.mutation.SetFrom(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrganizationPersonCreate) check() error {
	if _, ok := opc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "OrganizationPerson.date_created"`)}
	}
	if _, ok := opc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "date_updated", err: errors.New(`ent: missing required field "OrganizationPerson.date_updated"`)}
	}
	if _, ok := opc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "OrganizationPerson.organization_id"`)}
	}
	if _, ok := opc.mutation.PersonID(); !ok {
		return &ValidationError{Name: "person_id", err: errors.New(`ent: missing required field "OrganizationPerson.person_id"`)}
	}
	if _, ok := opc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "OrganizationPerson.from"`)}
	}
	return nil
}

func (opc *OrganizationPersonCreate) sqlSave(ctx context.Context) (*OrganizationPerson, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OrganizationPersonCreate) createSpec() (*OrganizationPerson, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationPerson{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(organizationperson.Table, sqlgraph.NewFieldSpec(organizationperson.FieldID, field.TypeInt))
	)
	_spec.OnConflict = opc.conflict
	if value, ok := opc.mutation.DateCreated(); ok {
		_spec.SetField(organizationperson.FieldDateCreated, field.TypeTime, value)
		_node.DateCreated = value
	}
	if value, ok := opc.mutation.DateUpdated(); ok {
		_spec.SetField(organizationperson.FieldDateUpdated, field.TypeTime, value)
		_node.DateUpdated = value
	}
	if value, ok := opc.mutation.OrganizationID(); ok {
		_spec.SetField(organizationperson.FieldOrganizationID, field.TypeInt, value)
		_node.OrganizationID = value
	}
	if value, ok := opc.mutation.PersonID(); ok {
		_spec.SetField(organizationperson.FieldPersonID, field.TypeInt, value)
		_node.PersonID = value
	}
	if value, ok := opc.mutation.From(); ok {
		_spec.SetField(organizationperson.FieldFrom, field.TypeTime, value)
		_node.From = value
	}
	if value, ok := opc.mutation.Until(); ok {
		_spec.SetField(organizationperson.FieldUntil, field.TypeTime, value)
		_node.Until = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrganizationPerson.Create().
//		SetDateCreated(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationPersonUpsert) {
//			SetDateCreated(v+v).
//		}).
//		Exec(ctx)
func (opc *OrganizationPersonCreate) OnConflict(opts ...sql.ConflictOption) *OrganizationPersonUpsertOne {
	opc.conflict = opts
	return &OrganizationPersonUpsertOne{
		create: opc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrganizationPerson.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opc *OrganizationPersonCreate) OnConflictColumns(columns ...string) *OrganizationPersonUpsertOne {
	opc.conflict = append(opc.conflict, sql.ConflictColumns(columns...))
	return &OrganizationPersonUpsertOne{
		create: opc,
	}
}

type (
	// OrganizationPersonUpsertOne is the builder for "upsert"-ing
	//  one OrganizationPerson node.
	OrganizationPersonUpsertOne struct {
		create *OrganizationPersonCreate
	}

	// OrganizationPersonUpsert is the "OnConflict" setter.
	OrganizationPersonUpsert struct {
		*sql.UpdateSet
	}
)

// SetDateUpdated sets the "date_updated" field.
func (u *OrganizationPersonUpsert) SetDateUpdated(v time.Time) *OrganizationPersonUpsert {
	u.Set(organizationperson.FieldDateUpdated, v)
	return u
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *OrganizationPersonUpsert) UpdateDateUpdated() *OrganizationPersonUpsert {
	u.SetExcluded(organizationperson.FieldDateUpdated)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationPersonUpsert) SetOrganizationID(v int) *OrganizationPersonUpsert {
	u.Set(organizationperson.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationPersonUpsert) UpdateOrganizationID() *OrganizationPersonUpsert {
	u.SetExcluded(organizationperson.FieldOrganizationID)
	return u
}

// AddOrganizationID adds v to the "organization_id" field.
func (u *OrganizationPersonUpsert) AddOrganizationID(v int) *OrganizationPersonUpsert {
	u.Add(organizationperson.FieldOrganizationID, v)
	return u
}

// SetPersonID sets the "person_id" field.
func (u *OrganizationPersonUpsert) SetPersonID(v int) *OrganizationPersonUpsert {
	u.Set(organizationperson.FieldPersonID, v)
	return u
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *OrganizationPersonUpsert) UpdatePersonID() *OrganizationPersonUpsert {
	u.SetExcluded(organizationperson.FieldPersonID)
	return u
}

// AddPersonID adds v to the "person_id" field.
func (u *OrganizationPersonUpsert) AddPersonID(v int) *OrganizationPersonUpsert {
	u.Add(organizationperson.FieldPersonID, v)
	return u
}

// SetFrom sets the "from" field.
func (u *OrganizationPersonUpsert) SetFrom(v time.Time) *OrganizationPersonUpsert {
	u.Set(organizationperson.FieldFrom, v)
	return u
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *OrganizationPersonUpsert) UpdateFrom() *OrganizationPersonUpsert {
	u.SetExcluded(organizationperson.FieldFrom)
	return u
}

// SetUntil sets the "until" field.
func (u *OrganizationPersonUpsert) SetUntil(v time.Time) *OrganizationPersonUpsert {
	u.Set(organizationperson.FieldUntil, v)
	return u
}

// UpdateUntil sets the "until" field to the value that was provided on create.
func (u *OrganizationPersonUpsert) UpdateUntil() *OrganizationPersonUpsert {
	u.SetExcluded(organizationperson.FieldUntil)
	return u
}

// ClearUntil clears the value of the "until" field.
func (u *OrganizationPersonUpsert) ClearUntil() *OrganizationPersonUpsert {
	u.SetNull(organizationperson.FieldUntil)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrganizationPerson.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrganizationPersonUpsertOne) UpdateNewValues() *OrganizationPersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.DateCreated(); exists {
			s.SetIgnore(organizationperson.FieldDateCreated)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrganizationPerson.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrganizationPersonUpsertOne) Ignore() *OrganizationPersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationPersonUpsertOne) DoNothing() *OrganizationPersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationPersonCreate.OnConflict
// documentation for more info.
func (u *OrganizationPersonUpsertOne) Update(set func(*OrganizationPersonUpsert)) *OrganizationPersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationPersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetDateUpdated sets the "date_updated" field.
func (u *OrganizationPersonUpsertOne) SetDateUpdated(v time.Time) *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetDateUpdated(v)
	})
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *OrganizationPersonUpsertOne) UpdateDateUpdated() *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdateDateUpdated()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationPersonUpsertOne) SetOrganizationID(v int) *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetOrganizationID(v)
	})
}

// AddOrganizationID adds v to the "organization_id" field.
func (u *OrganizationPersonUpsertOne) AddOrganizationID(v int) *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.AddOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationPersonUpsertOne) UpdateOrganizationID() *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetPersonID sets the "person_id" field.
func (u *OrganizationPersonUpsertOne) SetPersonID(v int) *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetPersonID(v)
	})
}

// AddPersonID adds v to the "person_id" field.
func (u *OrganizationPersonUpsertOne) AddPersonID(v int) *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.AddPersonID(v)
	})
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *OrganizationPersonUpsertOne) UpdatePersonID() *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdatePersonID()
	})
}

// SetFrom sets the "from" field.
func (u *OrganizationPersonUpsertOne) SetFrom(v time.Time) *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *OrganizationPersonUpsertOne) UpdateFrom() *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdateFrom()
	})
}

// SetUntil sets the "until" field.
func (u *OrganizationPersonUpsertOne) SetUntil(v time.Time) *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetUntil(v)
	})
}

// UpdateUntil sets the "until" field to the value that was provided on create.
func (u *OrganizationPersonUpsertOne) UpdateUntil() *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdateUntil()
	})
}

// ClearUntil clears the value of the "until" field.
func (u *OrganizationPersonUpsertOne) ClearUntil() *OrganizationPersonUpsertOne {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.ClearUntil()
	})
}

// Exec executes the query.
func (u *OrganizationPersonUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationPersonCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationPersonUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrganizationPersonUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrganizationPersonUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrganizationPersonCreateBulk is the builder for creating many OrganizationPerson entities in bulk.
type OrganizationPersonCreateBulk struct {
	config
	builders []*OrganizationPersonCreate
	conflict []sql.ConflictOption
}

// Save creates the OrganizationPerson entities in the database.
func (opcb *OrganizationPersonCreateBulk) Save(ctx context.Context) ([]*OrganizationPerson, error) {
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrganizationPerson, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationPersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrganizationPersonCreateBulk) SaveX(ctx context.Context) []*OrganizationPerson {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrganizationPersonCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrganizationPersonCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrganizationPerson.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationPersonUpsert) {
//			SetDateCreated(v+v).
//		}).
//		Exec(ctx)
func (opcb *OrganizationPersonCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrganizationPersonUpsertBulk {
	opcb.conflict = opts
	return &OrganizationPersonUpsertBulk{
		create: opcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrganizationPerson.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opcb *OrganizationPersonCreateBulk) OnConflictColumns(columns ...string) *OrganizationPersonUpsertBulk {
	opcb.conflict = append(opcb.conflict, sql.ConflictColumns(columns...))
	return &OrganizationPersonUpsertBulk{
		create: opcb,
	}
}

// OrganizationPersonUpsertBulk is the builder for "upsert"-ing
// a bulk of OrganizationPerson nodes.
type OrganizationPersonUpsertBulk struct {
	create *OrganizationPersonCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrganizationPerson.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrganizationPersonUpsertBulk) UpdateNewValues() *OrganizationPersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.DateCreated(); exists {
				s.SetIgnore(organizationperson.FieldDateCreated)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrganizationPerson.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrganizationPersonUpsertBulk) Ignore() *OrganizationPersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationPersonUpsertBulk) DoNothing() *OrganizationPersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationPersonCreateBulk.OnConflict
// documentation for more info.
func (u *OrganizationPersonUpsertBulk) Update(set func(*OrganizationPersonUpsert)) *OrganizationPersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationPersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetDateUpdated sets the "date_updated" field.
func (u *OrganizationPersonUpsertBulk) SetDateUpdated(v time.Time) *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetDateUpdated(v)
	})
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *OrganizationPersonUpsertBulk) UpdateDateUpdated() *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdateDateUpdated()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationPersonUpsertBulk) SetOrganizationID(v int) *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetOrganizationID(v)
	})
}

// AddOrganizationID adds v to the "organization_id" field.
func (u *OrganizationPersonUpsertBulk) AddOrganizationID(v int) *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.AddOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationPersonUpsertBulk) UpdateOrganizationID() *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetPersonID sets the "person_id" field.
func (u *OrganizationPersonUpsertBulk) SetPersonID(v int) *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetPersonID(v)
	})
}

// AddPersonID adds v to the "person_id" field.
func (u *OrganizationPersonUpsertBulk) AddPersonID(v int) *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.AddPersonID(v)
	})
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *OrganizationPersonUpsertBulk) UpdatePersonID() *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdatePersonID()
	})
}

// SetFrom sets the "from" field.
func (u *OrganizationPersonUpsertBulk) SetFrom(v time.Time) *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *OrganizationPersonUpsertBulk) UpdateFrom() *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdateFrom()
	})
}

// SetUntil sets the "until" field.
func (u *OrganizationPersonUpsertBulk) SetUntil(v time.Time) *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.SetUntil(v)
	})
}

// UpdateUntil sets the "until" field to the value that was provided on create.
func (u *OrganizationPersonUpsertBulk) UpdateUntil() *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.UpdateUntil()
	})
}

// ClearUntil clears the value of the "until" field.
func (u *OrganizationPersonUpsertBulk) ClearUntil() *OrganizationPersonUpsertBulk {
	return u.Update(func(s *OrganizationPersonUpsert) {
		s.ClearUntil()
	})
}

// Exec executes the query.
func (u *OrganizationPersonUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrganizationPersonCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationPersonCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationPersonUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
