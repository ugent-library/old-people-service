// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/people/ent/person"
	"github.com/ugent-library/people/ent/schema"
)

// Person is the model entity for the Person schema.
type Person struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// DateCreated holds the value of the "date_created" field.
	DateCreated time.Time `json:"date_created,omitempty"`
	// DateUpdated holds the value of the "date_updated" field.
	DateUpdated time.Time `json:"date_updated,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// BirthDate holds the value of the "birth_date" field.
	BirthDate string `json:"birth_date,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// OtherID holds the value of the "other_id" field.
	OtherID []schema.IdRef `json:"other_id,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID []string `json:"organization_id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Category holds the value of the "category" field.
	Category []string `json:"category,omitempty"`
	// Orcid holds the value of the "orcid" field.
	Orcid string `json:"orcid,omitempty"`
	// OrcidToken holds the value of the "orcid_token" field.
	OrcidToken string `json:"orcid_token,omitempty"`
	// PreferredFirstName holds the value of the "preferred_first_name" field.
	PreferredFirstName string `json:"preferred_first_name,omitempty"`
	// PreferredLastName holds the value of the "preferred_last_name" field.
	PreferredLastName string `json:"preferred_last_name,omitempty"`
	// JobTitle holds the value of the "job_title" field.
	JobTitle string `json:"job_title,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Person) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case person.FieldOtherID, person.FieldOrganizationID, person.FieldCategory:
			values[i] = new([]byte)
		case person.FieldActive:
			values[i] = new(sql.NullBool)
		case person.FieldID, person.FieldBirthDate, person.FieldEmail, person.FieldFirstName, person.FieldFullName, person.FieldLastName, person.FieldOrcid, person.FieldOrcidToken, person.FieldPreferredFirstName, person.FieldPreferredLastName, person.FieldJobTitle:
			values[i] = new(sql.NullString)
		case person.FieldDateCreated, person.FieldDateUpdated:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Person", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Person fields.
func (pe *Person) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case person.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pe.ID = value.String
			}
		case person.FieldDateCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_created", values[i])
			} else if value.Valid {
				pe.DateCreated = value.Time
			}
		case person.FieldDateUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_updated", values[i])
			} else if value.Valid {
				pe.DateUpdated = value.Time
			}
		case person.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				pe.Active = value.Bool
			}
		case person.FieldBirthDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				pe.BirthDate = value.String
			}
		case person.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pe.Email = value.String
			}
		case person.FieldOtherID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field other_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.OtherID); err != nil {
					return fmt.Errorf("unmarshal field other_id: %w", err)
				}
			}
		case person.FieldOrganizationID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.OrganizationID); err != nil {
					return fmt.Errorf("unmarshal field organization_id: %w", err)
				}
			}
		case person.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				pe.FirstName = value.String
			}
		case person.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				pe.FullName = value.String
			}
		case person.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				pe.LastName = value.String
			}
		case person.FieldCategory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.Category); err != nil {
					return fmt.Errorf("unmarshal field category: %w", err)
				}
			}
		case person.FieldOrcid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field orcid", values[i])
			} else if value.Valid {
				pe.Orcid = value.String
			}
		case person.FieldOrcidToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field orcid_token", values[i])
			} else if value.Valid {
				pe.OrcidToken = value.String
			}
		case person.FieldPreferredFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_first_name", values[i])
			} else if value.Valid {
				pe.PreferredFirstName = value.String
			}
		case person.FieldPreferredLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_last_name", values[i])
			} else if value.Valid {
				pe.PreferredLastName = value.String
			}
		case person.FieldJobTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_title", values[i])
			} else if value.Valid {
				pe.JobTitle = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Person.
// Note that you need to call Person.Unwrap() before calling this method if this Person
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Person) Update() *PersonUpdateOne {
	return NewPersonClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Person entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Person) Unwrap() *Person {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Person is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Person) String() string {
	var builder strings.Builder
	builder.WriteString("Person(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("date_created=")
	builder.WriteString(pe.DateCreated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("date_updated=")
	builder.WriteString(pe.DateUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", pe.Active))
	builder.WriteString(", ")
	builder.WriteString("birth_date=")
	builder.WriteString(pe.BirthDate)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pe.Email)
	builder.WriteString(", ")
	builder.WriteString("other_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.OtherID))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(pe.FirstName)
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(pe.FullName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(pe.LastName)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", pe.Category))
	builder.WriteString(", ")
	builder.WriteString("orcid=")
	builder.WriteString(pe.Orcid)
	builder.WriteString(", ")
	builder.WriteString("orcid_token=")
	builder.WriteString(pe.OrcidToken)
	builder.WriteString(", ")
	builder.WriteString("preferred_first_name=")
	builder.WriteString(pe.PreferredFirstName)
	builder.WriteString(", ")
	builder.WriteString("preferred_last_name=")
	builder.WriteString(pe.PreferredLastName)
	builder.WriteString(", ")
	builder.WriteString("job_title=")
	builder.WriteString(pe.JobTitle)
	builder.WriteByte(')')
	return builder.String()
}

// Persons is a parsable slice of Person.
type Persons []*Person
