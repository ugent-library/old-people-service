// Code generated by ent, DO NOT EDIT.

package person

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugent-library/people-service/ent/schema"
)

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDateCreated holds the string denoting the date_created field in the database.
	FieldDateCreated = "date_created"
	// FieldDateUpdated holds the string denoting the date_updated field in the database.
	FieldDateUpdated = "date_updated"
	// FieldPublicID holds the string denoting the public_id field in the database.
	FieldPublicID = "public_id"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldGivenName holds the string denoting the given_name field in the database.
	FieldGivenName = "given_name"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFamilyName holds the string denoting the family_name field in the database.
	FieldFamilyName = "family_name"
	// FieldJobCategory holds the string denoting the job_category field in the database.
	FieldJobCategory = "job_category"
	// FieldPreferredGivenName holds the string denoting the preferred_given_name field in the database.
	FieldPreferredGivenName = "preferred_given_name"
	// FieldPreferredFamilyName holds the string denoting the preferred_family_name field in the database.
	FieldPreferredFamilyName = "preferred_family_name"
	// FieldHonorificPrefix holds the string denoting the honorific_prefix field in the database.
	FieldHonorificPrefix = "honorific_prefix"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldSettings holds the string denoting the settings field in the database.
	FieldSettings = "settings"
	// FieldObjectClass holds the string denoting the object_class field in the database.
	FieldObjectClass = "object_class"
	// FieldExpirationDate holds the string denoting the expiration_date field in the database.
	FieldExpirationDate = "expiration_date"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// EdgeOrganizations holds the string denoting the organizations edge name in mutations.
	EdgeOrganizations = "organizations"
	// EdgeOrganizationPerson holds the string denoting the organization_person edge name in mutations.
	EdgeOrganizationPerson = "organization_person"
	// Table holds the table name of the person in the database.
	Table = "person"
	// OrganizationsTable is the table that holds the organizations relation/edge. The primary key declared below.
	OrganizationsTable = "organization_person"
	// OrganizationsInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationsInverseTable = "organization"
	// OrganizationPersonTable is the table that holds the organization_person relation/edge.
	OrganizationPersonTable = "organization_person"
	// OrganizationPersonInverseTable is the table name for the OrganizationPerson entity.
	// It exists in this package in order to avoid circular dependency with the "organizationperson" package.
	OrganizationPersonInverseTable = "organization_person"
	// OrganizationPersonColumn is the table column denoting the organization_person relation/edge.
	OrganizationPersonColumn = "person_id"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
	FieldDateCreated,
	FieldDateUpdated,
	FieldPublicID,
	FieldActive,
	FieldBirthDate,
	FieldEmail,
	FieldIdentifier,
	FieldGivenName,
	FieldName,
	FieldFamilyName,
	FieldJobCategory,
	FieldPreferredGivenName,
	FieldPreferredFamilyName,
	FieldHonorificPrefix,
	FieldRole,
	FieldSettings,
	FieldObjectClass,
	FieldExpirationDate,
	FieldToken,
}

var (
	// OrganizationsPrimaryKey and OrganizationsColumn2 are the table columns denoting the
	// primary key for the organizations relation (M2M).
	OrganizationsPrimaryKey = []string{"person_id", "organization_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDateCreated holds the default value on creation for the "date_created" field.
	DefaultDateCreated func() time.Time
	// DefaultDateUpdated holds the default value on creation for the "date_updated" field.
	DefaultDateUpdated func() time.Time
	// UpdateDefaultDateUpdated holds the default value on update for the "date_updated" field.
	UpdateDefaultDateUpdated func() time.Time
	// DefaultPublicID holds the default value on creation for the "public_id" field.
	DefaultPublicID func() string
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultIdentifier holds the default value on creation for the "identifier" field.
	DefaultIdentifier schema.TypeVals
	// DefaultJobCategory holds the default value on creation for the "job_category" field.
	DefaultJobCategory []string
	// DefaultRole holds the default value on creation for the "role" field.
	DefaultRole []string
	// DefaultSettings holds the default value on creation for the "settings" field.
	DefaultSettings map[string]string
	// DefaultObjectClass holds the default value on creation for the "object_class" field.
	DefaultObjectClass []string
	// DefaultToken holds the default value on creation for the "token" field.
	DefaultToken schema.TypeVals
)

// OrderOption defines the ordering options for the Person queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDateCreated orders the results by the date_created field.
func ByDateCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateCreated, opts...).ToFunc()
}

// ByDateUpdated orders the results by the date_updated field.
func ByDateUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateUpdated, opts...).ToFunc()
}

// ByPublicID orders the results by the public_id field.
func ByPublicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicID, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByGivenName orders the results by the given_name field.
func ByGivenName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGivenName, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFamilyName orders the results by the family_name field.
func ByFamilyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFamilyName, opts...).ToFunc()
}

// ByPreferredGivenName orders the results by the preferred_given_name field.
func ByPreferredGivenName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreferredGivenName, opts...).ToFunc()
}

// ByPreferredFamilyName orders the results by the preferred_family_name field.
func ByPreferredFamilyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreferredFamilyName, opts...).ToFunc()
}

// ByHonorificPrefix orders the results by the honorific_prefix field.
func ByHonorificPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHonorificPrefix, opts...).ToFunc()
}

// ByExpirationDate orders the results by the expiration_date field.
func ByExpirationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationDate, opts...).ToFunc()
}

// ByOrganizationsCount orders the results by organizations count.
func ByOrganizationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationsStep(), opts...)
	}
}

// ByOrganizations orders the results by organizations terms.
func ByOrganizations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrganizationPersonCount orders the results by organization_person count.
func ByOrganizationPersonCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationPersonStep(), opts...)
	}
}

// ByOrganizationPerson orders the results by organization_person terms.
func ByOrganizationPerson(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationPersonStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganizationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, OrganizationsTable, OrganizationsPrimaryKey...),
	)
}
func newOrganizationPersonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationPersonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrganizationPersonTable, OrganizationPersonColumn),
	)
}
