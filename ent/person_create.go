// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/people/ent/person"
	"github.com/ugent-library/people/ent/schema"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
}

// SetDateCreated sets the "date_created" field.
func (pc *PersonCreate) SetDateCreated(t time.Time) *PersonCreate {
	pc.mutation.SetDateCreated(t)
	return pc
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDateCreated(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDateCreated(*t)
	}
	return pc
}

// SetDateUpdated sets the "date_updated" field.
func (pc *PersonCreate) SetDateUpdated(t time.Time) *PersonCreate {
	pc.mutation.SetDateUpdated(t)
	return pc
}

// SetNillableDateUpdated sets the "date_updated" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDateUpdated(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDateUpdated(*t)
	}
	return pc
}

// SetActive sets the "active" field.
func (pc *PersonCreate) SetActive(b bool) *PersonCreate {
	pc.mutation.SetActive(b)
	return pc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pc *PersonCreate) SetNillableActive(b *bool) *PersonCreate {
	if b != nil {
		pc.SetActive(*b)
	}
	return pc
}

// SetBirthDate sets the "birth_date" field.
func (pc *PersonCreate) SetBirthDate(s string) *PersonCreate {
	pc.mutation.SetBirthDate(s)
	return pc
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pc *PersonCreate) SetNillableBirthDate(s *string) *PersonCreate {
	if s != nil {
		pc.SetBirthDate(*s)
	}
	return pc
}

// SetEmail sets the "email" field.
func (pc *PersonCreate) SetEmail(s string) *PersonCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pc *PersonCreate) SetNillableEmail(s *string) *PersonCreate {
	if s != nil {
		pc.SetEmail(*s)
	}
	return pc
}

// SetOtherID sets the "other_id" field.
func (pc *PersonCreate) SetOtherID(sr []schema.IdRef) *PersonCreate {
	pc.mutation.SetOtherID(sr)
	return pc
}

// SetOrganizationID sets the "organization_id" field.
func (pc *PersonCreate) SetOrganizationID(s []string) *PersonCreate {
	pc.mutation.SetOrganizationID(s)
	return pc
}

// SetFirstName sets the "first_name" field.
func (pc *PersonCreate) SetFirstName(s string) *PersonCreate {
	pc.mutation.SetFirstName(s)
	return pc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableFirstName(s *string) *PersonCreate {
	if s != nil {
		pc.SetFirstName(*s)
	}
	return pc
}

// SetFullName sets the "full_name" field.
func (pc *PersonCreate) SetFullName(s string) *PersonCreate {
	pc.mutation.SetFullName(s)
	return pc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableFullName(s *string) *PersonCreate {
	if s != nil {
		pc.SetFullName(*s)
	}
	return pc
}

// SetLastName sets the "last_name" field.
func (pc *PersonCreate) SetLastName(s string) *PersonCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableLastName(s *string) *PersonCreate {
	if s != nil {
		pc.SetLastName(*s)
	}
	return pc
}

// SetJobCategory sets the "job_category" field.
func (pc *PersonCreate) SetJobCategory(s []string) *PersonCreate {
	pc.mutation.SetJobCategory(s)
	return pc
}

// SetOrcid sets the "orcid" field.
func (pc *PersonCreate) SetOrcid(s string) *PersonCreate {
	pc.mutation.SetOrcid(s)
	return pc
}

// SetNillableOrcid sets the "orcid" field if the given value is not nil.
func (pc *PersonCreate) SetNillableOrcid(s *string) *PersonCreate {
	if s != nil {
		pc.SetOrcid(*s)
	}
	return pc
}

// SetOrcidToken sets the "orcid_token" field.
func (pc *PersonCreate) SetOrcidToken(s string) *PersonCreate {
	pc.mutation.SetOrcidToken(s)
	return pc
}

// SetNillableOrcidToken sets the "orcid_token" field if the given value is not nil.
func (pc *PersonCreate) SetNillableOrcidToken(s *string) *PersonCreate {
	if s != nil {
		pc.SetOrcidToken(*s)
	}
	return pc
}

// SetPreferredFirstName sets the "preferred_first_name" field.
func (pc *PersonCreate) SetPreferredFirstName(s string) *PersonCreate {
	pc.mutation.SetPreferredFirstName(s)
	return pc
}

// SetNillablePreferredFirstName sets the "preferred_first_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillablePreferredFirstName(s *string) *PersonCreate {
	if s != nil {
		pc.SetPreferredFirstName(*s)
	}
	return pc
}

// SetPreferredLastName sets the "preferred_last_name" field.
func (pc *PersonCreate) SetPreferredLastName(s string) *PersonCreate {
	pc.mutation.SetPreferredLastName(s)
	return pc
}

// SetNillablePreferredLastName sets the "preferred_last_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillablePreferredLastName(s *string) *PersonCreate {
	if s != nil {
		pc.SetPreferredLastName(*s)
	}
	return pc
}

// SetJobTitle sets the "job_title" field.
func (pc *PersonCreate) SetJobTitle(s string) *PersonCreate {
	pc.mutation.SetJobTitle(s)
	return pc
}

// SetNillableJobTitle sets the "job_title" field if the given value is not nil.
func (pc *PersonCreate) SetNillableJobTitle(s *string) *PersonCreate {
	if s != nil {
		pc.SetJobTitle(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PersonCreate) SetID(s string) *PersonCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PersonCreate) SetNillableID(s *string) *PersonCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	pc.defaults()
	return withHooks[*Person, PersonMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonCreate) defaults() {
	if _, ok := pc.mutation.DateCreated(); !ok {
		v := person.DefaultDateCreated()
		pc.mutation.SetDateCreated(v)
	}
	if _, ok := pc.mutation.DateUpdated(); !ok {
		v := person.DefaultDateUpdated()
		pc.mutation.SetDateUpdated(v)
	}
	if _, ok := pc.mutation.Active(); !ok {
		v := person.DefaultActive
		pc.mutation.SetActive(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := person.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "Person.date_created"`)}
	}
	if _, ok := pc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "date_updated", err: errors.New(`ent: missing required field "Person.date_updated"`)}
	}
	if _, ok := pc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Person.active"`)}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Person.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(person.Table, sqlgraph.NewFieldSpec(person.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.DateCreated(); ok {
		_spec.SetField(person.FieldDateCreated, field.TypeTime, value)
		_node.DateCreated = value
	}
	if value, ok := pc.mutation.DateUpdated(); ok {
		_spec.SetField(person.FieldDateUpdated, field.TypeTime, value)
		_node.DateUpdated = value
	}
	if value, ok := pc.mutation.Active(); ok {
		_spec.SetField(person.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := pc.mutation.BirthDate(); ok {
		_spec.SetField(person.FieldBirthDate, field.TypeString, value)
		_node.BirthDate = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pc.mutation.OtherID(); ok {
		_spec.SetField(person.FieldOtherID, field.TypeJSON, value)
		_node.OtherID = value
	}
	if value, ok := pc.mutation.OrganizationID(); ok {
		_spec.SetField(person.FieldOrganizationID, field.TypeJSON, value)
		_node.OrganizationID = value
	}
	if value, ok := pc.mutation.FirstName(); ok {
		_spec.SetField(person.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := pc.mutation.FullName(); ok {
		_spec.SetField(person.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.SetField(person.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := pc.mutation.JobCategory(); ok {
		_spec.SetField(person.FieldJobCategory, field.TypeJSON, value)
		_node.JobCategory = value
	}
	if value, ok := pc.mutation.Orcid(); ok {
		_spec.SetField(person.FieldOrcid, field.TypeString, value)
		_node.Orcid = value
	}
	if value, ok := pc.mutation.OrcidToken(); ok {
		_spec.SetField(person.FieldOrcidToken, field.TypeString, value)
		_node.OrcidToken = value
	}
	if value, ok := pc.mutation.PreferredFirstName(); ok {
		_spec.SetField(person.FieldPreferredFirstName, field.TypeString, value)
		_node.PreferredFirstName = value
	}
	if value, ok := pc.mutation.PreferredLastName(); ok {
		_spec.SetField(person.FieldPreferredLastName, field.TypeString, value)
		_node.PreferredLastName = value
	}
	if value, ok := pc.mutation.JobTitle(); ok {
		_spec.SetField(person.FieldJobTitle, field.TypeString, value)
		_node.JobTitle = value
	}
	return _node, _spec
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	builders []*PersonCreate
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
