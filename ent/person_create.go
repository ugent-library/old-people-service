// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/people-service/ent/person"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDateCreated sets the "date_created" field.
func (pc *PersonCreate) SetDateCreated(t time.Time) *PersonCreate {
	pc.mutation.SetDateCreated(t)
	return pc
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDateCreated(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDateCreated(*t)
	}
	return pc
}

// SetDateUpdated sets the "date_updated" field.
func (pc *PersonCreate) SetDateUpdated(t time.Time) *PersonCreate {
	pc.mutation.SetDateUpdated(t)
	return pc
}

// SetNillableDateUpdated sets the "date_updated" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDateUpdated(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDateUpdated(*t)
	}
	return pc
}

// SetPublicID sets the "public_id" field.
func (pc *PersonCreate) SetPublicID(s string) *PersonCreate {
	pc.mutation.SetPublicID(s)
	return pc
}

// SetNillablePublicID sets the "public_id" field if the given value is not nil.
func (pc *PersonCreate) SetNillablePublicID(s *string) *PersonCreate {
	if s != nil {
		pc.SetPublicID(*s)
	}
	return pc
}

// SetIdentifier sets the "identifier" field.
func (pc *PersonCreate) SetIdentifier(s []string) *PersonCreate {
	pc.mutation.SetIdentifier(s)
	return pc
}

// SetIdentifierValues sets the "identifier_values" field.
func (pc *PersonCreate) SetIdentifierValues(s []string) *PersonCreate {
	pc.mutation.SetIdentifierValues(s)
	return pc
}

// SetActive sets the "active" field.
func (pc *PersonCreate) SetActive(b bool) *PersonCreate {
	pc.mutation.SetActive(b)
	return pc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pc *PersonCreate) SetNillableActive(b *bool) *PersonCreate {
	if b != nil {
		pc.SetActive(*b)
	}
	return pc
}

// SetBirthDate sets the "birth_date" field.
func (pc *PersonCreate) SetBirthDate(s string) *PersonCreate {
	pc.mutation.SetBirthDate(s)
	return pc
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pc *PersonCreate) SetNillableBirthDate(s *string) *PersonCreate {
	if s != nil {
		pc.SetBirthDate(*s)
	}
	return pc
}

// SetEmail sets the "email" field.
func (pc *PersonCreate) SetEmail(s string) *PersonCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pc *PersonCreate) SetNillableEmail(s *string) *PersonCreate {
	if s != nil {
		pc.SetEmail(*s)
	}
	return pc
}

// SetGivenName sets the "given_name" field.
func (pc *PersonCreate) SetGivenName(s string) *PersonCreate {
	pc.mutation.SetGivenName(s)
	return pc
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableGivenName(s *string) *PersonCreate {
	if s != nil {
		pc.SetGivenName(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PersonCreate) SetName(s string) *PersonCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableName(s *string) *PersonCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetFamilyName sets the "family_name" field.
func (pc *PersonCreate) SetFamilyName(s string) *PersonCreate {
	pc.mutation.SetFamilyName(s)
	return pc
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableFamilyName(s *string) *PersonCreate {
	if s != nil {
		pc.SetFamilyName(*s)
	}
	return pc
}

// SetJobCategory sets the "job_category" field.
func (pc *PersonCreate) SetJobCategory(s []string) *PersonCreate {
	pc.mutation.SetJobCategory(s)
	return pc
}

// SetPreferredGivenName sets the "preferred_given_name" field.
func (pc *PersonCreate) SetPreferredGivenName(s string) *PersonCreate {
	pc.mutation.SetPreferredGivenName(s)
	return pc
}

// SetNillablePreferredGivenName sets the "preferred_given_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillablePreferredGivenName(s *string) *PersonCreate {
	if s != nil {
		pc.SetPreferredGivenName(*s)
	}
	return pc
}

// SetPreferredFamilyName sets the "preferred_family_name" field.
func (pc *PersonCreate) SetPreferredFamilyName(s string) *PersonCreate {
	pc.mutation.SetPreferredFamilyName(s)
	return pc
}

// SetNillablePreferredFamilyName sets the "preferred_family_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillablePreferredFamilyName(s *string) *PersonCreate {
	if s != nil {
		pc.SetPreferredFamilyName(*s)
	}
	return pc
}

// SetHonorificPrefix sets the "honorific_prefix" field.
func (pc *PersonCreate) SetHonorificPrefix(s string) *PersonCreate {
	pc.mutation.SetHonorificPrefix(s)
	return pc
}

// SetNillableHonorificPrefix sets the "honorific_prefix" field if the given value is not nil.
func (pc *PersonCreate) SetNillableHonorificPrefix(s *string) *PersonCreate {
	if s != nil {
		pc.SetHonorificPrefix(*s)
	}
	return pc
}

// SetRole sets the "role" field.
func (pc *PersonCreate) SetRole(s []string) *PersonCreate {
	pc.mutation.SetRole(s)
	return pc
}

// SetSettings sets the "settings" field.
func (pc *PersonCreate) SetSettings(m map[string]string) *PersonCreate {
	pc.mutation.SetSettings(m)
	return pc
}

// SetObjectClass sets the "object_class" field.
func (pc *PersonCreate) SetObjectClass(s []string) *PersonCreate {
	pc.mutation.SetObjectClass(s)
	return pc
}

// SetExpirationDate sets the "expiration_date" field.
func (pc *PersonCreate) SetExpirationDate(s string) *PersonCreate {
	pc.mutation.SetExpirationDate(s)
	return pc
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (pc *PersonCreate) SetNillableExpirationDate(s *string) *PersonCreate {
	if s != nil {
		pc.SetExpirationDate(*s)
	}
	return pc
}

// SetToken sets the "token" field.
func (pc *PersonCreate) SetToken(s []string) *PersonCreate {
	pc.mutation.SetToken(s)
	return pc
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	pc.defaults()
	return withHooks[*Person, PersonMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonCreate) defaults() {
	if _, ok := pc.mutation.DateCreated(); !ok {
		v := person.DefaultDateCreated()
		pc.mutation.SetDateCreated(v)
	}
	if _, ok := pc.mutation.DateUpdated(); !ok {
		v := person.DefaultDateUpdated()
		pc.mutation.SetDateUpdated(v)
	}
	if _, ok := pc.mutation.PublicID(); !ok {
		v := person.DefaultPublicID()
		pc.mutation.SetPublicID(v)
	}
	if _, ok := pc.mutation.Identifier(); !ok {
		v := person.DefaultIdentifier
		pc.mutation.SetIdentifier(v)
	}
	if _, ok := pc.mutation.IdentifierValues(); !ok {
		v := person.DefaultIdentifierValues
		pc.mutation.SetIdentifierValues(v)
	}
	if _, ok := pc.mutation.Active(); !ok {
		v := person.DefaultActive
		pc.mutation.SetActive(v)
	}
	if _, ok := pc.mutation.JobCategory(); !ok {
		v := person.DefaultJobCategory
		pc.mutation.SetJobCategory(v)
	}
	if _, ok := pc.mutation.Role(); !ok {
		v := person.DefaultRole
		pc.mutation.SetRole(v)
	}
	if _, ok := pc.mutation.Settings(); !ok {
		v := person.DefaultSettings
		pc.mutation.SetSettings(v)
	}
	if _, ok := pc.mutation.ObjectClass(); !ok {
		v := person.DefaultObjectClass
		pc.mutation.SetObjectClass(v)
	}
	if _, ok := pc.mutation.Token(); !ok {
		v := person.DefaultToken
		pc.mutation.SetToken(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "Person.date_created"`)}
	}
	if _, ok := pc.mutation.DateUpdated(); !ok {
		return &ValidationError{Name: "date_updated", err: errors.New(`ent: missing required field "Person.date_updated"`)}
	}
	if _, ok := pc.mutation.PublicID(); !ok {
		return &ValidationError{Name: "public_id", err: errors.New(`ent: missing required field "Person.public_id"`)}
	}
	if _, ok := pc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Person.active"`)}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(person.Table, sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.DateCreated(); ok {
		_spec.SetField(person.FieldDateCreated, field.TypeTime, value)
		_node.DateCreated = value
	}
	if value, ok := pc.mutation.DateUpdated(); ok {
		_spec.SetField(person.FieldDateUpdated, field.TypeTime, value)
		_node.DateUpdated = value
	}
	if value, ok := pc.mutation.PublicID(); ok {
		_spec.SetField(person.FieldPublicID, field.TypeString, value)
		_node.PublicID = value
	}
	if value, ok := pc.mutation.Identifier(); ok {
		_spec.SetField(person.FieldIdentifier, field.TypeJSON, value)
		_node.Identifier = value
	}
	if value, ok := pc.mutation.IdentifierValues(); ok {
		_spec.SetField(person.FieldIdentifierValues, field.TypeJSON, value)
		_node.IdentifierValues = value
	}
	if value, ok := pc.mutation.Active(); ok {
		_spec.SetField(person.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := pc.mutation.BirthDate(); ok {
		_spec.SetField(person.FieldBirthDate, field.TypeString, value)
		_node.BirthDate = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pc.mutation.GivenName(); ok {
		_spec.SetField(person.FieldGivenName, field.TypeString, value)
		_node.GivenName = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(person.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.FamilyName(); ok {
		_spec.SetField(person.FieldFamilyName, field.TypeString, value)
		_node.FamilyName = value
	}
	if value, ok := pc.mutation.JobCategory(); ok {
		_spec.SetField(person.FieldJobCategory, field.TypeJSON, value)
		_node.JobCategory = value
	}
	if value, ok := pc.mutation.PreferredGivenName(); ok {
		_spec.SetField(person.FieldPreferredGivenName, field.TypeString, value)
		_node.PreferredGivenName = value
	}
	if value, ok := pc.mutation.PreferredFamilyName(); ok {
		_spec.SetField(person.FieldPreferredFamilyName, field.TypeString, value)
		_node.PreferredFamilyName = value
	}
	if value, ok := pc.mutation.HonorificPrefix(); ok {
		_spec.SetField(person.FieldHonorificPrefix, field.TypeString, value)
		_node.HonorificPrefix = value
	}
	if value, ok := pc.mutation.Role(); ok {
		_spec.SetField(person.FieldRole, field.TypeJSON, value)
		_node.Role = value
	}
	if value, ok := pc.mutation.Settings(); ok {
		_spec.SetField(person.FieldSettings, field.TypeJSON, value)
		_node.Settings = value
	}
	if value, ok := pc.mutation.ObjectClass(); ok {
		_spec.SetField(person.FieldObjectClass, field.TypeJSON, value)
		_node.ObjectClass = value
	}
	if value, ok := pc.mutation.ExpirationDate(); ok {
		_spec.SetField(person.FieldExpirationDate, field.TypeString, value)
		_node.ExpirationDate = value
	}
	if value, ok := pc.mutation.Token(); ok {
		_spec.SetField(person.FieldToken, field.TypeJSON, value)
		_node.Token = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Person.Create().
//		SetDateCreated(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonUpsert) {
//			SetDateCreated(v+v).
//		}).
//		Exec(ctx)
func (pc *PersonCreate) OnConflict(opts ...sql.ConflictOption) *PersonUpsertOne {
	pc.conflict = opts
	return &PersonUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PersonCreate) OnConflictColumns(columns ...string) *PersonUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PersonUpsertOne{
		create: pc,
	}
}

type (
	// PersonUpsertOne is the builder for "upsert"-ing
	//  one Person node.
	PersonUpsertOne struct {
		create *PersonCreate
	}

	// PersonUpsert is the "OnConflict" setter.
	PersonUpsert struct {
		*sql.UpdateSet
	}
)

// SetDateUpdated sets the "date_updated" field.
func (u *PersonUpsert) SetDateUpdated(v time.Time) *PersonUpsert {
	u.Set(person.FieldDateUpdated, v)
	return u
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *PersonUpsert) UpdateDateUpdated() *PersonUpsert {
	u.SetExcluded(person.FieldDateUpdated)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *PersonUpsert) SetIdentifier(v []string) *PersonUpsert {
	u.Set(person.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIdentifier() *PersonUpsert {
	u.SetExcluded(person.FieldIdentifier)
	return u
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *PersonUpsert) ClearIdentifier() *PersonUpsert {
	u.SetNull(person.FieldIdentifier)
	return u
}

// SetIdentifierValues sets the "identifier_values" field.
func (u *PersonUpsert) SetIdentifierValues(v []string) *PersonUpsert {
	u.Set(person.FieldIdentifierValues, v)
	return u
}

// UpdateIdentifierValues sets the "identifier_values" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIdentifierValues() *PersonUpsert {
	u.SetExcluded(person.FieldIdentifierValues)
	return u
}

// ClearIdentifierValues clears the value of the "identifier_values" field.
func (u *PersonUpsert) ClearIdentifierValues() *PersonUpsert {
	u.SetNull(person.FieldIdentifierValues)
	return u
}

// SetActive sets the "active" field.
func (u *PersonUpsert) SetActive(v bool) *PersonUpsert {
	u.Set(person.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PersonUpsert) UpdateActive() *PersonUpsert {
	u.SetExcluded(person.FieldActive)
	return u
}

// SetBirthDate sets the "birth_date" field.
func (u *PersonUpsert) SetBirthDate(v string) *PersonUpsert {
	u.Set(person.FieldBirthDate, v)
	return u
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *PersonUpsert) UpdateBirthDate() *PersonUpsert {
	u.SetExcluded(person.FieldBirthDate)
	return u
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *PersonUpsert) ClearBirthDate() *PersonUpsert {
	u.SetNull(person.FieldBirthDate)
	return u
}

// SetEmail sets the "email" field.
func (u *PersonUpsert) SetEmail(v string) *PersonUpsert {
	u.Set(person.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *PersonUpsert) UpdateEmail() *PersonUpsert {
	u.SetExcluded(person.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *PersonUpsert) ClearEmail() *PersonUpsert {
	u.SetNull(person.FieldEmail)
	return u
}

// SetGivenName sets the "given_name" field.
func (u *PersonUpsert) SetGivenName(v string) *PersonUpsert {
	u.Set(person.FieldGivenName, v)
	return u
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *PersonUpsert) UpdateGivenName() *PersonUpsert {
	u.SetExcluded(person.FieldGivenName)
	return u
}

// ClearGivenName clears the value of the "given_name" field.
func (u *PersonUpsert) ClearGivenName() *PersonUpsert {
	u.SetNull(person.FieldGivenName)
	return u
}

// SetName sets the "name" field.
func (u *PersonUpsert) SetName(v string) *PersonUpsert {
	u.Set(person.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsert) UpdateName() *PersonUpsert {
	u.SetExcluded(person.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PersonUpsert) ClearName() *PersonUpsert {
	u.SetNull(person.FieldName)
	return u
}

// SetFamilyName sets the "family_name" field.
func (u *PersonUpsert) SetFamilyName(v string) *PersonUpsert {
	u.Set(person.FieldFamilyName, v)
	return u
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *PersonUpsert) UpdateFamilyName() *PersonUpsert {
	u.SetExcluded(person.FieldFamilyName)
	return u
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *PersonUpsert) ClearFamilyName() *PersonUpsert {
	u.SetNull(person.FieldFamilyName)
	return u
}

// SetJobCategory sets the "job_category" field.
func (u *PersonUpsert) SetJobCategory(v []string) *PersonUpsert {
	u.Set(person.FieldJobCategory, v)
	return u
}

// UpdateJobCategory sets the "job_category" field to the value that was provided on create.
func (u *PersonUpsert) UpdateJobCategory() *PersonUpsert {
	u.SetExcluded(person.FieldJobCategory)
	return u
}

// ClearJobCategory clears the value of the "job_category" field.
func (u *PersonUpsert) ClearJobCategory() *PersonUpsert {
	u.SetNull(person.FieldJobCategory)
	return u
}

// SetPreferredGivenName sets the "preferred_given_name" field.
func (u *PersonUpsert) SetPreferredGivenName(v string) *PersonUpsert {
	u.Set(person.FieldPreferredGivenName, v)
	return u
}

// UpdatePreferredGivenName sets the "preferred_given_name" field to the value that was provided on create.
func (u *PersonUpsert) UpdatePreferredGivenName() *PersonUpsert {
	u.SetExcluded(person.FieldPreferredGivenName)
	return u
}

// ClearPreferredGivenName clears the value of the "preferred_given_name" field.
func (u *PersonUpsert) ClearPreferredGivenName() *PersonUpsert {
	u.SetNull(person.FieldPreferredGivenName)
	return u
}

// SetPreferredFamilyName sets the "preferred_family_name" field.
func (u *PersonUpsert) SetPreferredFamilyName(v string) *PersonUpsert {
	u.Set(person.FieldPreferredFamilyName, v)
	return u
}

// UpdatePreferredFamilyName sets the "preferred_family_name" field to the value that was provided on create.
func (u *PersonUpsert) UpdatePreferredFamilyName() *PersonUpsert {
	u.SetExcluded(person.FieldPreferredFamilyName)
	return u
}

// ClearPreferredFamilyName clears the value of the "preferred_family_name" field.
func (u *PersonUpsert) ClearPreferredFamilyName() *PersonUpsert {
	u.SetNull(person.FieldPreferredFamilyName)
	return u
}

// SetHonorificPrefix sets the "honorific_prefix" field.
func (u *PersonUpsert) SetHonorificPrefix(v string) *PersonUpsert {
	u.Set(person.FieldHonorificPrefix, v)
	return u
}

// UpdateHonorificPrefix sets the "honorific_prefix" field to the value that was provided on create.
func (u *PersonUpsert) UpdateHonorificPrefix() *PersonUpsert {
	u.SetExcluded(person.FieldHonorificPrefix)
	return u
}

// ClearHonorificPrefix clears the value of the "honorific_prefix" field.
func (u *PersonUpsert) ClearHonorificPrefix() *PersonUpsert {
	u.SetNull(person.FieldHonorificPrefix)
	return u
}

// SetRole sets the "role" field.
func (u *PersonUpsert) SetRole(v []string) *PersonUpsert {
	u.Set(person.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *PersonUpsert) UpdateRole() *PersonUpsert {
	u.SetExcluded(person.FieldRole)
	return u
}

// ClearRole clears the value of the "role" field.
func (u *PersonUpsert) ClearRole() *PersonUpsert {
	u.SetNull(person.FieldRole)
	return u
}

// SetSettings sets the "settings" field.
func (u *PersonUpsert) SetSettings(v map[string]string) *PersonUpsert {
	u.Set(person.FieldSettings, v)
	return u
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *PersonUpsert) UpdateSettings() *PersonUpsert {
	u.SetExcluded(person.FieldSettings)
	return u
}

// ClearSettings clears the value of the "settings" field.
func (u *PersonUpsert) ClearSettings() *PersonUpsert {
	u.SetNull(person.FieldSettings)
	return u
}

// SetObjectClass sets the "object_class" field.
func (u *PersonUpsert) SetObjectClass(v []string) *PersonUpsert {
	u.Set(person.FieldObjectClass, v)
	return u
}

// UpdateObjectClass sets the "object_class" field to the value that was provided on create.
func (u *PersonUpsert) UpdateObjectClass() *PersonUpsert {
	u.SetExcluded(person.FieldObjectClass)
	return u
}

// ClearObjectClass clears the value of the "object_class" field.
func (u *PersonUpsert) ClearObjectClass() *PersonUpsert {
	u.SetNull(person.FieldObjectClass)
	return u
}

// SetExpirationDate sets the "expiration_date" field.
func (u *PersonUpsert) SetExpirationDate(v string) *PersonUpsert {
	u.Set(person.FieldExpirationDate, v)
	return u
}

// UpdateExpirationDate sets the "expiration_date" field to the value that was provided on create.
func (u *PersonUpsert) UpdateExpirationDate() *PersonUpsert {
	u.SetExcluded(person.FieldExpirationDate)
	return u
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (u *PersonUpsert) ClearExpirationDate() *PersonUpsert {
	u.SetNull(person.FieldExpirationDate)
	return u
}

// SetToken sets the "token" field.
func (u *PersonUpsert) SetToken(v []string) *PersonUpsert {
	u.Set(person.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *PersonUpsert) UpdateToken() *PersonUpsert {
	u.SetExcluded(person.FieldToken)
	return u
}

// ClearToken clears the value of the "token" field.
func (u *PersonUpsert) ClearToken() *PersonUpsert {
	u.SetNull(person.FieldToken)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PersonUpsertOne) UpdateNewValues() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.DateCreated(); exists {
			s.SetIgnore(person.FieldDateCreated)
		}
		if _, exists := u.create.mutation.PublicID(); exists {
			s.SetIgnore(person.FieldPublicID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PersonUpsertOne) Ignore() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonUpsertOne) DoNothing() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonCreate.OnConflict
// documentation for more info.
func (u *PersonUpsertOne) Update(set func(*PersonUpsert)) *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetDateUpdated sets the "date_updated" field.
func (u *PersonUpsertOne) SetDateUpdated(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetDateUpdated(v)
	})
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateDateUpdated() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDateUpdated()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *PersonUpsertOne) SetIdentifier(v []string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIdentifier() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIdentifier()
	})
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *PersonUpsertOne) ClearIdentifier() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIdentifier()
	})
}

// SetIdentifierValues sets the "identifier_values" field.
func (u *PersonUpsertOne) SetIdentifierValues(v []string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIdentifierValues(v)
	})
}

// UpdateIdentifierValues sets the "identifier_values" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIdentifierValues() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIdentifierValues()
	})
}

// ClearIdentifierValues clears the value of the "identifier_values" field.
func (u *PersonUpsertOne) ClearIdentifierValues() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIdentifierValues()
	})
}

// SetActive sets the "active" field.
func (u *PersonUpsertOne) SetActive(v bool) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateActive() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateActive()
	})
}

// SetBirthDate sets the "birth_date" field.
func (u *PersonUpsertOne) SetBirthDate(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetBirthDate(v)
	})
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateBirthDate() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateBirthDate()
	})
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *PersonUpsertOne) ClearBirthDate() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearBirthDate()
	})
}

// SetEmail sets the "email" field.
func (u *PersonUpsertOne) SetEmail(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateEmail() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *PersonUpsertOne) ClearEmail() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearEmail()
	})
}

// SetGivenName sets the "given_name" field.
func (u *PersonUpsertOne) SetGivenName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetGivenName(v)
	})
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateGivenName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateGivenName()
	})
}

// ClearGivenName clears the value of the "given_name" field.
func (u *PersonUpsertOne) ClearGivenName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearGivenName()
	})
}

// SetName sets the "name" field.
func (u *PersonUpsertOne) SetName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PersonUpsertOne) ClearName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearName()
	})
}

// SetFamilyName sets the "family_name" field.
func (u *PersonUpsertOne) SetFamilyName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetFamilyName(v)
	})
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateFamilyName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateFamilyName()
	})
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *PersonUpsertOne) ClearFamilyName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearFamilyName()
	})
}

// SetJobCategory sets the "job_category" field.
func (u *PersonUpsertOne) SetJobCategory(v []string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetJobCategory(v)
	})
}

// UpdateJobCategory sets the "job_category" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateJobCategory() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateJobCategory()
	})
}

// ClearJobCategory clears the value of the "job_category" field.
func (u *PersonUpsertOne) ClearJobCategory() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearJobCategory()
	})
}

// SetPreferredGivenName sets the "preferred_given_name" field.
func (u *PersonUpsertOne) SetPreferredGivenName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetPreferredGivenName(v)
	})
}

// UpdatePreferredGivenName sets the "preferred_given_name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdatePreferredGivenName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdatePreferredGivenName()
	})
}

// ClearPreferredGivenName clears the value of the "preferred_given_name" field.
func (u *PersonUpsertOne) ClearPreferredGivenName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearPreferredGivenName()
	})
}

// SetPreferredFamilyName sets the "preferred_family_name" field.
func (u *PersonUpsertOne) SetPreferredFamilyName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetPreferredFamilyName(v)
	})
}

// UpdatePreferredFamilyName sets the "preferred_family_name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdatePreferredFamilyName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdatePreferredFamilyName()
	})
}

// ClearPreferredFamilyName clears the value of the "preferred_family_name" field.
func (u *PersonUpsertOne) ClearPreferredFamilyName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearPreferredFamilyName()
	})
}

// SetHonorificPrefix sets the "honorific_prefix" field.
func (u *PersonUpsertOne) SetHonorificPrefix(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetHonorificPrefix(v)
	})
}

// UpdateHonorificPrefix sets the "honorific_prefix" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateHonorificPrefix() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateHonorificPrefix()
	})
}

// ClearHonorificPrefix clears the value of the "honorific_prefix" field.
func (u *PersonUpsertOne) ClearHonorificPrefix() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearHonorificPrefix()
	})
}

// SetRole sets the "role" field.
func (u *PersonUpsertOne) SetRole(v []string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateRole() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *PersonUpsertOne) ClearRole() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearRole()
	})
}

// SetSettings sets the "settings" field.
func (u *PersonUpsertOne) SetSettings(v map[string]string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetSettings(v)
	})
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateSettings() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateSettings()
	})
}

// ClearSettings clears the value of the "settings" field.
func (u *PersonUpsertOne) ClearSettings() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearSettings()
	})
}

// SetObjectClass sets the "object_class" field.
func (u *PersonUpsertOne) SetObjectClass(v []string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetObjectClass(v)
	})
}

// UpdateObjectClass sets the "object_class" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateObjectClass() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateObjectClass()
	})
}

// ClearObjectClass clears the value of the "object_class" field.
func (u *PersonUpsertOne) ClearObjectClass() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearObjectClass()
	})
}

// SetExpirationDate sets the "expiration_date" field.
func (u *PersonUpsertOne) SetExpirationDate(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetExpirationDate(v)
	})
}

// UpdateExpirationDate sets the "expiration_date" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateExpirationDate() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateExpirationDate()
	})
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (u *PersonUpsertOne) ClearExpirationDate() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearExpirationDate()
	})
}

// SetToken sets the "token" field.
func (u *PersonUpsertOne) SetToken(v []string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateToken() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateToken()
	})
}

// ClearToken clears the value of the "token" field.
func (u *PersonUpsertOne) ClearToken() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearToken()
	})
}

// Exec executes the query.
func (u *PersonUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PersonCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PersonUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PersonUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	builders []*PersonCreate
	conflict []sql.ConflictOption
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Person.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonUpsert) {
//			SetDateCreated(v+v).
//		}).
//		Exec(ctx)
func (pcb *PersonCreateBulk) OnConflict(opts ...sql.ConflictOption) *PersonUpsertBulk {
	pcb.conflict = opts
	return &PersonUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PersonCreateBulk) OnConflictColumns(columns ...string) *PersonUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PersonUpsertBulk{
		create: pcb,
	}
}

// PersonUpsertBulk is the builder for "upsert"-ing
// a bulk of Person nodes.
type PersonUpsertBulk struct {
	create *PersonCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PersonUpsertBulk) UpdateNewValues() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.DateCreated(); exists {
				s.SetIgnore(person.FieldDateCreated)
			}
			if _, exists := b.mutation.PublicID(); exists {
				s.SetIgnore(person.FieldPublicID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PersonUpsertBulk) Ignore() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonUpsertBulk) DoNothing() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonCreateBulk.OnConflict
// documentation for more info.
func (u *PersonUpsertBulk) Update(set func(*PersonUpsert)) *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetDateUpdated sets the "date_updated" field.
func (u *PersonUpsertBulk) SetDateUpdated(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetDateUpdated(v)
	})
}

// UpdateDateUpdated sets the "date_updated" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateDateUpdated() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDateUpdated()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *PersonUpsertBulk) SetIdentifier(v []string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIdentifier() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIdentifier()
	})
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *PersonUpsertBulk) ClearIdentifier() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIdentifier()
	})
}

// SetIdentifierValues sets the "identifier_values" field.
func (u *PersonUpsertBulk) SetIdentifierValues(v []string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIdentifierValues(v)
	})
}

// UpdateIdentifierValues sets the "identifier_values" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIdentifierValues() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIdentifierValues()
	})
}

// ClearIdentifierValues clears the value of the "identifier_values" field.
func (u *PersonUpsertBulk) ClearIdentifierValues() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIdentifierValues()
	})
}

// SetActive sets the "active" field.
func (u *PersonUpsertBulk) SetActive(v bool) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateActive() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateActive()
	})
}

// SetBirthDate sets the "birth_date" field.
func (u *PersonUpsertBulk) SetBirthDate(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetBirthDate(v)
	})
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateBirthDate() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateBirthDate()
	})
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *PersonUpsertBulk) ClearBirthDate() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearBirthDate()
	})
}

// SetEmail sets the "email" field.
func (u *PersonUpsertBulk) SetEmail(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateEmail() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *PersonUpsertBulk) ClearEmail() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearEmail()
	})
}

// SetGivenName sets the "given_name" field.
func (u *PersonUpsertBulk) SetGivenName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetGivenName(v)
	})
}

// UpdateGivenName sets the "given_name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateGivenName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateGivenName()
	})
}

// ClearGivenName clears the value of the "given_name" field.
func (u *PersonUpsertBulk) ClearGivenName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearGivenName()
	})
}

// SetName sets the "name" field.
func (u *PersonUpsertBulk) SetName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PersonUpsertBulk) ClearName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearName()
	})
}

// SetFamilyName sets the "family_name" field.
func (u *PersonUpsertBulk) SetFamilyName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetFamilyName(v)
	})
}

// UpdateFamilyName sets the "family_name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateFamilyName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateFamilyName()
	})
}

// ClearFamilyName clears the value of the "family_name" field.
func (u *PersonUpsertBulk) ClearFamilyName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearFamilyName()
	})
}

// SetJobCategory sets the "job_category" field.
func (u *PersonUpsertBulk) SetJobCategory(v []string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetJobCategory(v)
	})
}

// UpdateJobCategory sets the "job_category" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateJobCategory() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateJobCategory()
	})
}

// ClearJobCategory clears the value of the "job_category" field.
func (u *PersonUpsertBulk) ClearJobCategory() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearJobCategory()
	})
}

// SetPreferredGivenName sets the "preferred_given_name" field.
func (u *PersonUpsertBulk) SetPreferredGivenName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetPreferredGivenName(v)
	})
}

// UpdatePreferredGivenName sets the "preferred_given_name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdatePreferredGivenName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdatePreferredGivenName()
	})
}

// ClearPreferredGivenName clears the value of the "preferred_given_name" field.
func (u *PersonUpsertBulk) ClearPreferredGivenName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearPreferredGivenName()
	})
}

// SetPreferredFamilyName sets the "preferred_family_name" field.
func (u *PersonUpsertBulk) SetPreferredFamilyName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetPreferredFamilyName(v)
	})
}

// UpdatePreferredFamilyName sets the "preferred_family_name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdatePreferredFamilyName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdatePreferredFamilyName()
	})
}

// ClearPreferredFamilyName clears the value of the "preferred_family_name" field.
func (u *PersonUpsertBulk) ClearPreferredFamilyName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearPreferredFamilyName()
	})
}

// SetHonorificPrefix sets the "honorific_prefix" field.
func (u *PersonUpsertBulk) SetHonorificPrefix(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetHonorificPrefix(v)
	})
}

// UpdateHonorificPrefix sets the "honorific_prefix" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateHonorificPrefix() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateHonorificPrefix()
	})
}

// ClearHonorificPrefix clears the value of the "honorific_prefix" field.
func (u *PersonUpsertBulk) ClearHonorificPrefix() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearHonorificPrefix()
	})
}

// SetRole sets the "role" field.
func (u *PersonUpsertBulk) SetRole(v []string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateRole() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *PersonUpsertBulk) ClearRole() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearRole()
	})
}

// SetSettings sets the "settings" field.
func (u *PersonUpsertBulk) SetSettings(v map[string]string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetSettings(v)
	})
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateSettings() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateSettings()
	})
}

// ClearSettings clears the value of the "settings" field.
func (u *PersonUpsertBulk) ClearSettings() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearSettings()
	})
}

// SetObjectClass sets the "object_class" field.
func (u *PersonUpsertBulk) SetObjectClass(v []string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetObjectClass(v)
	})
}

// UpdateObjectClass sets the "object_class" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateObjectClass() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateObjectClass()
	})
}

// ClearObjectClass clears the value of the "object_class" field.
func (u *PersonUpsertBulk) ClearObjectClass() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearObjectClass()
	})
}

// SetExpirationDate sets the "expiration_date" field.
func (u *PersonUpsertBulk) SetExpirationDate(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetExpirationDate(v)
	})
}

// UpdateExpirationDate sets the "expiration_date" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateExpirationDate() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateExpirationDate()
	})
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (u *PersonUpsertBulk) ClearExpirationDate() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearExpirationDate()
	})
}

// SetToken sets the "token" field.
func (u *PersonUpsertBulk) SetToken(v []string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateToken() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateToken()
	})
}

// ClearToken clears the value of the "token" field.
func (u *PersonUpsertBulk) ClearToken() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearToken()
	})
}

// Exec executes the query.
func (u *PersonUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PersonCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PersonCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
