// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/old-people-service/ent/person"
	"github.com/ugent-library/old-people-service/ent/predicate"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks     []Hook
	mutation  *PersonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDateUpdated sets the "date_updated" field.
func (pu *PersonUpdate) SetDateUpdated(t time.Time) *PersonUpdate {
	pu.mutation.SetDateUpdated(t)
	return pu
}

// SetIdentifier sets the "identifier" field.
func (pu *PersonUpdate) SetIdentifier(s []string) *PersonUpdate {
	pu.mutation.SetIdentifier(s)
	return pu
}

// AppendIdentifier appends s to the "identifier" field.
func (pu *PersonUpdate) AppendIdentifier(s []string) *PersonUpdate {
	pu.mutation.AppendIdentifier(s)
	return pu
}

// ClearIdentifier clears the value of the "identifier" field.
func (pu *PersonUpdate) ClearIdentifier() *PersonUpdate {
	pu.mutation.ClearIdentifier()
	return pu
}

// SetIdentifierValues sets the "identifier_values" field.
func (pu *PersonUpdate) SetIdentifierValues(s []string) *PersonUpdate {
	pu.mutation.SetIdentifierValues(s)
	return pu
}

// AppendIdentifierValues appends s to the "identifier_values" field.
func (pu *PersonUpdate) AppendIdentifierValues(s []string) *PersonUpdate {
	pu.mutation.AppendIdentifierValues(s)
	return pu
}

// ClearIdentifierValues clears the value of the "identifier_values" field.
func (pu *PersonUpdate) ClearIdentifierValues() *PersonUpdate {
	pu.mutation.ClearIdentifierValues()
	return pu
}

// SetActive sets the "active" field.
func (pu *PersonUpdate) SetActive(b bool) *PersonUpdate {
	pu.mutation.SetActive(b)
	return pu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableActive(b *bool) *PersonUpdate {
	if b != nil {
		pu.SetActive(*b)
	}
	return pu
}

// SetBirthDate sets the "birth_date" field.
func (pu *PersonUpdate) SetBirthDate(s string) *PersonUpdate {
	pu.mutation.SetBirthDate(s)
	return pu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBirthDate(s *string) *PersonUpdate {
	if s != nil {
		pu.SetBirthDate(*s)
	}
	return pu
}

// ClearBirthDate clears the value of the "birth_date" field.
func (pu *PersonUpdate) ClearBirthDate() *PersonUpdate {
	pu.mutation.ClearBirthDate()
	return pu
}

// SetEmail sets the "email" field.
func (pu *PersonUpdate) SetEmail(s string) *PersonUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableEmail(s *string) *PersonUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// ClearEmail clears the value of the "email" field.
func (pu *PersonUpdate) ClearEmail() *PersonUpdate {
	pu.mutation.ClearEmail()
	return pu
}

// SetGivenName sets the "given_name" field.
func (pu *PersonUpdate) SetGivenName(s string) *PersonUpdate {
	pu.mutation.SetGivenName(s)
	return pu
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableGivenName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetGivenName(*s)
	}
	return pu
}

// ClearGivenName clears the value of the "given_name" field.
func (pu *PersonUpdate) ClearGivenName() *PersonUpdate {
	pu.mutation.ClearGivenName()
	return pu
}

// SetName sets the "name" field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *PersonUpdate) ClearName() *PersonUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetFamilyName sets the "family_name" field.
func (pu *PersonUpdate) SetFamilyName(s string) *PersonUpdate {
	pu.mutation.SetFamilyName(s)
	return pu
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableFamilyName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetFamilyName(*s)
	}
	return pu
}

// ClearFamilyName clears the value of the "family_name" field.
func (pu *PersonUpdate) ClearFamilyName() *PersonUpdate {
	pu.mutation.ClearFamilyName()
	return pu
}

// SetJobCategory sets the "job_category" field.
func (pu *PersonUpdate) SetJobCategory(s []string) *PersonUpdate {
	pu.mutation.SetJobCategory(s)
	return pu
}

// AppendJobCategory appends s to the "job_category" field.
func (pu *PersonUpdate) AppendJobCategory(s []string) *PersonUpdate {
	pu.mutation.AppendJobCategory(s)
	return pu
}

// ClearJobCategory clears the value of the "job_category" field.
func (pu *PersonUpdate) ClearJobCategory() *PersonUpdate {
	pu.mutation.ClearJobCategory()
	return pu
}

// SetPreferredGivenName sets the "preferred_given_name" field.
func (pu *PersonUpdate) SetPreferredGivenName(s string) *PersonUpdate {
	pu.mutation.SetPreferredGivenName(s)
	return pu
}

// SetNillablePreferredGivenName sets the "preferred_given_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePreferredGivenName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPreferredGivenName(*s)
	}
	return pu
}

// ClearPreferredGivenName clears the value of the "preferred_given_name" field.
func (pu *PersonUpdate) ClearPreferredGivenName() *PersonUpdate {
	pu.mutation.ClearPreferredGivenName()
	return pu
}

// SetPreferredFamilyName sets the "preferred_family_name" field.
func (pu *PersonUpdate) SetPreferredFamilyName(s string) *PersonUpdate {
	pu.mutation.SetPreferredFamilyName(s)
	return pu
}

// SetNillablePreferredFamilyName sets the "preferred_family_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePreferredFamilyName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPreferredFamilyName(*s)
	}
	return pu
}

// ClearPreferredFamilyName clears the value of the "preferred_family_name" field.
func (pu *PersonUpdate) ClearPreferredFamilyName() *PersonUpdate {
	pu.mutation.ClearPreferredFamilyName()
	return pu
}

// SetHonorificPrefix sets the "honorific_prefix" field.
func (pu *PersonUpdate) SetHonorificPrefix(s string) *PersonUpdate {
	pu.mutation.SetHonorificPrefix(s)
	return pu
}

// SetNillableHonorificPrefix sets the "honorific_prefix" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableHonorificPrefix(s *string) *PersonUpdate {
	if s != nil {
		pu.SetHonorificPrefix(*s)
	}
	return pu
}

// ClearHonorificPrefix clears the value of the "honorific_prefix" field.
func (pu *PersonUpdate) ClearHonorificPrefix() *PersonUpdate {
	pu.mutation.ClearHonorificPrefix()
	return pu
}

// SetRole sets the "role" field.
func (pu *PersonUpdate) SetRole(s []string) *PersonUpdate {
	pu.mutation.SetRole(s)
	return pu
}

// AppendRole appends s to the "role" field.
func (pu *PersonUpdate) AppendRole(s []string) *PersonUpdate {
	pu.mutation.AppendRole(s)
	return pu
}

// ClearRole clears the value of the "role" field.
func (pu *PersonUpdate) ClearRole() *PersonUpdate {
	pu.mutation.ClearRole()
	return pu
}

// SetSettings sets the "settings" field.
func (pu *PersonUpdate) SetSettings(m map[string]string) *PersonUpdate {
	pu.mutation.SetSettings(m)
	return pu
}

// ClearSettings clears the value of the "settings" field.
func (pu *PersonUpdate) ClearSettings() *PersonUpdate {
	pu.mutation.ClearSettings()
	return pu
}

// SetObjectClass sets the "object_class" field.
func (pu *PersonUpdate) SetObjectClass(s []string) *PersonUpdate {
	pu.mutation.SetObjectClass(s)
	return pu
}

// AppendObjectClass appends s to the "object_class" field.
func (pu *PersonUpdate) AppendObjectClass(s []string) *PersonUpdate {
	pu.mutation.AppendObjectClass(s)
	return pu
}

// ClearObjectClass clears the value of the "object_class" field.
func (pu *PersonUpdate) ClearObjectClass() *PersonUpdate {
	pu.mutation.ClearObjectClass()
	return pu
}

// SetExpirationDate sets the "expiration_date" field.
func (pu *PersonUpdate) SetExpirationDate(s string) *PersonUpdate {
	pu.mutation.SetExpirationDate(s)
	return pu
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableExpirationDate(s *string) *PersonUpdate {
	if s != nil {
		pu.SetExpirationDate(*s)
	}
	return pu
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (pu *PersonUpdate) ClearExpirationDate() *PersonUpdate {
	pu.mutation.ClearExpirationDate()
	return pu
}

// SetToken sets the "token" field.
func (pu *PersonUpdate) SetToken(s []string) *PersonUpdate {
	pu.mutation.SetToken(s)
	return pu
}

// AppendToken appends s to the "token" field.
func (pu *PersonUpdate) AppendToken(s []string) *PersonUpdate {
	pu.mutation.AppendToken(s)
	return pu
}

// ClearToken clears the value of the "token" field.
func (pu *PersonUpdate) ClearToken() *PersonUpdate {
	pu.mutation.ClearToken()
	return pu
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks[int, PersonMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PersonUpdate) defaults() {
	if _, ok := pu.mutation.DateUpdated(); !ok {
		v := person.UpdateDefaultDateUpdated()
		pu.mutation.SetDateUpdated(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PersonUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PersonUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DateUpdated(); ok {
		_spec.SetField(person.FieldDateUpdated, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Identifier(); ok {
		_spec.SetField(person.FieldIdentifier, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedIdentifier(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldIdentifier, value)
		})
	}
	if pu.mutation.IdentifierCleared() {
		_spec.ClearField(person.FieldIdentifier, field.TypeJSON)
	}
	if value, ok := pu.mutation.IdentifierValues(); ok {
		_spec.SetField(person.FieldIdentifierValues, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedIdentifierValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldIdentifierValues, value)
		})
	}
	if pu.mutation.IdentifierValuesCleared() {
		_spec.ClearField(person.FieldIdentifierValues, field.TypeJSON)
	}
	if value, ok := pu.mutation.Active(); ok {
		_spec.SetField(person.FieldActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.BirthDate(); ok {
		_spec.SetField(person.FieldBirthDate, field.TypeString, value)
	}
	if pu.mutation.BirthDateCleared() {
		_spec.ClearField(person.FieldBirthDate, field.TypeString)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
	}
	if pu.mutation.EmailCleared() {
		_spec.ClearField(person.FieldEmail, field.TypeString)
	}
	if value, ok := pu.mutation.GivenName(); ok {
		_spec.SetField(person.FieldGivenName, field.TypeString, value)
	}
	if pu.mutation.GivenNameCleared() {
		_spec.ClearField(person.FieldGivenName, field.TypeString)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(person.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(person.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.FamilyName(); ok {
		_spec.SetField(person.FieldFamilyName, field.TypeString, value)
	}
	if pu.mutation.FamilyNameCleared() {
		_spec.ClearField(person.FieldFamilyName, field.TypeString)
	}
	if value, ok := pu.mutation.JobCategory(); ok {
		_spec.SetField(person.FieldJobCategory, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedJobCategory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldJobCategory, value)
		})
	}
	if pu.mutation.JobCategoryCleared() {
		_spec.ClearField(person.FieldJobCategory, field.TypeJSON)
	}
	if value, ok := pu.mutation.PreferredGivenName(); ok {
		_spec.SetField(person.FieldPreferredGivenName, field.TypeString, value)
	}
	if pu.mutation.PreferredGivenNameCleared() {
		_spec.ClearField(person.FieldPreferredGivenName, field.TypeString)
	}
	if value, ok := pu.mutation.PreferredFamilyName(); ok {
		_spec.SetField(person.FieldPreferredFamilyName, field.TypeString, value)
	}
	if pu.mutation.PreferredFamilyNameCleared() {
		_spec.ClearField(person.FieldPreferredFamilyName, field.TypeString)
	}
	if value, ok := pu.mutation.HonorificPrefix(); ok {
		_spec.SetField(person.FieldHonorificPrefix, field.TypeString, value)
	}
	if pu.mutation.HonorificPrefixCleared() {
		_spec.ClearField(person.FieldHonorificPrefix, field.TypeString)
	}
	if value, ok := pu.mutation.Role(); ok {
		_spec.SetField(person.FieldRole, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedRole(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldRole, value)
		})
	}
	if pu.mutation.RoleCleared() {
		_spec.ClearField(person.FieldRole, field.TypeJSON)
	}
	if value, ok := pu.mutation.Settings(); ok {
		_spec.SetField(person.FieldSettings, field.TypeJSON, value)
	}
	if pu.mutation.SettingsCleared() {
		_spec.ClearField(person.FieldSettings, field.TypeJSON)
	}
	if value, ok := pu.mutation.ObjectClass(); ok {
		_spec.SetField(person.FieldObjectClass, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedObjectClass(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldObjectClass, value)
		})
	}
	if pu.mutation.ObjectClassCleared() {
		_spec.ClearField(person.FieldObjectClass, field.TypeJSON)
	}
	if value, ok := pu.mutation.ExpirationDate(); ok {
		_spec.SetField(person.FieldExpirationDate, field.TypeString, value)
	}
	if pu.mutation.ExpirationDateCleared() {
		_spec.ClearField(person.FieldExpirationDate, field.TypeString)
	}
	if value, ok := pu.mutation.Token(); ok {
		_spec.SetField(person.FieldToken, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedToken(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldToken, value)
		})
	}
	if pu.mutation.TokenCleared() {
		_spec.ClearField(person.FieldToken, field.TypeJSON)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PersonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDateUpdated sets the "date_updated" field.
func (puo *PersonUpdateOne) SetDateUpdated(t time.Time) *PersonUpdateOne {
	puo.mutation.SetDateUpdated(t)
	return puo
}

// SetIdentifier sets the "identifier" field.
func (puo *PersonUpdateOne) SetIdentifier(s []string) *PersonUpdateOne {
	puo.mutation.SetIdentifier(s)
	return puo
}

// AppendIdentifier appends s to the "identifier" field.
func (puo *PersonUpdateOne) AppendIdentifier(s []string) *PersonUpdateOne {
	puo.mutation.AppendIdentifier(s)
	return puo
}

// ClearIdentifier clears the value of the "identifier" field.
func (puo *PersonUpdateOne) ClearIdentifier() *PersonUpdateOne {
	puo.mutation.ClearIdentifier()
	return puo
}

// SetIdentifierValues sets the "identifier_values" field.
func (puo *PersonUpdateOne) SetIdentifierValues(s []string) *PersonUpdateOne {
	puo.mutation.SetIdentifierValues(s)
	return puo
}

// AppendIdentifierValues appends s to the "identifier_values" field.
func (puo *PersonUpdateOne) AppendIdentifierValues(s []string) *PersonUpdateOne {
	puo.mutation.AppendIdentifierValues(s)
	return puo
}

// ClearIdentifierValues clears the value of the "identifier_values" field.
func (puo *PersonUpdateOne) ClearIdentifierValues() *PersonUpdateOne {
	puo.mutation.ClearIdentifierValues()
	return puo
}

// SetActive sets the "active" field.
func (puo *PersonUpdateOne) SetActive(b bool) *PersonUpdateOne {
	puo.mutation.SetActive(b)
	return puo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableActive(b *bool) *PersonUpdateOne {
	if b != nil {
		puo.SetActive(*b)
	}
	return puo
}

// SetBirthDate sets the "birth_date" field.
func (puo *PersonUpdateOne) SetBirthDate(s string) *PersonUpdateOne {
	puo.mutation.SetBirthDate(s)
	return puo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBirthDate(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetBirthDate(*s)
	}
	return puo
}

// ClearBirthDate clears the value of the "birth_date" field.
func (puo *PersonUpdateOne) ClearBirthDate() *PersonUpdateOne {
	puo.mutation.ClearBirthDate()
	return puo
}

// SetEmail sets the "email" field.
func (puo *PersonUpdateOne) SetEmail(s string) *PersonUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableEmail(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// ClearEmail clears the value of the "email" field.
func (puo *PersonUpdateOne) ClearEmail() *PersonUpdateOne {
	puo.mutation.ClearEmail()
	return puo
}

// SetGivenName sets the "given_name" field.
func (puo *PersonUpdateOne) SetGivenName(s string) *PersonUpdateOne {
	puo.mutation.SetGivenName(s)
	return puo
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableGivenName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetGivenName(*s)
	}
	return puo
}

// ClearGivenName clears the value of the "given_name" field.
func (puo *PersonUpdateOne) ClearGivenName() *PersonUpdateOne {
	puo.mutation.ClearGivenName()
	return puo
}

// SetName sets the "name" field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *PersonUpdateOne) ClearName() *PersonUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetFamilyName sets the "family_name" field.
func (puo *PersonUpdateOne) SetFamilyName(s string) *PersonUpdateOne {
	puo.mutation.SetFamilyName(s)
	return puo
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableFamilyName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetFamilyName(*s)
	}
	return puo
}

// ClearFamilyName clears the value of the "family_name" field.
func (puo *PersonUpdateOne) ClearFamilyName() *PersonUpdateOne {
	puo.mutation.ClearFamilyName()
	return puo
}

// SetJobCategory sets the "job_category" field.
func (puo *PersonUpdateOne) SetJobCategory(s []string) *PersonUpdateOne {
	puo.mutation.SetJobCategory(s)
	return puo
}

// AppendJobCategory appends s to the "job_category" field.
func (puo *PersonUpdateOne) AppendJobCategory(s []string) *PersonUpdateOne {
	puo.mutation.AppendJobCategory(s)
	return puo
}

// ClearJobCategory clears the value of the "job_category" field.
func (puo *PersonUpdateOne) ClearJobCategory() *PersonUpdateOne {
	puo.mutation.ClearJobCategory()
	return puo
}

// SetPreferredGivenName sets the "preferred_given_name" field.
func (puo *PersonUpdateOne) SetPreferredGivenName(s string) *PersonUpdateOne {
	puo.mutation.SetPreferredGivenName(s)
	return puo
}

// SetNillablePreferredGivenName sets the "preferred_given_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePreferredGivenName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPreferredGivenName(*s)
	}
	return puo
}

// ClearPreferredGivenName clears the value of the "preferred_given_name" field.
func (puo *PersonUpdateOne) ClearPreferredGivenName() *PersonUpdateOne {
	puo.mutation.ClearPreferredGivenName()
	return puo
}

// SetPreferredFamilyName sets the "preferred_family_name" field.
func (puo *PersonUpdateOne) SetPreferredFamilyName(s string) *PersonUpdateOne {
	puo.mutation.SetPreferredFamilyName(s)
	return puo
}

// SetNillablePreferredFamilyName sets the "preferred_family_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePreferredFamilyName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPreferredFamilyName(*s)
	}
	return puo
}

// ClearPreferredFamilyName clears the value of the "preferred_family_name" field.
func (puo *PersonUpdateOne) ClearPreferredFamilyName() *PersonUpdateOne {
	puo.mutation.ClearPreferredFamilyName()
	return puo
}

// SetHonorificPrefix sets the "honorific_prefix" field.
func (puo *PersonUpdateOne) SetHonorificPrefix(s string) *PersonUpdateOne {
	puo.mutation.SetHonorificPrefix(s)
	return puo
}

// SetNillableHonorificPrefix sets the "honorific_prefix" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableHonorificPrefix(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetHonorificPrefix(*s)
	}
	return puo
}

// ClearHonorificPrefix clears the value of the "honorific_prefix" field.
func (puo *PersonUpdateOne) ClearHonorificPrefix() *PersonUpdateOne {
	puo.mutation.ClearHonorificPrefix()
	return puo
}

// SetRole sets the "role" field.
func (puo *PersonUpdateOne) SetRole(s []string) *PersonUpdateOne {
	puo.mutation.SetRole(s)
	return puo
}

// AppendRole appends s to the "role" field.
func (puo *PersonUpdateOne) AppendRole(s []string) *PersonUpdateOne {
	puo.mutation.AppendRole(s)
	return puo
}

// ClearRole clears the value of the "role" field.
func (puo *PersonUpdateOne) ClearRole() *PersonUpdateOne {
	puo.mutation.ClearRole()
	return puo
}

// SetSettings sets the "settings" field.
func (puo *PersonUpdateOne) SetSettings(m map[string]string) *PersonUpdateOne {
	puo.mutation.SetSettings(m)
	return puo
}

// ClearSettings clears the value of the "settings" field.
func (puo *PersonUpdateOne) ClearSettings() *PersonUpdateOne {
	puo.mutation.ClearSettings()
	return puo
}

// SetObjectClass sets the "object_class" field.
func (puo *PersonUpdateOne) SetObjectClass(s []string) *PersonUpdateOne {
	puo.mutation.SetObjectClass(s)
	return puo
}

// AppendObjectClass appends s to the "object_class" field.
func (puo *PersonUpdateOne) AppendObjectClass(s []string) *PersonUpdateOne {
	puo.mutation.AppendObjectClass(s)
	return puo
}

// ClearObjectClass clears the value of the "object_class" field.
func (puo *PersonUpdateOne) ClearObjectClass() *PersonUpdateOne {
	puo.mutation.ClearObjectClass()
	return puo
}

// SetExpirationDate sets the "expiration_date" field.
func (puo *PersonUpdateOne) SetExpirationDate(s string) *PersonUpdateOne {
	puo.mutation.SetExpirationDate(s)
	return puo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableExpirationDate(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetExpirationDate(*s)
	}
	return puo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (puo *PersonUpdateOne) ClearExpirationDate() *PersonUpdateOne {
	puo.mutation.ClearExpirationDate()
	return puo
}

// SetToken sets the "token" field.
func (puo *PersonUpdateOne) SetToken(s []string) *PersonUpdateOne {
	puo.mutation.SetToken(s)
	return puo
}

// AppendToken appends s to the "token" field.
func (puo *PersonUpdateOne) AppendToken(s []string) *PersonUpdateOne {
	puo.mutation.AppendToken(s)
	return puo
}

// ClearToken clears the value of the "token" field.
func (puo *PersonUpdateOne) ClearToken() *PersonUpdateOne {
	puo.mutation.ClearToken()
	return puo
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (puo *PersonUpdateOne) Where(ps ...predicate.Person) *PersonUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	puo.defaults()
	return withHooks[*Person, PersonMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PersonUpdateOne) defaults() {
	if _, ok := puo.mutation.DateUpdated(); !ok {
		v := person.UpdateDefaultDateUpdated()
		puo.mutation.SetDateUpdated(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PersonUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PersonUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Person.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DateUpdated(); ok {
		_spec.SetField(person.FieldDateUpdated, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Identifier(); ok {
		_spec.SetField(person.FieldIdentifier, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedIdentifier(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldIdentifier, value)
		})
	}
	if puo.mutation.IdentifierCleared() {
		_spec.ClearField(person.FieldIdentifier, field.TypeJSON)
	}
	if value, ok := puo.mutation.IdentifierValues(); ok {
		_spec.SetField(person.FieldIdentifierValues, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedIdentifierValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldIdentifierValues, value)
		})
	}
	if puo.mutation.IdentifierValuesCleared() {
		_spec.ClearField(person.FieldIdentifierValues, field.TypeJSON)
	}
	if value, ok := puo.mutation.Active(); ok {
		_spec.SetField(person.FieldActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.BirthDate(); ok {
		_spec.SetField(person.FieldBirthDate, field.TypeString, value)
	}
	if puo.mutation.BirthDateCleared() {
		_spec.ClearField(person.FieldBirthDate, field.TypeString)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
	}
	if puo.mutation.EmailCleared() {
		_spec.ClearField(person.FieldEmail, field.TypeString)
	}
	if value, ok := puo.mutation.GivenName(); ok {
		_spec.SetField(person.FieldGivenName, field.TypeString, value)
	}
	if puo.mutation.GivenNameCleared() {
		_spec.ClearField(person.FieldGivenName, field.TypeString)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(person.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(person.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.FamilyName(); ok {
		_spec.SetField(person.FieldFamilyName, field.TypeString, value)
	}
	if puo.mutation.FamilyNameCleared() {
		_spec.ClearField(person.FieldFamilyName, field.TypeString)
	}
	if value, ok := puo.mutation.JobCategory(); ok {
		_spec.SetField(person.FieldJobCategory, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedJobCategory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldJobCategory, value)
		})
	}
	if puo.mutation.JobCategoryCleared() {
		_spec.ClearField(person.FieldJobCategory, field.TypeJSON)
	}
	if value, ok := puo.mutation.PreferredGivenName(); ok {
		_spec.SetField(person.FieldPreferredGivenName, field.TypeString, value)
	}
	if puo.mutation.PreferredGivenNameCleared() {
		_spec.ClearField(person.FieldPreferredGivenName, field.TypeString)
	}
	if value, ok := puo.mutation.PreferredFamilyName(); ok {
		_spec.SetField(person.FieldPreferredFamilyName, field.TypeString, value)
	}
	if puo.mutation.PreferredFamilyNameCleared() {
		_spec.ClearField(person.FieldPreferredFamilyName, field.TypeString)
	}
	if value, ok := puo.mutation.HonorificPrefix(); ok {
		_spec.SetField(person.FieldHonorificPrefix, field.TypeString, value)
	}
	if puo.mutation.HonorificPrefixCleared() {
		_spec.ClearField(person.FieldHonorificPrefix, field.TypeString)
	}
	if value, ok := puo.mutation.Role(); ok {
		_spec.SetField(person.FieldRole, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedRole(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldRole, value)
		})
	}
	if puo.mutation.RoleCleared() {
		_spec.ClearField(person.FieldRole, field.TypeJSON)
	}
	if value, ok := puo.mutation.Settings(); ok {
		_spec.SetField(person.FieldSettings, field.TypeJSON, value)
	}
	if puo.mutation.SettingsCleared() {
		_spec.ClearField(person.FieldSettings, field.TypeJSON)
	}
	if value, ok := puo.mutation.ObjectClass(); ok {
		_spec.SetField(person.FieldObjectClass, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedObjectClass(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldObjectClass, value)
		})
	}
	if puo.mutation.ObjectClassCleared() {
		_spec.ClearField(person.FieldObjectClass, field.TypeJSON)
	}
	if value, ok := puo.mutation.ExpirationDate(); ok {
		_spec.SetField(person.FieldExpirationDate, field.TypeString, value)
	}
	if puo.mutation.ExpirationDateCleared() {
		_spec.ClearField(person.FieldExpirationDate, field.TypeString)
	}
	if value, ok := puo.mutation.Token(); ok {
		_spec.SetField(person.FieldToken, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedToken(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldToken, value)
		})
	}
	if puo.mutation.TokenCleared() {
		_spec.ClearField(person.FieldToken, field.TypeJSON)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
