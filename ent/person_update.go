// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/people/ent/person"
	"github.com/ugent-library/people/ent/predicate"
	"github.com/ugent-library/people/ent/schema"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDateUpdated sets the "date_updated" field.
func (pu *PersonUpdate) SetDateUpdated(t time.Time) *PersonUpdate {
	pu.mutation.SetDateUpdated(t)
	return pu
}

// SetActive sets the "active" field.
func (pu *PersonUpdate) SetActive(b bool) *PersonUpdate {
	pu.mutation.SetActive(b)
	return pu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableActive(b *bool) *PersonUpdate {
	if b != nil {
		pu.SetActive(*b)
	}
	return pu
}

// SetBirthDate sets the "birth_date" field.
func (pu *PersonUpdate) SetBirthDate(s string) *PersonUpdate {
	pu.mutation.SetBirthDate(s)
	return pu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBirthDate(s *string) *PersonUpdate {
	if s != nil {
		pu.SetBirthDate(*s)
	}
	return pu
}

// ClearBirthDate clears the value of the "birth_date" field.
func (pu *PersonUpdate) ClearBirthDate() *PersonUpdate {
	pu.mutation.ClearBirthDate()
	return pu
}

// SetEmail sets the "email" field.
func (pu *PersonUpdate) SetEmail(s string) *PersonUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableEmail(s *string) *PersonUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// ClearEmail clears the value of the "email" field.
func (pu *PersonUpdate) ClearEmail() *PersonUpdate {
	pu.mutation.ClearEmail()
	return pu
}

// SetOtherID sets the "other_id" field.
func (pu *PersonUpdate) SetOtherID(sr []schema.IdRef) *PersonUpdate {
	pu.mutation.SetOtherID(sr)
	return pu
}

// AppendOtherID appends sr to the "other_id" field.
func (pu *PersonUpdate) AppendOtherID(sr []schema.IdRef) *PersonUpdate {
	pu.mutation.AppendOtherID(sr)
	return pu
}

// ClearOtherID clears the value of the "other_id" field.
func (pu *PersonUpdate) ClearOtherID() *PersonUpdate {
	pu.mutation.ClearOtherID()
	return pu
}

// SetOrganizationID sets the "organization_id" field.
func (pu *PersonUpdate) SetOrganizationID(s []string) *PersonUpdate {
	pu.mutation.SetOrganizationID(s)
	return pu
}

// AppendOrganizationID appends s to the "organization_id" field.
func (pu *PersonUpdate) AppendOrganizationID(s []string) *PersonUpdate {
	pu.mutation.AppendOrganizationID(s)
	return pu
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (pu *PersonUpdate) ClearOrganizationID() *PersonUpdate {
	pu.mutation.ClearOrganizationID()
	return pu
}

// SetFirstName sets the "first_name" field.
func (pu *PersonUpdate) SetFirstName(s string) *PersonUpdate {
	pu.mutation.SetFirstName(s)
	return pu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableFirstName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetFirstName(*s)
	}
	return pu
}

// ClearFirstName clears the value of the "first_name" field.
func (pu *PersonUpdate) ClearFirstName() *PersonUpdate {
	pu.mutation.ClearFirstName()
	return pu
}

// SetFullName sets the "full_name" field.
func (pu *PersonUpdate) SetFullName(s string) *PersonUpdate {
	pu.mutation.SetFullName(s)
	return pu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableFullName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetFullName(*s)
	}
	return pu
}

// ClearFullName clears the value of the "full_name" field.
func (pu *PersonUpdate) ClearFullName() *PersonUpdate {
	pu.mutation.ClearFullName()
	return pu
}

// SetLastName sets the "last_name" field.
func (pu *PersonUpdate) SetLastName(s string) *PersonUpdate {
	pu.mutation.SetLastName(s)
	return pu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableLastName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetLastName(*s)
	}
	return pu
}

// ClearLastName clears the value of the "last_name" field.
func (pu *PersonUpdate) ClearLastName() *PersonUpdate {
	pu.mutation.ClearLastName()
	return pu
}

// SetCategory sets the "category" field.
func (pu *PersonUpdate) SetCategory(s []string) *PersonUpdate {
	pu.mutation.SetCategory(s)
	return pu
}

// AppendCategory appends s to the "category" field.
func (pu *PersonUpdate) AppendCategory(s []string) *PersonUpdate {
	pu.mutation.AppendCategory(s)
	return pu
}

// ClearCategory clears the value of the "category" field.
func (pu *PersonUpdate) ClearCategory() *PersonUpdate {
	pu.mutation.ClearCategory()
	return pu
}

// SetOrcid sets the "orcid" field.
func (pu *PersonUpdate) SetOrcid(s string) *PersonUpdate {
	pu.mutation.SetOrcid(s)
	return pu
}

// SetNillableOrcid sets the "orcid" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableOrcid(s *string) *PersonUpdate {
	if s != nil {
		pu.SetOrcid(*s)
	}
	return pu
}

// ClearOrcid clears the value of the "orcid" field.
func (pu *PersonUpdate) ClearOrcid() *PersonUpdate {
	pu.mutation.ClearOrcid()
	return pu
}

// SetOrcidToken sets the "orcid_token" field.
func (pu *PersonUpdate) SetOrcidToken(s string) *PersonUpdate {
	pu.mutation.SetOrcidToken(s)
	return pu
}

// SetNillableOrcidToken sets the "orcid_token" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableOrcidToken(s *string) *PersonUpdate {
	if s != nil {
		pu.SetOrcidToken(*s)
	}
	return pu
}

// ClearOrcidToken clears the value of the "orcid_token" field.
func (pu *PersonUpdate) ClearOrcidToken() *PersonUpdate {
	pu.mutation.ClearOrcidToken()
	return pu
}

// SetPreferredFirstName sets the "preferred_first_name" field.
func (pu *PersonUpdate) SetPreferredFirstName(s string) *PersonUpdate {
	pu.mutation.SetPreferredFirstName(s)
	return pu
}

// SetNillablePreferredFirstName sets the "preferred_first_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePreferredFirstName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPreferredFirstName(*s)
	}
	return pu
}

// ClearPreferredFirstName clears the value of the "preferred_first_name" field.
func (pu *PersonUpdate) ClearPreferredFirstName() *PersonUpdate {
	pu.mutation.ClearPreferredFirstName()
	return pu
}

// SetPreferredLastName sets the "preferred_last_name" field.
func (pu *PersonUpdate) SetPreferredLastName(s string) *PersonUpdate {
	pu.mutation.SetPreferredLastName(s)
	return pu
}

// SetNillablePreferredLastName sets the "preferred_last_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePreferredLastName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPreferredLastName(*s)
	}
	return pu
}

// ClearPreferredLastName clears the value of the "preferred_last_name" field.
func (pu *PersonUpdate) ClearPreferredLastName() *PersonUpdate {
	pu.mutation.ClearPreferredLastName()
	return pu
}

// SetJobTitle sets the "job_title" field.
func (pu *PersonUpdate) SetJobTitle(s string) *PersonUpdate {
	pu.mutation.SetJobTitle(s)
	return pu
}

// SetNillableJobTitle sets the "job_title" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableJobTitle(s *string) *PersonUpdate {
	if s != nil {
		pu.SetJobTitle(*s)
	}
	return pu
}

// ClearJobTitle clears the value of the "job_title" field.
func (pu *PersonUpdate) ClearJobTitle() *PersonUpdate {
	pu.mutation.ClearJobTitle()
	return pu
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks[int, PersonMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PersonUpdate) defaults() {
	if _, ok := pu.mutation.DateUpdated(); !ok {
		v := person.UpdateDefaultDateUpdated()
		pu.mutation.SetDateUpdated(v)
	}
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DateUpdated(); ok {
		_spec.SetField(person.FieldDateUpdated, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Active(); ok {
		_spec.SetField(person.FieldActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.BirthDate(); ok {
		_spec.SetField(person.FieldBirthDate, field.TypeString, value)
	}
	if pu.mutation.BirthDateCleared() {
		_spec.ClearField(person.FieldBirthDate, field.TypeString)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
	}
	if pu.mutation.EmailCleared() {
		_spec.ClearField(person.FieldEmail, field.TypeString)
	}
	if value, ok := pu.mutation.OtherID(); ok {
		_spec.SetField(person.FieldOtherID, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedOtherID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldOtherID, value)
		})
	}
	if pu.mutation.OtherIDCleared() {
		_spec.ClearField(person.FieldOtherID, field.TypeJSON)
	}
	if value, ok := pu.mutation.OrganizationID(); ok {
		_spec.SetField(person.FieldOrganizationID, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedOrganizationID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldOrganizationID, value)
		})
	}
	if pu.mutation.OrganizationIDCleared() {
		_spec.ClearField(person.FieldOrganizationID, field.TypeJSON)
	}
	if value, ok := pu.mutation.FirstName(); ok {
		_spec.SetField(person.FieldFirstName, field.TypeString, value)
	}
	if pu.mutation.FirstNameCleared() {
		_spec.ClearField(person.FieldFirstName, field.TypeString)
	}
	if value, ok := pu.mutation.FullName(); ok {
		_spec.SetField(person.FieldFullName, field.TypeString, value)
	}
	if pu.mutation.FullNameCleared() {
		_spec.ClearField(person.FieldFullName, field.TypeString)
	}
	if value, ok := pu.mutation.LastName(); ok {
		_spec.SetField(person.FieldLastName, field.TypeString, value)
	}
	if pu.mutation.LastNameCleared() {
		_spec.ClearField(person.FieldLastName, field.TypeString)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(person.FieldCategory, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedCategory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldCategory, value)
		})
	}
	if pu.mutation.CategoryCleared() {
		_spec.ClearField(person.FieldCategory, field.TypeJSON)
	}
	if value, ok := pu.mutation.Orcid(); ok {
		_spec.SetField(person.FieldOrcid, field.TypeString, value)
	}
	if pu.mutation.OrcidCleared() {
		_spec.ClearField(person.FieldOrcid, field.TypeString)
	}
	if value, ok := pu.mutation.OrcidToken(); ok {
		_spec.SetField(person.FieldOrcidToken, field.TypeString, value)
	}
	if pu.mutation.OrcidTokenCleared() {
		_spec.ClearField(person.FieldOrcidToken, field.TypeString)
	}
	if value, ok := pu.mutation.PreferredFirstName(); ok {
		_spec.SetField(person.FieldPreferredFirstName, field.TypeString, value)
	}
	if pu.mutation.PreferredFirstNameCleared() {
		_spec.ClearField(person.FieldPreferredFirstName, field.TypeString)
	}
	if value, ok := pu.mutation.PreferredLastName(); ok {
		_spec.SetField(person.FieldPreferredLastName, field.TypeString, value)
	}
	if pu.mutation.PreferredLastNameCleared() {
		_spec.ClearField(person.FieldPreferredLastName, field.TypeString)
	}
	if value, ok := pu.mutation.JobTitle(); ok {
		_spec.SetField(person.FieldJobTitle, field.TypeString, value)
	}
	if pu.mutation.JobTitleCleared() {
		_spec.ClearField(person.FieldJobTitle, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetDateUpdated sets the "date_updated" field.
func (puo *PersonUpdateOne) SetDateUpdated(t time.Time) *PersonUpdateOne {
	puo.mutation.SetDateUpdated(t)
	return puo
}

// SetActive sets the "active" field.
func (puo *PersonUpdateOne) SetActive(b bool) *PersonUpdateOne {
	puo.mutation.SetActive(b)
	return puo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableActive(b *bool) *PersonUpdateOne {
	if b != nil {
		puo.SetActive(*b)
	}
	return puo
}

// SetBirthDate sets the "birth_date" field.
func (puo *PersonUpdateOne) SetBirthDate(s string) *PersonUpdateOne {
	puo.mutation.SetBirthDate(s)
	return puo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBirthDate(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetBirthDate(*s)
	}
	return puo
}

// ClearBirthDate clears the value of the "birth_date" field.
func (puo *PersonUpdateOne) ClearBirthDate() *PersonUpdateOne {
	puo.mutation.ClearBirthDate()
	return puo
}

// SetEmail sets the "email" field.
func (puo *PersonUpdateOne) SetEmail(s string) *PersonUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableEmail(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// ClearEmail clears the value of the "email" field.
func (puo *PersonUpdateOne) ClearEmail() *PersonUpdateOne {
	puo.mutation.ClearEmail()
	return puo
}

// SetOtherID sets the "other_id" field.
func (puo *PersonUpdateOne) SetOtherID(sr []schema.IdRef) *PersonUpdateOne {
	puo.mutation.SetOtherID(sr)
	return puo
}

// AppendOtherID appends sr to the "other_id" field.
func (puo *PersonUpdateOne) AppendOtherID(sr []schema.IdRef) *PersonUpdateOne {
	puo.mutation.AppendOtherID(sr)
	return puo
}

// ClearOtherID clears the value of the "other_id" field.
func (puo *PersonUpdateOne) ClearOtherID() *PersonUpdateOne {
	puo.mutation.ClearOtherID()
	return puo
}

// SetOrganizationID sets the "organization_id" field.
func (puo *PersonUpdateOne) SetOrganizationID(s []string) *PersonUpdateOne {
	puo.mutation.SetOrganizationID(s)
	return puo
}

// AppendOrganizationID appends s to the "organization_id" field.
func (puo *PersonUpdateOne) AppendOrganizationID(s []string) *PersonUpdateOne {
	puo.mutation.AppendOrganizationID(s)
	return puo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (puo *PersonUpdateOne) ClearOrganizationID() *PersonUpdateOne {
	puo.mutation.ClearOrganizationID()
	return puo
}

// SetFirstName sets the "first_name" field.
func (puo *PersonUpdateOne) SetFirstName(s string) *PersonUpdateOne {
	puo.mutation.SetFirstName(s)
	return puo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableFirstName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetFirstName(*s)
	}
	return puo
}

// ClearFirstName clears the value of the "first_name" field.
func (puo *PersonUpdateOne) ClearFirstName() *PersonUpdateOne {
	puo.mutation.ClearFirstName()
	return puo
}

// SetFullName sets the "full_name" field.
func (puo *PersonUpdateOne) SetFullName(s string) *PersonUpdateOne {
	puo.mutation.SetFullName(s)
	return puo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableFullName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetFullName(*s)
	}
	return puo
}

// ClearFullName clears the value of the "full_name" field.
func (puo *PersonUpdateOne) ClearFullName() *PersonUpdateOne {
	puo.mutation.ClearFullName()
	return puo
}

// SetLastName sets the "last_name" field.
func (puo *PersonUpdateOne) SetLastName(s string) *PersonUpdateOne {
	puo.mutation.SetLastName(s)
	return puo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableLastName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetLastName(*s)
	}
	return puo
}

// ClearLastName clears the value of the "last_name" field.
func (puo *PersonUpdateOne) ClearLastName() *PersonUpdateOne {
	puo.mutation.ClearLastName()
	return puo
}

// SetCategory sets the "category" field.
func (puo *PersonUpdateOne) SetCategory(s []string) *PersonUpdateOne {
	puo.mutation.SetCategory(s)
	return puo
}

// AppendCategory appends s to the "category" field.
func (puo *PersonUpdateOne) AppendCategory(s []string) *PersonUpdateOne {
	puo.mutation.AppendCategory(s)
	return puo
}

// ClearCategory clears the value of the "category" field.
func (puo *PersonUpdateOne) ClearCategory() *PersonUpdateOne {
	puo.mutation.ClearCategory()
	return puo
}

// SetOrcid sets the "orcid" field.
func (puo *PersonUpdateOne) SetOrcid(s string) *PersonUpdateOne {
	puo.mutation.SetOrcid(s)
	return puo
}

// SetNillableOrcid sets the "orcid" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableOrcid(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetOrcid(*s)
	}
	return puo
}

// ClearOrcid clears the value of the "orcid" field.
func (puo *PersonUpdateOne) ClearOrcid() *PersonUpdateOne {
	puo.mutation.ClearOrcid()
	return puo
}

// SetOrcidToken sets the "orcid_token" field.
func (puo *PersonUpdateOne) SetOrcidToken(s string) *PersonUpdateOne {
	puo.mutation.SetOrcidToken(s)
	return puo
}

// SetNillableOrcidToken sets the "orcid_token" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableOrcidToken(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetOrcidToken(*s)
	}
	return puo
}

// ClearOrcidToken clears the value of the "orcid_token" field.
func (puo *PersonUpdateOne) ClearOrcidToken() *PersonUpdateOne {
	puo.mutation.ClearOrcidToken()
	return puo
}

// SetPreferredFirstName sets the "preferred_first_name" field.
func (puo *PersonUpdateOne) SetPreferredFirstName(s string) *PersonUpdateOne {
	puo.mutation.SetPreferredFirstName(s)
	return puo
}

// SetNillablePreferredFirstName sets the "preferred_first_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePreferredFirstName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPreferredFirstName(*s)
	}
	return puo
}

// ClearPreferredFirstName clears the value of the "preferred_first_name" field.
func (puo *PersonUpdateOne) ClearPreferredFirstName() *PersonUpdateOne {
	puo.mutation.ClearPreferredFirstName()
	return puo
}

// SetPreferredLastName sets the "preferred_last_name" field.
func (puo *PersonUpdateOne) SetPreferredLastName(s string) *PersonUpdateOne {
	puo.mutation.SetPreferredLastName(s)
	return puo
}

// SetNillablePreferredLastName sets the "preferred_last_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePreferredLastName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPreferredLastName(*s)
	}
	return puo
}

// ClearPreferredLastName clears the value of the "preferred_last_name" field.
func (puo *PersonUpdateOne) ClearPreferredLastName() *PersonUpdateOne {
	puo.mutation.ClearPreferredLastName()
	return puo
}

// SetJobTitle sets the "job_title" field.
func (puo *PersonUpdateOne) SetJobTitle(s string) *PersonUpdateOne {
	puo.mutation.SetJobTitle(s)
	return puo
}

// SetNillableJobTitle sets the "job_title" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableJobTitle(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetJobTitle(*s)
	}
	return puo
}

// ClearJobTitle clears the value of the "job_title" field.
func (puo *PersonUpdateOne) ClearJobTitle() *PersonUpdateOne {
	puo.mutation.ClearJobTitle()
	return puo
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (puo *PersonUpdateOne) Where(ps ...predicate.Person) *PersonUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	puo.defaults()
	return withHooks[*Person, PersonMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PersonUpdateOne) defaults() {
	if _, ok := puo.mutation.DateUpdated(); !ok {
		v := person.UpdateDefaultDateUpdated()
		puo.mutation.SetDateUpdated(v)
	}
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Person.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DateUpdated(); ok {
		_spec.SetField(person.FieldDateUpdated, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Active(); ok {
		_spec.SetField(person.FieldActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.BirthDate(); ok {
		_spec.SetField(person.FieldBirthDate, field.TypeString, value)
	}
	if puo.mutation.BirthDateCleared() {
		_spec.ClearField(person.FieldBirthDate, field.TypeString)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
	}
	if puo.mutation.EmailCleared() {
		_spec.ClearField(person.FieldEmail, field.TypeString)
	}
	if value, ok := puo.mutation.OtherID(); ok {
		_spec.SetField(person.FieldOtherID, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedOtherID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldOtherID, value)
		})
	}
	if puo.mutation.OtherIDCleared() {
		_spec.ClearField(person.FieldOtherID, field.TypeJSON)
	}
	if value, ok := puo.mutation.OrganizationID(); ok {
		_spec.SetField(person.FieldOrganizationID, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedOrganizationID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldOrganizationID, value)
		})
	}
	if puo.mutation.OrganizationIDCleared() {
		_spec.ClearField(person.FieldOrganizationID, field.TypeJSON)
	}
	if value, ok := puo.mutation.FirstName(); ok {
		_spec.SetField(person.FieldFirstName, field.TypeString, value)
	}
	if puo.mutation.FirstNameCleared() {
		_spec.ClearField(person.FieldFirstName, field.TypeString)
	}
	if value, ok := puo.mutation.FullName(); ok {
		_spec.SetField(person.FieldFullName, field.TypeString, value)
	}
	if puo.mutation.FullNameCleared() {
		_spec.ClearField(person.FieldFullName, field.TypeString)
	}
	if value, ok := puo.mutation.LastName(); ok {
		_spec.SetField(person.FieldLastName, field.TypeString, value)
	}
	if puo.mutation.LastNameCleared() {
		_spec.ClearField(person.FieldLastName, field.TypeString)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(person.FieldCategory, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedCategory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldCategory, value)
		})
	}
	if puo.mutation.CategoryCleared() {
		_spec.ClearField(person.FieldCategory, field.TypeJSON)
	}
	if value, ok := puo.mutation.Orcid(); ok {
		_spec.SetField(person.FieldOrcid, field.TypeString, value)
	}
	if puo.mutation.OrcidCleared() {
		_spec.ClearField(person.FieldOrcid, field.TypeString)
	}
	if value, ok := puo.mutation.OrcidToken(); ok {
		_spec.SetField(person.FieldOrcidToken, field.TypeString, value)
	}
	if puo.mutation.OrcidTokenCleared() {
		_spec.ClearField(person.FieldOrcidToken, field.TypeString)
	}
	if value, ok := puo.mutation.PreferredFirstName(); ok {
		_spec.SetField(person.FieldPreferredFirstName, field.TypeString, value)
	}
	if puo.mutation.PreferredFirstNameCleared() {
		_spec.ClearField(person.FieldPreferredFirstName, field.TypeString)
	}
	if value, ok := puo.mutation.PreferredLastName(); ok {
		_spec.SetField(person.FieldPreferredLastName, field.TypeString, value)
	}
	if puo.mutation.PreferredLastNameCleared() {
		_spec.ClearField(person.FieldPreferredLastName, field.TypeString)
	}
	if value, ok := puo.mutation.JobTitle(); ok {
		_spec.SetField(person.FieldJobTitle, field.TypeString, value)
	}
	if puo.mutation.JobTitleCleared() {
		_spec.ClearField(person.FieldJobTitle, field.TypeString)
	}
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
