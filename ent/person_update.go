// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/people-service/ent/organization"
	"github.com/ugent-library/people-service/ent/organizationperson"
	"github.com/ugent-library/people-service/ent/person"
	"github.com/ugent-library/people-service/ent/predicate"
	"github.com/ugent-library/people-service/ent/schema"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks     []Hook
	mutation  *PersonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDateUpdated sets the "date_updated" field.
func (pu *PersonUpdate) SetDateUpdated(t time.Time) *PersonUpdate {
	pu.mutation.SetDateUpdated(t)
	return pu
}

// SetGismoID sets the "gismo_id" field.
func (pu *PersonUpdate) SetGismoID(s string) *PersonUpdate {
	pu.mutation.SetGismoID(s)
	return pu
}

// SetNillableGismoID sets the "gismo_id" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableGismoID(s *string) *PersonUpdate {
	if s != nil {
		pu.SetGismoID(*s)
	}
	return pu
}

// ClearGismoID clears the value of the "gismo_id" field.
func (pu *PersonUpdate) ClearGismoID() *PersonUpdate {
	pu.mutation.ClearGismoID()
	return pu
}

// SetActive sets the "active" field.
func (pu *PersonUpdate) SetActive(b bool) *PersonUpdate {
	pu.mutation.SetActive(b)
	return pu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableActive(b *bool) *PersonUpdate {
	if b != nil {
		pu.SetActive(*b)
	}
	return pu
}

// SetBirthDate sets the "birth_date" field.
func (pu *PersonUpdate) SetBirthDate(s string) *PersonUpdate {
	pu.mutation.SetBirthDate(s)
	return pu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBirthDate(s *string) *PersonUpdate {
	if s != nil {
		pu.SetBirthDate(*s)
	}
	return pu
}

// ClearBirthDate clears the value of the "birth_date" field.
func (pu *PersonUpdate) ClearBirthDate() *PersonUpdate {
	pu.mutation.ClearBirthDate()
	return pu
}

// SetEmail sets the "email" field.
func (pu *PersonUpdate) SetEmail(s string) *PersonUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableEmail(s *string) *PersonUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// ClearEmail clears the value of the "email" field.
func (pu *PersonUpdate) ClearEmail() *PersonUpdate {
	pu.mutation.ClearEmail()
	return pu
}

// SetOtherID sets the "other_id" field.
func (pu *PersonUpdate) SetOtherID(sr []schema.IdRef) *PersonUpdate {
	pu.mutation.SetOtherID(sr)
	return pu
}

// AppendOtherID appends sr to the "other_id" field.
func (pu *PersonUpdate) AppendOtherID(sr []schema.IdRef) *PersonUpdate {
	pu.mutation.AppendOtherID(sr)
	return pu
}

// ClearOtherID clears the value of the "other_id" field.
func (pu *PersonUpdate) ClearOtherID() *PersonUpdate {
	pu.mutation.ClearOtherID()
	return pu
}

// SetFirstName sets the "first_name" field.
func (pu *PersonUpdate) SetFirstName(s string) *PersonUpdate {
	pu.mutation.SetFirstName(s)
	return pu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableFirstName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetFirstName(*s)
	}
	return pu
}

// ClearFirstName clears the value of the "first_name" field.
func (pu *PersonUpdate) ClearFirstName() *PersonUpdate {
	pu.mutation.ClearFirstName()
	return pu
}

// SetFullName sets the "full_name" field.
func (pu *PersonUpdate) SetFullName(s string) *PersonUpdate {
	pu.mutation.SetFullName(s)
	return pu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableFullName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetFullName(*s)
	}
	return pu
}

// ClearFullName clears the value of the "full_name" field.
func (pu *PersonUpdate) ClearFullName() *PersonUpdate {
	pu.mutation.ClearFullName()
	return pu
}

// SetLastName sets the "last_name" field.
func (pu *PersonUpdate) SetLastName(s string) *PersonUpdate {
	pu.mutation.SetLastName(s)
	return pu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableLastName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetLastName(*s)
	}
	return pu
}

// ClearLastName clears the value of the "last_name" field.
func (pu *PersonUpdate) ClearLastName() *PersonUpdate {
	pu.mutation.ClearLastName()
	return pu
}

// SetJobCategory sets the "job_category" field.
func (pu *PersonUpdate) SetJobCategory(s []string) *PersonUpdate {
	pu.mutation.SetJobCategory(s)
	return pu
}

// AppendJobCategory appends s to the "job_category" field.
func (pu *PersonUpdate) AppendJobCategory(s []string) *PersonUpdate {
	pu.mutation.AppendJobCategory(s)
	return pu
}

// ClearJobCategory clears the value of the "job_category" field.
func (pu *PersonUpdate) ClearJobCategory() *PersonUpdate {
	pu.mutation.ClearJobCategory()
	return pu
}

// SetOrcid sets the "orcid" field.
func (pu *PersonUpdate) SetOrcid(s string) *PersonUpdate {
	pu.mutation.SetOrcid(s)
	return pu
}

// SetNillableOrcid sets the "orcid" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableOrcid(s *string) *PersonUpdate {
	if s != nil {
		pu.SetOrcid(*s)
	}
	return pu
}

// ClearOrcid clears the value of the "orcid" field.
func (pu *PersonUpdate) ClearOrcid() *PersonUpdate {
	pu.mutation.ClearOrcid()
	return pu
}

// SetOrcidToken sets the "orcid_token" field.
func (pu *PersonUpdate) SetOrcidToken(s string) *PersonUpdate {
	pu.mutation.SetOrcidToken(s)
	return pu
}

// SetNillableOrcidToken sets the "orcid_token" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableOrcidToken(s *string) *PersonUpdate {
	if s != nil {
		pu.SetOrcidToken(*s)
	}
	return pu
}

// ClearOrcidToken clears the value of the "orcid_token" field.
func (pu *PersonUpdate) ClearOrcidToken() *PersonUpdate {
	pu.mutation.ClearOrcidToken()
	return pu
}

// SetPreferredFirstName sets the "preferred_first_name" field.
func (pu *PersonUpdate) SetPreferredFirstName(s string) *PersonUpdate {
	pu.mutation.SetPreferredFirstName(s)
	return pu
}

// SetNillablePreferredFirstName sets the "preferred_first_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePreferredFirstName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPreferredFirstName(*s)
	}
	return pu
}

// ClearPreferredFirstName clears the value of the "preferred_first_name" field.
func (pu *PersonUpdate) ClearPreferredFirstName() *PersonUpdate {
	pu.mutation.ClearPreferredFirstName()
	return pu
}

// SetPreferredLastName sets the "preferred_last_name" field.
func (pu *PersonUpdate) SetPreferredLastName(s string) *PersonUpdate {
	pu.mutation.SetPreferredLastName(s)
	return pu
}

// SetNillablePreferredLastName sets the "preferred_last_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePreferredLastName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPreferredLastName(*s)
	}
	return pu
}

// ClearPreferredLastName clears the value of the "preferred_last_name" field.
func (pu *PersonUpdate) ClearPreferredLastName() *PersonUpdate {
	pu.mutation.ClearPreferredLastName()
	return pu
}

// SetTitle sets the "title" field.
func (pu *PersonUpdate) SetTitle(s string) *PersonUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableTitle(s *string) *PersonUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// ClearTitle clears the value of the "title" field.
func (pu *PersonUpdate) ClearTitle() *PersonUpdate {
	pu.mutation.ClearTitle()
	return pu
}

// SetRole sets the "role" field.
func (pu *PersonUpdate) SetRole(s []string) *PersonUpdate {
	pu.mutation.SetRole(s)
	return pu
}

// AppendRole appends s to the "role" field.
func (pu *PersonUpdate) AppendRole(s []string) *PersonUpdate {
	pu.mutation.AppendRole(s)
	return pu
}

// ClearRole clears the value of the "role" field.
func (pu *PersonUpdate) ClearRole() *PersonUpdate {
	pu.mutation.ClearRole()
	return pu
}

// SetSettings sets the "settings" field.
func (pu *PersonUpdate) SetSettings(m map[string]string) *PersonUpdate {
	pu.mutation.SetSettings(m)
	return pu
}

// ClearSettings clears the value of the "settings" field.
func (pu *PersonUpdate) ClearSettings() *PersonUpdate {
	pu.mutation.ClearSettings()
	return pu
}

// SetObjectClass sets the "object_class" field.
func (pu *PersonUpdate) SetObjectClass(s []string) *PersonUpdate {
	pu.mutation.SetObjectClass(s)
	return pu
}

// AppendObjectClass appends s to the "object_class" field.
func (pu *PersonUpdate) AppendObjectClass(s []string) *PersonUpdate {
	pu.mutation.AppendObjectClass(s)
	return pu
}

// ClearObjectClass clears the value of the "object_class" field.
func (pu *PersonUpdate) ClearObjectClass() *PersonUpdate {
	pu.mutation.ClearObjectClass()
	return pu
}

// SetExpirationDate sets the "expiration_date" field.
func (pu *PersonUpdate) SetExpirationDate(s string) *PersonUpdate {
	pu.mutation.SetExpirationDate(s)
	return pu
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableExpirationDate(s *string) *PersonUpdate {
	if s != nil {
		pu.SetExpirationDate(*s)
	}
	return pu
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (pu *PersonUpdate) ClearExpirationDate() *PersonUpdate {
	pu.mutation.ClearExpirationDate()
	return pu
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (pu *PersonUpdate) AddOrganizationIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddOrganizationIDs(ids...)
	return pu
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (pu *PersonUpdate) AddOrganizations(o ...*Organization) *PersonUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrganizationIDs(ids...)
}

// AddOrganizationPersonIDs adds the "organization_person" edge to the OrganizationPerson entity by IDs.
func (pu *PersonUpdate) AddOrganizationPersonIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddOrganizationPersonIDs(ids...)
	return pu
}

// AddOrganizationPerson adds the "organization_person" edges to the OrganizationPerson entity.
func (pu *PersonUpdate) AddOrganizationPerson(o ...*OrganizationPerson) *PersonUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrganizationPersonIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (pu *PersonUpdate) ClearOrganizations() *PersonUpdate {
	pu.mutation.ClearOrganizations()
	return pu
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (pu *PersonUpdate) RemoveOrganizationIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemoveOrganizationIDs(ids...)
	return pu
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (pu *PersonUpdate) RemoveOrganizations(o ...*Organization) *PersonUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrganizationIDs(ids...)
}

// ClearOrganizationPerson clears all "organization_person" edges to the OrganizationPerson entity.
func (pu *PersonUpdate) ClearOrganizationPerson() *PersonUpdate {
	pu.mutation.ClearOrganizationPerson()
	return pu
}

// RemoveOrganizationPersonIDs removes the "organization_person" edge to OrganizationPerson entities by IDs.
func (pu *PersonUpdate) RemoveOrganizationPersonIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemoveOrganizationPersonIDs(ids...)
	return pu
}

// RemoveOrganizationPerson removes "organization_person" edges to OrganizationPerson entities.
func (pu *PersonUpdate) RemoveOrganizationPerson(o ...*OrganizationPerson) *PersonUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrganizationPersonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks[int, PersonMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PersonUpdate) defaults() {
	if _, ok := pu.mutation.DateUpdated(); !ok {
		v := person.UpdateDefaultDateUpdated()
		pu.mutation.SetDateUpdated(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PersonUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PersonUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DateUpdated(); ok {
		_spec.SetField(person.FieldDateUpdated, field.TypeTime, value)
	}
	if value, ok := pu.mutation.GismoID(); ok {
		_spec.SetField(person.FieldGismoID, field.TypeString, value)
	}
	if pu.mutation.GismoIDCleared() {
		_spec.ClearField(person.FieldGismoID, field.TypeString)
	}
	if value, ok := pu.mutation.Active(); ok {
		_spec.SetField(person.FieldActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.BirthDate(); ok {
		_spec.SetField(person.FieldBirthDate, field.TypeString, value)
	}
	if pu.mutation.BirthDateCleared() {
		_spec.ClearField(person.FieldBirthDate, field.TypeString)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
	}
	if pu.mutation.EmailCleared() {
		_spec.ClearField(person.FieldEmail, field.TypeString)
	}
	if value, ok := pu.mutation.OtherID(); ok {
		_spec.SetField(person.FieldOtherID, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedOtherID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldOtherID, value)
		})
	}
	if pu.mutation.OtherIDCleared() {
		_spec.ClearField(person.FieldOtherID, field.TypeJSON)
	}
	if value, ok := pu.mutation.FirstName(); ok {
		_spec.SetField(person.FieldFirstName, field.TypeString, value)
	}
	if pu.mutation.FirstNameCleared() {
		_spec.ClearField(person.FieldFirstName, field.TypeString)
	}
	if value, ok := pu.mutation.FullName(); ok {
		_spec.SetField(person.FieldFullName, field.TypeString, value)
	}
	if pu.mutation.FullNameCleared() {
		_spec.ClearField(person.FieldFullName, field.TypeString)
	}
	if value, ok := pu.mutation.LastName(); ok {
		_spec.SetField(person.FieldLastName, field.TypeString, value)
	}
	if pu.mutation.LastNameCleared() {
		_spec.ClearField(person.FieldLastName, field.TypeString)
	}
	if value, ok := pu.mutation.JobCategory(); ok {
		_spec.SetField(person.FieldJobCategory, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedJobCategory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldJobCategory, value)
		})
	}
	if pu.mutation.JobCategoryCleared() {
		_spec.ClearField(person.FieldJobCategory, field.TypeJSON)
	}
	if value, ok := pu.mutation.Orcid(); ok {
		_spec.SetField(person.FieldOrcid, field.TypeString, value)
	}
	if pu.mutation.OrcidCleared() {
		_spec.ClearField(person.FieldOrcid, field.TypeString)
	}
	if value, ok := pu.mutation.OrcidToken(); ok {
		_spec.SetField(person.FieldOrcidToken, field.TypeString, value)
	}
	if pu.mutation.OrcidTokenCleared() {
		_spec.ClearField(person.FieldOrcidToken, field.TypeString)
	}
	if value, ok := pu.mutation.PreferredFirstName(); ok {
		_spec.SetField(person.FieldPreferredFirstName, field.TypeString, value)
	}
	if pu.mutation.PreferredFirstNameCleared() {
		_spec.ClearField(person.FieldPreferredFirstName, field.TypeString)
	}
	if value, ok := pu.mutation.PreferredLastName(); ok {
		_spec.SetField(person.FieldPreferredLastName, field.TypeString, value)
	}
	if pu.mutation.PreferredLastNameCleared() {
		_spec.ClearField(person.FieldPreferredLastName, field.TypeString)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(person.FieldTitle, field.TypeString, value)
	}
	if pu.mutation.TitleCleared() {
		_spec.ClearField(person.FieldTitle, field.TypeString)
	}
	if value, ok := pu.mutation.Role(); ok {
		_spec.SetField(person.FieldRole, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedRole(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldRole, value)
		})
	}
	if pu.mutation.RoleCleared() {
		_spec.ClearField(person.FieldRole, field.TypeJSON)
	}
	if value, ok := pu.mutation.Settings(); ok {
		_spec.SetField(person.FieldSettings, field.TypeJSON, value)
	}
	if pu.mutation.SettingsCleared() {
		_spec.ClearField(person.FieldSettings, field.TypeJSON)
	}
	if value, ok := pu.mutation.ObjectClass(); ok {
		_spec.SetField(person.FieldObjectClass, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedObjectClass(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldObjectClass, value)
		})
	}
	if pu.mutation.ObjectClassCleared() {
		_spec.ClearField(person.FieldObjectClass, field.TypeJSON)
	}
	if value, ok := pu.mutation.ExpirationDate(); ok {
		_spec.SetField(person.FieldExpirationDate, field.TypeString, value)
	}
	if pu.mutation.ExpirationDateCleared() {
		_spec.ClearField(person.FieldExpirationDate, field.TypeString)
	}
	if pu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.OrganizationsTable,
			Columns: person.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		createE := &OrganizationPersonCreate{config: pu.config, mutation: newOrganizationPersonMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !pu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.OrganizationsTable,
			Columns: person.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationPersonCreate{config: pu.config, mutation: newOrganizationPersonMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.OrganizationsTable,
			Columns: person.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationPersonCreate{config: pu.config, mutation: newOrganizationPersonMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrganizationPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   person.OrganizationPersonTable,
			Columns: []string{person.OrganizationPersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationperson.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrganizationPersonIDs(); len(nodes) > 0 && !pu.mutation.OrganizationPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   person.OrganizationPersonTable,
			Columns: []string{person.OrganizationPersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationperson.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrganizationPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   person.OrganizationPersonTable,
			Columns: []string{person.OrganizationPersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationperson.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PersonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDateUpdated sets the "date_updated" field.
func (puo *PersonUpdateOne) SetDateUpdated(t time.Time) *PersonUpdateOne {
	puo.mutation.SetDateUpdated(t)
	return puo
}

// SetGismoID sets the "gismo_id" field.
func (puo *PersonUpdateOne) SetGismoID(s string) *PersonUpdateOne {
	puo.mutation.SetGismoID(s)
	return puo
}

// SetNillableGismoID sets the "gismo_id" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableGismoID(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetGismoID(*s)
	}
	return puo
}

// ClearGismoID clears the value of the "gismo_id" field.
func (puo *PersonUpdateOne) ClearGismoID() *PersonUpdateOne {
	puo.mutation.ClearGismoID()
	return puo
}

// SetActive sets the "active" field.
func (puo *PersonUpdateOne) SetActive(b bool) *PersonUpdateOne {
	puo.mutation.SetActive(b)
	return puo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableActive(b *bool) *PersonUpdateOne {
	if b != nil {
		puo.SetActive(*b)
	}
	return puo
}

// SetBirthDate sets the "birth_date" field.
func (puo *PersonUpdateOne) SetBirthDate(s string) *PersonUpdateOne {
	puo.mutation.SetBirthDate(s)
	return puo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBirthDate(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetBirthDate(*s)
	}
	return puo
}

// ClearBirthDate clears the value of the "birth_date" field.
func (puo *PersonUpdateOne) ClearBirthDate() *PersonUpdateOne {
	puo.mutation.ClearBirthDate()
	return puo
}

// SetEmail sets the "email" field.
func (puo *PersonUpdateOne) SetEmail(s string) *PersonUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableEmail(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// ClearEmail clears the value of the "email" field.
func (puo *PersonUpdateOne) ClearEmail() *PersonUpdateOne {
	puo.mutation.ClearEmail()
	return puo
}

// SetOtherID sets the "other_id" field.
func (puo *PersonUpdateOne) SetOtherID(sr []schema.IdRef) *PersonUpdateOne {
	puo.mutation.SetOtherID(sr)
	return puo
}

// AppendOtherID appends sr to the "other_id" field.
func (puo *PersonUpdateOne) AppendOtherID(sr []schema.IdRef) *PersonUpdateOne {
	puo.mutation.AppendOtherID(sr)
	return puo
}

// ClearOtherID clears the value of the "other_id" field.
func (puo *PersonUpdateOne) ClearOtherID() *PersonUpdateOne {
	puo.mutation.ClearOtherID()
	return puo
}

// SetFirstName sets the "first_name" field.
func (puo *PersonUpdateOne) SetFirstName(s string) *PersonUpdateOne {
	puo.mutation.SetFirstName(s)
	return puo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableFirstName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetFirstName(*s)
	}
	return puo
}

// ClearFirstName clears the value of the "first_name" field.
func (puo *PersonUpdateOne) ClearFirstName() *PersonUpdateOne {
	puo.mutation.ClearFirstName()
	return puo
}

// SetFullName sets the "full_name" field.
func (puo *PersonUpdateOne) SetFullName(s string) *PersonUpdateOne {
	puo.mutation.SetFullName(s)
	return puo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableFullName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetFullName(*s)
	}
	return puo
}

// ClearFullName clears the value of the "full_name" field.
func (puo *PersonUpdateOne) ClearFullName() *PersonUpdateOne {
	puo.mutation.ClearFullName()
	return puo
}

// SetLastName sets the "last_name" field.
func (puo *PersonUpdateOne) SetLastName(s string) *PersonUpdateOne {
	puo.mutation.SetLastName(s)
	return puo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableLastName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetLastName(*s)
	}
	return puo
}

// ClearLastName clears the value of the "last_name" field.
func (puo *PersonUpdateOne) ClearLastName() *PersonUpdateOne {
	puo.mutation.ClearLastName()
	return puo
}

// SetJobCategory sets the "job_category" field.
func (puo *PersonUpdateOne) SetJobCategory(s []string) *PersonUpdateOne {
	puo.mutation.SetJobCategory(s)
	return puo
}

// AppendJobCategory appends s to the "job_category" field.
func (puo *PersonUpdateOne) AppendJobCategory(s []string) *PersonUpdateOne {
	puo.mutation.AppendJobCategory(s)
	return puo
}

// ClearJobCategory clears the value of the "job_category" field.
func (puo *PersonUpdateOne) ClearJobCategory() *PersonUpdateOne {
	puo.mutation.ClearJobCategory()
	return puo
}

// SetOrcid sets the "orcid" field.
func (puo *PersonUpdateOne) SetOrcid(s string) *PersonUpdateOne {
	puo.mutation.SetOrcid(s)
	return puo
}

// SetNillableOrcid sets the "orcid" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableOrcid(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetOrcid(*s)
	}
	return puo
}

// ClearOrcid clears the value of the "orcid" field.
func (puo *PersonUpdateOne) ClearOrcid() *PersonUpdateOne {
	puo.mutation.ClearOrcid()
	return puo
}

// SetOrcidToken sets the "orcid_token" field.
func (puo *PersonUpdateOne) SetOrcidToken(s string) *PersonUpdateOne {
	puo.mutation.SetOrcidToken(s)
	return puo
}

// SetNillableOrcidToken sets the "orcid_token" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableOrcidToken(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetOrcidToken(*s)
	}
	return puo
}

// ClearOrcidToken clears the value of the "orcid_token" field.
func (puo *PersonUpdateOne) ClearOrcidToken() *PersonUpdateOne {
	puo.mutation.ClearOrcidToken()
	return puo
}

// SetPreferredFirstName sets the "preferred_first_name" field.
func (puo *PersonUpdateOne) SetPreferredFirstName(s string) *PersonUpdateOne {
	puo.mutation.SetPreferredFirstName(s)
	return puo
}

// SetNillablePreferredFirstName sets the "preferred_first_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePreferredFirstName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPreferredFirstName(*s)
	}
	return puo
}

// ClearPreferredFirstName clears the value of the "preferred_first_name" field.
func (puo *PersonUpdateOne) ClearPreferredFirstName() *PersonUpdateOne {
	puo.mutation.ClearPreferredFirstName()
	return puo
}

// SetPreferredLastName sets the "preferred_last_name" field.
func (puo *PersonUpdateOne) SetPreferredLastName(s string) *PersonUpdateOne {
	puo.mutation.SetPreferredLastName(s)
	return puo
}

// SetNillablePreferredLastName sets the "preferred_last_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePreferredLastName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPreferredLastName(*s)
	}
	return puo
}

// ClearPreferredLastName clears the value of the "preferred_last_name" field.
func (puo *PersonUpdateOne) ClearPreferredLastName() *PersonUpdateOne {
	puo.mutation.ClearPreferredLastName()
	return puo
}

// SetTitle sets the "title" field.
func (puo *PersonUpdateOne) SetTitle(s string) *PersonUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableTitle(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// ClearTitle clears the value of the "title" field.
func (puo *PersonUpdateOne) ClearTitle() *PersonUpdateOne {
	puo.mutation.ClearTitle()
	return puo
}

// SetRole sets the "role" field.
func (puo *PersonUpdateOne) SetRole(s []string) *PersonUpdateOne {
	puo.mutation.SetRole(s)
	return puo
}

// AppendRole appends s to the "role" field.
func (puo *PersonUpdateOne) AppendRole(s []string) *PersonUpdateOne {
	puo.mutation.AppendRole(s)
	return puo
}

// ClearRole clears the value of the "role" field.
func (puo *PersonUpdateOne) ClearRole() *PersonUpdateOne {
	puo.mutation.ClearRole()
	return puo
}

// SetSettings sets the "settings" field.
func (puo *PersonUpdateOne) SetSettings(m map[string]string) *PersonUpdateOne {
	puo.mutation.SetSettings(m)
	return puo
}

// ClearSettings clears the value of the "settings" field.
func (puo *PersonUpdateOne) ClearSettings() *PersonUpdateOne {
	puo.mutation.ClearSettings()
	return puo
}

// SetObjectClass sets the "object_class" field.
func (puo *PersonUpdateOne) SetObjectClass(s []string) *PersonUpdateOne {
	puo.mutation.SetObjectClass(s)
	return puo
}

// AppendObjectClass appends s to the "object_class" field.
func (puo *PersonUpdateOne) AppendObjectClass(s []string) *PersonUpdateOne {
	puo.mutation.AppendObjectClass(s)
	return puo
}

// ClearObjectClass clears the value of the "object_class" field.
func (puo *PersonUpdateOne) ClearObjectClass() *PersonUpdateOne {
	puo.mutation.ClearObjectClass()
	return puo
}

// SetExpirationDate sets the "expiration_date" field.
func (puo *PersonUpdateOne) SetExpirationDate(s string) *PersonUpdateOne {
	puo.mutation.SetExpirationDate(s)
	return puo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableExpirationDate(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetExpirationDate(*s)
	}
	return puo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (puo *PersonUpdateOne) ClearExpirationDate() *PersonUpdateOne {
	puo.mutation.ClearExpirationDate()
	return puo
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (puo *PersonUpdateOne) AddOrganizationIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddOrganizationIDs(ids...)
	return puo
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (puo *PersonUpdateOne) AddOrganizations(o ...*Organization) *PersonUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrganizationIDs(ids...)
}

// AddOrganizationPersonIDs adds the "organization_person" edge to the OrganizationPerson entity by IDs.
func (puo *PersonUpdateOne) AddOrganizationPersonIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddOrganizationPersonIDs(ids...)
	return puo
}

// AddOrganizationPerson adds the "organization_person" edges to the OrganizationPerson entity.
func (puo *PersonUpdateOne) AddOrganizationPerson(o ...*OrganizationPerson) *PersonUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrganizationPersonIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (puo *PersonUpdateOne) ClearOrganizations() *PersonUpdateOne {
	puo.mutation.ClearOrganizations()
	return puo
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (puo *PersonUpdateOne) RemoveOrganizationIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemoveOrganizationIDs(ids...)
	return puo
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (puo *PersonUpdateOne) RemoveOrganizations(o ...*Organization) *PersonUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrganizationIDs(ids...)
}

// ClearOrganizationPerson clears all "organization_person" edges to the OrganizationPerson entity.
func (puo *PersonUpdateOne) ClearOrganizationPerson() *PersonUpdateOne {
	puo.mutation.ClearOrganizationPerson()
	return puo
}

// RemoveOrganizationPersonIDs removes the "organization_person" edge to OrganizationPerson entities by IDs.
func (puo *PersonUpdateOne) RemoveOrganizationPersonIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemoveOrganizationPersonIDs(ids...)
	return puo
}

// RemoveOrganizationPerson removes "organization_person" edges to OrganizationPerson entities.
func (puo *PersonUpdateOne) RemoveOrganizationPerson(o ...*OrganizationPerson) *PersonUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrganizationPersonIDs(ids...)
}

// Where appends a list predicates to the PersonUpdate builder.
func (puo *PersonUpdateOne) Where(ps ...predicate.Person) *PersonUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	puo.defaults()
	return withHooks[*Person, PersonMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PersonUpdateOne) defaults() {
	if _, ok := puo.mutation.DateUpdated(); !ok {
		v := person.UpdateDefaultDateUpdated()
		puo.mutation.SetDateUpdated(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PersonUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PersonUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Person.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DateUpdated(); ok {
		_spec.SetField(person.FieldDateUpdated, field.TypeTime, value)
	}
	if value, ok := puo.mutation.GismoID(); ok {
		_spec.SetField(person.FieldGismoID, field.TypeString, value)
	}
	if puo.mutation.GismoIDCleared() {
		_spec.ClearField(person.FieldGismoID, field.TypeString)
	}
	if value, ok := puo.mutation.Active(); ok {
		_spec.SetField(person.FieldActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.BirthDate(); ok {
		_spec.SetField(person.FieldBirthDate, field.TypeString, value)
	}
	if puo.mutation.BirthDateCleared() {
		_spec.ClearField(person.FieldBirthDate, field.TypeString)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
	}
	if puo.mutation.EmailCleared() {
		_spec.ClearField(person.FieldEmail, field.TypeString)
	}
	if value, ok := puo.mutation.OtherID(); ok {
		_spec.SetField(person.FieldOtherID, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedOtherID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldOtherID, value)
		})
	}
	if puo.mutation.OtherIDCleared() {
		_spec.ClearField(person.FieldOtherID, field.TypeJSON)
	}
	if value, ok := puo.mutation.FirstName(); ok {
		_spec.SetField(person.FieldFirstName, field.TypeString, value)
	}
	if puo.mutation.FirstNameCleared() {
		_spec.ClearField(person.FieldFirstName, field.TypeString)
	}
	if value, ok := puo.mutation.FullName(); ok {
		_spec.SetField(person.FieldFullName, field.TypeString, value)
	}
	if puo.mutation.FullNameCleared() {
		_spec.ClearField(person.FieldFullName, field.TypeString)
	}
	if value, ok := puo.mutation.LastName(); ok {
		_spec.SetField(person.FieldLastName, field.TypeString, value)
	}
	if puo.mutation.LastNameCleared() {
		_spec.ClearField(person.FieldLastName, field.TypeString)
	}
	if value, ok := puo.mutation.JobCategory(); ok {
		_spec.SetField(person.FieldJobCategory, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedJobCategory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldJobCategory, value)
		})
	}
	if puo.mutation.JobCategoryCleared() {
		_spec.ClearField(person.FieldJobCategory, field.TypeJSON)
	}
	if value, ok := puo.mutation.Orcid(); ok {
		_spec.SetField(person.FieldOrcid, field.TypeString, value)
	}
	if puo.mutation.OrcidCleared() {
		_spec.ClearField(person.FieldOrcid, field.TypeString)
	}
	if value, ok := puo.mutation.OrcidToken(); ok {
		_spec.SetField(person.FieldOrcidToken, field.TypeString, value)
	}
	if puo.mutation.OrcidTokenCleared() {
		_spec.ClearField(person.FieldOrcidToken, field.TypeString)
	}
	if value, ok := puo.mutation.PreferredFirstName(); ok {
		_spec.SetField(person.FieldPreferredFirstName, field.TypeString, value)
	}
	if puo.mutation.PreferredFirstNameCleared() {
		_spec.ClearField(person.FieldPreferredFirstName, field.TypeString)
	}
	if value, ok := puo.mutation.PreferredLastName(); ok {
		_spec.SetField(person.FieldPreferredLastName, field.TypeString, value)
	}
	if puo.mutation.PreferredLastNameCleared() {
		_spec.ClearField(person.FieldPreferredLastName, field.TypeString)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(person.FieldTitle, field.TypeString, value)
	}
	if puo.mutation.TitleCleared() {
		_spec.ClearField(person.FieldTitle, field.TypeString)
	}
	if value, ok := puo.mutation.Role(); ok {
		_spec.SetField(person.FieldRole, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedRole(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldRole, value)
		})
	}
	if puo.mutation.RoleCleared() {
		_spec.ClearField(person.FieldRole, field.TypeJSON)
	}
	if value, ok := puo.mutation.Settings(); ok {
		_spec.SetField(person.FieldSettings, field.TypeJSON, value)
	}
	if puo.mutation.SettingsCleared() {
		_spec.ClearField(person.FieldSettings, field.TypeJSON)
	}
	if value, ok := puo.mutation.ObjectClass(); ok {
		_spec.SetField(person.FieldObjectClass, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedObjectClass(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, person.FieldObjectClass, value)
		})
	}
	if puo.mutation.ObjectClassCleared() {
		_spec.ClearField(person.FieldObjectClass, field.TypeJSON)
	}
	if value, ok := puo.mutation.ExpirationDate(); ok {
		_spec.SetField(person.FieldExpirationDate, field.TypeString, value)
	}
	if puo.mutation.ExpirationDateCleared() {
		_spec.ClearField(person.FieldExpirationDate, field.TypeString)
	}
	if puo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.OrganizationsTable,
			Columns: person.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		createE := &OrganizationPersonCreate{config: puo.config, mutation: newOrganizationPersonMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !puo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.OrganizationsTable,
			Columns: person.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationPersonCreate{config: puo.config, mutation: newOrganizationPersonMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.OrganizationsTable,
			Columns: person.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationPersonCreate{config: puo.config, mutation: newOrganizationPersonMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrganizationPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   person.OrganizationPersonTable,
			Columns: []string{person.OrganizationPersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationperson.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrganizationPersonIDs(); len(nodes) > 0 && !puo.mutation.OrganizationPersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   person.OrganizationPersonTable,
			Columns: []string{person.OrganizationPersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationperson.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrganizationPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   person.OrganizationPersonTable,
			Columns: []string{person.OrganizationPersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationperson.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
